{"componentChunkName":"component---src-templates-post-tsx","path":"/2019-05-22-크롬-네이티브-레이지-로딩/","result":{"data":{"markdownRemark":{"html":"<h2>레이지 로딩이란?</h2>\n<p>좋은 기회로 2019년 구글I/O에 참석했다. 웹 기술 세션 중에는 크게 눈에 띄는 세션은 없었지만, 일부 세션에서 소개된 웹과 관련 기술 몇 가지는 흥미로웠다. Native Lazy Loading, Portals, Duplex, Rich Results 정도가 나의 관심을 끌었다. 그중 키노트에서 시작해 몇 개의 세션에서 두루두루 언급한 네이티브 레이지 로딩이 제일 기대됐다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/389021/57991186-3dd6cf00-7ae8-11e9-932f-47f02885e379.jpeg\" alt=\"관련 세션\"></p>\n<p>레이지 로딩, 특히 이미지 레이지 로딩은 새로운 기술은 아니다. 기존 브라우저는 웹페이지를 불러올 때 초기부터 전체 영역에 해당하는 이미지들을 동시에 모두 내려받는다. 서비스의 사용자는 웹페이지의 모든 이미지를 보지 못한 채 다른 웹페이지로 이동할 가능성이 있지만, 브라우저는 항상 모든 이미지를 미리 내려받는 낭비를 하는 것이다. 이미지 레이지 로딩은 초기 페이지 로딩에서 모든 이미지를 내려받지 않는다. 초기에는 브라우저 뷰포트에 보이는 영역의 이미지만 내려받고 나머지 이미지는 필요한 상황이거나 가능성이 큰 상황을 휴리스틱(heuristics)을 이용해 판단하고 이미지를 내려받는다. 즉 유저의 스크롤이나 기타 환경 요인들을 판단해 이미지를 선택적으로 내려받는다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/389021/58000861-fdda1100-7b14-11e9-8b65-9727cead16b0.jpeg\" alt=\"레이지 로딩\"> <img src=\"https://user-images.githubusercontent.com/389021/57991423-cd30b200-7ae9-11e9-8aa7-f7248c496e48.jpeg\" alt=\"뷰포트의 이미지만 로드\"></p>\n<p>레이지 로딩을 적용하면 불필요한 네트워크 비용을 줄일 뿐 아니라 성능, 메모리, 사용성 모든 면에서 유리해진다. 기존에는 레이지 로딩을 자바스크립트로 직접 구현하거나 라이브러리를 사용했다. 브라우저의 네이티브로 지원되는 레이지 로딩은 이미지를 내려받는 시점의 판단을 브라우저 내부에서 결정하기 때문에 자바스크립트보다는 많은 정보에 접근할 수 있을 것이고 더욱 정교한 휴리스틱을 사용할 것으로 예상된다. 반면 이런 판단에 개입할 수 있는 옵션은 제공되지 않을 것으로 보인다. 크롬은 75 버전부터 <code class=\"language-text\">iframe</code> 과 <code class=\"language-text\">img</code> 의 레이지 로딩을 네이티브로 지원할 예정이다.</p>\n<h2>새로운 속성 <code class=\"language-text\">loading</code></h2>\n<p><a href=\"https://docs.google.com/document/d/1e8ZbVyUwgIkQMvJma3kKUDg8UUkLRRdANStqKuOIvHg\">공식 레이지 로드 디자인 문서</a>에 따르면 레이지로딩은 <code class=\"language-text\">&lt;img&gt;</code> 와 <code class=\"language-text\">&lt;iframe&gt;</code> 엘리멘트에 추가되는 새로운 속성 <code class=\"language-text\">loading</code> 으로 설정할 수 있다고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cat.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">loading</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lazy<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>some.html<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">loading</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lazy<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><code class=\"language-text\">loading</code> 속성으로 <code class=\"language-text\">lazy</code> 값을 주면 해당 이미지나 아이프레임은 레이지 로딩된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cat.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">loading</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>eager<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>some.html<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">loading</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>eager<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><code class=\"language-text\">eager</code> 값은 의도적으로 레이지 로딩을 사용하지 않고 기존 브라우저의 동작과 동일하게 페이지 로딩 시 이미지를 내려받는다. 상황에 따라서는 레이지 로딩이 필요하지 않을 수도 있다. 서비스 사용성에 레이지 로딩이 방해된다면 <code class=\"language-text\">eager</code> 옵션을 설정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cat.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">loading</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>auto<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cat.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p><code class=\"language-text\">auto</code> 는 <code class=\"language-text\">loading</code> 속성의 디폴트 값으로 따로 속성을 지정하지 않으면 적용되는 값이다. 브라우저에게 레이지 로딩을 할지 말지에 대한 결정을 맡긴다.</p>\n<p>크롬은 세계에서 제일 많이 사용하고 있는 브라우저가 된 지 오래고 한국에서도 현재 53% 이상의 사용률로 제일 많이 사용되고 있다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/389021/57991949-d3745d80-7aec-11e9-8233-cfb92bc109f9.png\" alt=\"브라우저 사용율\"></p>\n<p>이 53%의 사용자를 고려해 미리 테스트해볼 필요가 있다. 특히 이미지에 민감한 서비스라면 정식 버전에 포함되기 전에 반드시 미리 사용성을 테스트해 보고 서비스에 맞는 적절한 대응이 필요하다. 보통은 문제 없을 것으로 예상되지만, 디폴트가 <code class=\"language-text\">auto</code> 값이라는 점은 사용성에 의도치 않은 문제를 발생시킬 수 있다. 아직 레이지 로딩의 도입을 고려할 수 없는 서비스라면 적어도 이미지마다 <code class=\"language-text\">loading</code> 의 값을 <code class=\"language-text\">eager</code> 로 적용해 기존의 동작과 동일하게 유지할 필요가 있지 않나 생각한다. 물론 <code class=\"language-text\">auto</code> 가 전혀 문제 없을 수도 있다.</p>\n<h2>기능 탐지 및 폴백</h2>\n<p><a href=\"https://github.com/scott-little/lazyload\">LazyLoad Explainer</a> 문서를 살펴보면 레이지 로드를 지원하는 브라우저를 탐지하는 방법을 알 수 있다. 다른 기능 탐지와 비슷한데 이미지 엘리먼트의 인터페이스 HTMLImageElement의 프로토타입에 <code class=\"language-text\">loading</code> 프로퍼티가 존재하는지 판단한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'loading'</span> <span class=\"token keyword\">in</span> <span class=\"token class-name\">HTMLImageElement</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"네이티브 레이지 로딩 지원함\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">else</span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"지원 안함\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">loading</code> 속성을 적용해 간단히 사용할 수 있고 서비스에 악영향을 줄 가능성이 적기 때문에 기존에 레이지 로딩을 사용하지 않던 서비스도 크롬에서는 레이지 로딩을 사용하고 다른 브라우저에서는 무시하더라도 충분히 효과는 있겠지만 레이지 로딩을 모든 브라우저에서 제공하고자 한다면 폴백으로 다른 라이브러리를 고려해볼 수 있다.(물론 직접 만들 수도 있다)</p>\n<p><img src=\"https://user-images.githubusercontent.com/389021/57999567-ccf7dd00-7b10-11e9-8f83-9ebce0a92386.jpeg\" alt=\"크로스브라우징\"></p>\n<p>구글 I/O의 <a href=\"https://www.youtube.com/watch?v=YJGCZCaIZkQ\">\"Speed at Scale\"</a> 세션에서는 폴백으로 <a href=\"https://github.com/aFarkas/lazysizes\">lazysizes</a>라는 라이브러리를 사용하는 예제 코드를 공개했다. 이미지의 코드는 가독성이 떨어져 <a href=\"https://addyosmani.com/blog/lazy-loading/\">Addy Osmani의 블로그</a>에서 동일한 코드를 복사해서 옮겨 왔다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- Let's load this in-viewport image normally --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hero.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>..<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n\n<span class=\"token comment\">&lt;!-- Let's lazy-load the rest of these images --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">data-src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>unicorn.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">loading</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lazy<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>..<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lazyload<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">data-src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cats.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">loading</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lazy<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>..<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lazyload<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">data-src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dogs.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">loading</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lazy<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>..<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lazyload<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'loading'</span> <span class=\"token keyword\">in</span> <span class=\"token class-name\">HTMLImageElement</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> images <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"img.lazyload\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    images<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">img</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> script <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"script\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    script<span class=\"token punctuation\">.</span>async <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    script<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">\"https://cdnjs.cloudflare.com/ajax/libs/lazysizes/4.1.8/lazysizes.min.js\"</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><code class=\"language-text\">lazysizes</code> 와 같은 라이브러리를 사용해보진 않았지만, 이미지 레이지 로딩 구현 코드들이 다 비슷하기 때문에 구현 내용을 추측할 수 있다. 초기에는 모든 <code class=\"language-text\">&lt;img&gt;</code> 엘리먼트에 플레이스 홀더 이미지를 노출하고 <code class=\"language-text\">data-src</code> 경로의 이미지를 적절한 상황에 내려받고 완료되면 이미지 엘리먼트의 소스로 변경하는 형태로 구현되었을 것이다. 폴백 예제의 구현 내용을 보면 초기에는 <code class=\"language-text\">lazysizes</code> 를 사용하는 코드로 작업하고 기능탐지로 네이티브 레이지 로딩을 사용할 수 있다면 <code class=\"language-text\">lazysizes</code> 에서 필요한 <code class=\"language-text\">data-src</code> 를 모두 <code class=\"language-text\">src</code> 로 바꿔 네이티브 레이지 로딩을 사용하도록 엘리먼트를 변경하고 있다.</p>\n<h2>정리</h2>\n<p>귀국 후 <a href=\"https://addyosmani.com/blog/lazy-loading/\">Addy Osmani의 블로그</a>의 하단 내용을 따라서 크롬 카나리버전에서 테스트해봤다. 기능 탐지도 되고 <code class=\"language-text\">Image</code> 객체의 <code class=\"language-text\">loading</code> 값까지 확인할 수 있었지만, 정상적으로 레이지 로딩이 되지 않고 웹페이지 로딩 초기부터 모든 이미지를 내려받고 있다. 아직 개발 중인 기능이기에 정식 버전이나 더 나은 카나리버전에서는 정상 동작할 것으로 기대한다. 테스트해본 카나리버전은 <code class=\"language-text\">76.0.3799.0</code> 이다.</p>\n<p>네이티브 레이지 로딩은 Webkit 엔진 개발자들도 긍정적으로 검토하고 있다는 카더라가 있고 파이어폭스는 곧 크롬과 동일한 스펙으로 적용될 예정이라고 <a href=\"https://www.zdnet.com/article/firefox-will-support-image-lazy-loading-for-new-tab-page/\">ZDNET</a> 의 기사로 올라왔다. 마이크로소프트의 Edge도 크로미엄 기반으로 개발되고 있으니 크롬에서 시작한 스펙이 자연스럽게 표준이 되고 있는 게 현실인 것 같다. 물론 좋은 기능이고 충분히 표준 스펙으로 고려할만한 기능이지만 작년에 읽었던 <a href=\"https://www.theverge.com/2018/1/4/16805216/google-chrome-only-sites-internet-explorer-6-web-standards\">\"Chrome is turning into the new Internet Explorer 6\"</a> 이란 아티클이 떠올랐다. 뭐 어떻게 되었던 좋은 스펙이 많이 개발되서 웹의 가능성이 더 열리고 나의 밥그릇의 가능성도 더 커졌으면 좋겠다.</p>","fields":{"slug":"/2019-05-22-크롬 네이티브 레이지 로딩/"},"excerpt":"레이지 로딩이란? 좋은 기회로 2019년 구글I/O에 참석했다. 웹 기술 세션 중에는 크게 눈에 띄는 세션은 없었지만, 일부 세션에서 소개된 웹과 관련 기술 몇 가지는 흥미로웠다. Native Lazy Loading, Portals, Duplex, Rich Results 정도가 나의 관심을 끌었다. 그중 키노트에서 시작해 몇 개의 세션에서 두루두루 언급한 네이티브 레이지 로딩이 제일 기대됐다. 관련 세션 레이지 로딩, 특히 이미지 레이지 로딩은 새로운 기술은 아니다. 기존 브라우저는 웹페이지를 불러올 때 초기부터 전체 영역에 해당…","frontmatter":{"title":"크롬 네이티브 레이지 로딩","date":"22 May, 2019","categories":"frontend, tool"}},"recomendPost":{"nodes":[{"fields":{"slug":"/2020-07-27-1/"},"frontmatter":{"title":"이벤트 핸들러를 대하는 개발자의 자세","categories":"frontend, refactoring","date":"27 July, 2020"},"excerpt":"이벤트 핸들러는 UI를 개발할 때면 항상 사용된다. 웹뿐만 아니라 네이티브 어플리케이션에서도 약간의 차이가 있을뿐 거의 동일한 추상이 사용된다. 자주 사용되는 만큼 중요하지만 사실 너무 자주 사용되다 보니 가볍게 생각하며 습관적으로 고민 없이 좋지 않은 코드를 만들곤 한다. 자주 사용된다는 건 코드의 양적인 비중도 크다는 것이고 그만큼 조금만 더 신경 쓴다면 큰 효과를 볼 수도 있다. 이런 이벤트 핸들러를 어떻게 다루면 좋은지에 대해 간략하게 정리해봤다. 이벤트 핸들러라고 해서 꼭 DOM 이벤트에만 해당하는 것은 아니며 모듈 간의…"},{"fields":{"slug":"/2017-04-10-웹어셈블리 바로 사용 해보기/"},"frontmatter":{"title":"웹어셈블리 바로 사용 해보기","categories":"frontend, translation","date":"10 April, 2017"},"excerpt":"원글: https://tutorials.technology/tutorials/11-webassembly-initial-steps-tutorial.html 소개 웹어셈블리는 미래에 매우 유용하게 사용될 새롭고도 새로운 표준이다. 이 기술은 W3C 커뮤니티 그룹에서 애플, 구글 , 마이크로소프트 그리고 모질라와 함께 개발되고 있다. 이 프로젝트의 초기 시점인 지금은 고 수준의 언어가 아닌 C/C++로 초점이 맞춰져 있고 웹어셈블리의 약어는 wasm 이며 자바스크립트와 브라우저의 개선 사항 중 하나이다. 웹어셈블리는 자바스크립트를 대체…"},{"fields":{"slug":"/2016-11-15-크롬개발자도구를 이용한 프론트엔드 성능측정/"},"frontmatter":{"title":"크롬 개발자 도구를 이용한 프론트엔드 성능 측정","categories":"frontend, tool","date":"15 November, 2016"},"excerpt":"크롬 개발자 도구를 이용한 프론트엔드 성능 측정 타임라인 타임라인은 웹페이지를 로드할때나 혹은 유저 인터렉션 등으로 인해 브라우저에서 발생하는 동작들을 레코딩하고 타임라인 형태로 시각화해주는 도구다. 시간의 흐름에 따라 브라우저의 이벤트(여기서의 이벤트는 DOM상의 이벤트가 아닌 브라우저 내부의 동작, 물론 DOM이벤트를 발생시키는 이벤트도 있다)뿐 아니라 CPU, 메모리, 네트워크 사용량과 FPS까지 확인 가능하다. 이벤트에 스택 트레이스 형태로 자바스크립트의 함수 콜 스택도 확인이 가능해 어떤 자바스크립트 코드가 성능에 영향을…"},{"fields":{"slug":"/2016-08-23-도커로 노드앱을 구축하며 배운것들/"},"frontmatter":{"title":"도커로 노드앱을 구축하며 배운것들","categories":"nodejs, tool, translation","date":"23 August, 2016"},"excerpt":"도커로 노드 앱을 구축하며 배운것들 원문\nhttp://jdlm.info/articles/2016/03/06/lessons-building-node-app-docker.html\nby John Lees-Miller 도커를 이용해 노드제이에스 어플리케이션을 개발 하고 배포 하면서 어렵게 배운 팁과 트릭을 공유하고자 한다. 이 튜토리얼 아티클에서는 socket.io chat example을 이용해 기초부터 프로덕션에 응용 가능한 상태까지 될 수 있으면 쉽게 이해할 수 있도록 설명하려 한다. 아래와 같은 내용을 다룬다. 도커를 이용해 노드…"}]},"recentPost":{"nodes":[{"fields":{"slug":"/2020-10-05/"},"frontmatter":{"title":"독서 습관을 만드는 구체적인 방법","categories":"motivation, life","date":"05 October, 2020"},"excerpt":"1 독서를 습관으로 만들기 위해 그간 많은 노력을 했었다. 습관적으로 SNS를 열면서 “이럴 시간에 책을 읽었으면…” 하고 자주 생각했지만 SNS 아이콘을 터치하는 유혹을 뿌리치기 힘들었다. 여러 가지 시도를 했고  “하루 25분 실행하기: 하루를 대하는 14년차 개발자의 자세” 에서 밝혔다시피 아직 다독가에 비하면 보잘것없지만 그래도 나름 습관 만들기에는 성공한 것 같다. 독서 습관을 만들면서 알게 된 몇가지 좋은 팁을 공유한다. 읽기 속도 측정하기 독서 습관을 만들 때 제일 중요한 것은 책 읽는 속도를 파악하는 것이라고 생각한…"},{"fields":{"slug":"/2020-09-07/"},"frontmatter":{"title":"하루 25분 실행하기: 하루를 대하는 14년차 개발자의 자세","categories":"productivity, motivation, life","date":"07 September, 2020"},"excerpt":"하루 24시간은 모두에게 공평하지만 그 24시간을 모두가 공평하게 사용하진 않는다. 하루의 여가시간을 어떻게 하면 더 효율적으로 사용할 수 있을까는 나의 오랜 고민거리였다. 단기 목표도 세워보고 장기 목표도 세워보고 포모도로, GTD도 도입하고 간츠도 사용해보고 하루 표준 계획표도 짜보고 일주일 보고서도 만들어봤다. 하루를 온전히 “노력”하기 위한 ”노력”을 많이 했다. 시도했던 것 대부분은 조금씩 달랐지만 주로 나에게 맞는 일상 패턴을 찾는 과정이었다. 개발자로서 회사 업무시간이나 여가 시간, 하루 대부분의 시간을 개발과 관련된…"},{"fields":{"slug":"/2020-07-27-1/"},"frontmatter":{"title":"이벤트 핸들러를 대하는 개발자의 자세","categories":"frontend, refactoring","date":"27 July, 2020"},"excerpt":"이벤트 핸들러는 UI를 개발할 때면 항상 사용된다. 웹뿐만 아니라 네이티브 어플리케이션에서도 약간의 차이가 있을뿐 거의 동일한 추상이 사용된다. 자주 사용되는 만큼 중요하지만 사실 너무 자주 사용되다 보니 가볍게 생각하며 습관적으로 고민 없이 좋지 않은 코드를 만들곤 한다. 자주 사용된다는 건 코드의 양적인 비중도 크다는 것이고 그만큼 조금만 더 신경 쓴다면 큰 효과를 볼 수도 있다. 이런 이벤트 핸들러를 어떻게 다루면 좋은지에 대해 간략하게 정리해봤다. 이벤트 핸들러라고 해서 꼭 DOM 이벤트에만 해당하는 것은 아니며 모듈 간의…"},{"fields":{"slug":"/2020-06-15-유용한테스트케이스를위한개발자의자세/"},"frontmatter":{"title":"유용한 테스트 케이스를 위한 개발자의 자세","categories":"test, tdd","date":"15 June, 2020"},"excerpt":"각종 커뮤니티에 주기적으로 등장하는 \"private 메서드를 테스트하려면 어떻게 하나요?\" 혹은 \"private 메서드를 테스트해야 하나요?\" 와 같은 질문을 보면서 언젠가는 관련해서 정리해봐야겠다고 생각했었는데 꽤 시간이 흘러 이 내용으로 글을 써본다. 주제 자체는 간단한 편이지만 사람마다 생각이 다른 것 같다. 특히 해외 개발자들의 의견이 분분한 것 같다. 사실 이 문제는 효과적인 테스트 케이스(이하 TC)란 무엇인가란 질문과 비슷하다. private 메서드는 객체지향적인 관점에서 생각한 것이고 노출된 함수 내부에서 접근하는,…"}]}},"pageContext":{"slug":"/2019-05-22-크롬 네이티브 레이지 로딩/","categoriesRegex":"/frontend|tool/g"}},"staticQueryHashes":["1529427419","1755485493","2738229898","993531770"]}