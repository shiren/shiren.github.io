{"componentChunkName":"component---src-templates-post-tsx","path":"/2021-02-22/","result":{"data":{"markdownRemark":{"html":"<p><img src=\"https://user-images.githubusercontent.com/389021/107895328-53f01880-6f76-11eb-9a7a-3c994cc92514.jpg\"></p>\n<p><a href=\"https://blog.shiren.dev/2021-02-15/\">파트 1</a>에서는 기본 자바스크립트 개발 환경을 러나와 함께 구축해봤어요. 기본 환경만으로 충분하신 분들도 계시겠지만 보통은 그렇지 않을 겁니다.\n<strong>이제 두 가지 개발 환경을 추가할 건데요. 타입 스크립트와 리액트 개발 환경이에요.</strong></p>\n<p>우선 타입스크립트 환경을부터 추가할 거예요. 그전에 러나로 해줘야 할 작업이 있습니다. <em>타입스크립트 환경도 결국 지금까지 저희가 구축한 자바스크립트 환경 위에 만들어질 것이기 때문에 디펜던시 모듈을 공유할 수 있도록 만들고 환경 설정 파일들도 기본 자바스크립트의 환경설정 파일들을 확장해서 사용할 거예요. 그리고 그 타입스크립트 환경 위에 리액트 개발 환경을 구축할 겁니다.</em> 혹시라도 타입 스크립트 없이 기본 자바스크립트 환경위에 리액트만 추가하시고 싶으시다면 타입스크립트 관련 작업들은 생략하시면 됩니다.</p>\n<h2><code class=\"language-text\">pgts</code> 패키지 추가하기</h2>\n<p>자 이제 <a href=\"https://blog.shiren.dev/2021-02-15/\">파트 1</a>에서 했던것과 동일하게 러나의 <code class=\"language-text\">create</code> 커맨드를 이용해  타입스크립트 환경인 <code class=\"language-text\">pgts</code> 패키지를 추가합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"> npx lerna create pgts</code></pre></div>\n<p>패키지 설정을 완료하면 <code class=\"language-text\">packages/pgts</code> 디렉터리가 생겼을 겁니다. 그리고 분명 러나가 만들어 놓은 디렉터리들이 있겠죠 1부 초반에 했던 것처럼 <code class=\"language-text\">__test__</code> 디렉터리를 지우고 <code class=\"language-text\">lib</code> 디렉터리를 <code class=\"language-text\">src</code>로 바꿉니다. <code class=\"language-text\">src/pgts.js</code> 파일도 <code class=\"language-text\">src/index.ts</code> 파일로 바꿉니다.\n<code class=\"language-text\">pgjs</code>와 동일한 환경에서 시작합니다. <code class=\"language-text\">packages/pgjs/packages.json</code>의 내용을 카피해서 <code class=\"language-text\">pgts</code>의 <code class=\"language-text\">pacakges.json</code> 덮어써 주세요. 그리고 <code class=\"language-text\">name</code>만 <code class=\"language-text\">pgts</code>로 바꿔줍니다. <code class=\"language-text\">main</code> 속성이나 <code class=\"language-text\">directories</code>도 수정해 주시면 좋지만 우리 플레이그라운드에는 별로 중요한 속성은 아니니까요. 신경 쓰이시는 분들은 나머지 속성들도 바꿔주세요. 사실 <code class=\"language-text\">packages/pgjs</code>의 내용을 그대로 <code class=\"language-text\">packages/pgts</code> 을 복붙하고 <code class=\"language-text\">packages.json</code>만 수정해도 됩니다. 러나의 <code class=\"language-text\">create</code> 을 쓸 필요가 없죠. 다음에는 그렇게 할 겁니다.</p>\n<h2><code class=\"language-text\">devDependencies</code> 모듈들 루트로 끌어당기기</h2>\n<p>자 이제 <code class=\"language-text\">pgts</code> 패키지는 추가했지만 아직 <code class=\"language-text\">packages.json</code> 외에는 아무것도 없는 상태에요. 초반에 이야기했듯 <code class=\"language-text\">pgjs</code>의 디펜던시 모듈은 공통으로 사용될 모듈이기 때문에 <code class=\"language-text\">pgts</code> 와 공유해서 사용할 것입니다. 이것을 가능하게 해주는 것이 바로 러나지요.\n러나는 다수의 프로젝트를 모노리포로 관리하기 위한 여러 가지 기능을 제공합니다. 지금 우리가 할 작업은 디펜던시 모듈을 루트에서 꺼내 쓰도록 이동시킬 건데요. 이 작업은 러나의 <code class=\"language-text\">link</code> 커맨드로 쉽게 처리할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">npx lerna <span class=\"token function\">link</span> convert</code></pre></div>\n<p><code class=\"language-text\">link</code> 명령이 실행되면 기존에 <code class=\"language-text\">node_modules</code>에 설치되어 있던 <code class=\"language-text\">devDependencies</code>들이 루트로 이동하고 각 패키지와 루트의 <code class=\"language-text\">package.json</code>의 내용도 수정됩니다. 확인해보세요.\n이제 <code class=\"language-text\">pgjs</code>와 <code class=\"language-text\">pgts</code>의 <code class=\"language-text\">devDependencies</code> 모듈들이 프로젝트 루트를 통해 공유하게 됩니다.</p>\n<p>반대로 <code class=\"language-text\">devDependencies</code>지만 공통으로 사용되지 않는 것은 <code class=\"language-text\">dependencies</code>로 설치해서 옮겨지지 않게 할 수 있어요. 우린 플레이그라운드를 만드는 것이니 상관없죠. 배포할 생각이 없으니까요. 그냥 몽땅 다 <code class=\"language-text\">devDependencies</code>로 설치해서 모든 디펜던시가 공유되도록 할 겁니다.</p>\n<p>이 작업으로 모든 디펜던시가 루트로 옮겨진 패키지들은 <code class=\"language-text\">packages-lock.json</code> 도 필요 없으니 지워주세요.</p>\n<h2>설정파일 중복 줄이기</h2>\n<p>공통 모듈은 루트에서 공유해서 쓸 수 있지만 아직 <code class=\"language-text\">pgts</code> 환경에는 설정 파일이 하나도 없기 때문에 아무것도 할 수 없어요. 이제 설정 파일을 만들어 줄 건데요. <code class=\"language-text\">pgjs</code> 와 <code class=\"language-text\">pgts</code>는 동일한 환경을 비슷하게 사용하다 보니 결국 설정 파일도 중복되는 내용이 많을 겁니다. 가능한 범위에서 중복을 줄여가며 설정을 해볼게요.</p>\n<h3>ESLint 설정 부터 시작하죠</h3>\n<p><code class=\"language-text\">.eslint.js</code>에 정의된 ESLlint의 설정들은 <code class=\"language-text\">extends</code> 옵션으로 다른 파일에서 끌어와서 사용할 수 있어요. 파트 1에서 우리는 <code class=\"language-text\">packages/pgjs/.eslintrc.js</code>에 ESLint 설정을 했었는데 이제 이 파일을 <code class=\"language-text\">packages</code> 디렉터리로 옮기고 모든 <code class=\"language-text\">pgjs</code>와 <code class=\"language-text\">pgts</code>가 사용하도록 만들 거예요. 일단 파일을 옮겨주세요. 그리고 <code class=\"language-text\">packages/pgjs</code>와 <code class=\"language-text\">packages/pgts</code>에 <code class=\"language-text\">.eslintrc.js</code> 파일을 각각 새로 만들고 아래와 같이 입력합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token string\">'../.eslintrc'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>사실 <code class=\"language-text\">pgjs</code> 패키지는 <code class=\"language-text\">packages</code> 디렉터리로 옮긴 공용 <code class=\"language-text\">.eslintrc.js</code> 파일을 그대로 쓸 것이기 때문에 <code class=\"language-text\">packages/pgjs/.eslintrc.js</code>를 따로 만들 필요가 없어요. ESLint는 설정 파일이 없으면 부모 디렉터리로 타고 올라가면서 찾기 때문에 굳이 만들지 않아도 되는 것이죠. 하지만 특정 룰을 별도로 지정해야 할 수도 있기 때문에 나중을 위해에 만들었습니다. 자 이제 기본 설정을 토대로 <code class=\"language-text\">pgts</code>는 <code class=\"language-text\">pgts</code>만의 그리고 <code class=\"language-text\">pgjs</code>는 <code class=\"language-text\">pgjs</code>만의 ESLint 설정을 추가할 수 있게 되었어요.</p>\n<h3>다음은 바벨 설정입니다</h3>\n<p>바벨 설정 파일도 비슷합니다. ESLint와 동일하게 <code class=\"language-text\">extends</code>라는 옵션으로 설정 파일을 확장할 수 있어요. 사용법 역시 동일합니다. 눈보다 손이 빠르신 분들은 벌써 하시고 계시겠죠? <code class=\"language-text\">packages/pgjs/.babelrc</code> 파일을 <code class=\"language-text\">packages</code> 디렉터리로 복사합니다. 그리고 <code class=\"language-text\">packages/pgjs</code>와 <code class=\"language-text\">packages/pgts</code>에 <code class=\"language-text\">.babelrc</code> 파일을 각각 새로 만들고 아래와 같이 입력합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"../.babelrc\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>아직은 <code class=\"language-text\">pgts</code>나 <code class=\"language-text\">pgjs</code>나 동일한 환경이기 때문에 바벨 설정은 그대로 사용해요. 나중에 <code class=\"language-text\">pgts</code> 바벨 설정에는 타입 스크립트 설정이 추가될 거예요.</p>\n<h3>그리고 마지막으로 웹팩입니다</h3>\n<p>웹 팩은 <code class=\"language-text\">extends</code> 같은 확장 옵션을 제공하진 않아요. 그런데 어차피 <code class=\"language-text\">webpack.config.js</code> 파일이 자바스크립트 파일이고 설정 객체만 리턴해주면 되기 때문에 확장하기 쉽습니다. 저는 <code class=\"language-text\">packages/webpack.config.base.js</code>라는 파일을 만들고 그 안에 기본 설정을 리턴해주는 함수를 정의해 각 패키지가 이 함수를 임포트 해서 쓰도록 했습니다. 자 일단 해볼까요?</p>\n<p>우선 <code class=\"language-text\">packages/webpack.config.base.js</code> 파일을 만든다음 <code class=\"language-text\">pacakges/pgjs</code> 의 <code class=\"language-text\">webpack.config.js</code>의 내용을 복붙합니다. 결국 이 내용이 기본 웩팩 환경이 되겠네요. 다만 외부에서 끌어 쓸때 경로 <code class=\"language-text\">__dirname</code>은 서로 다를테니 경로를 받는 매개변수를 추가하고 사용하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ..</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">env<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">,</span> dirname <span class=\"token operator\">=</span> __dirname</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// ..</span>\n entry<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 7번 라인 빈 배열로 수정</span>\n <span class=\"token comment\">// .. </span>\n path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 10번 라인 수정</span>\n <span class=\"token comment\">// .. </span>\n     <span class=\"token string\">'@src'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 26번 라인 수정</span></code></pre></div>\n<p>엔트리 포인트는 패키지마다 다를테니 기본 설정에서는 빈 배열로 만듭니다. 그리고 이것을 확장하는 쪽에서 추가합니다.</p>\n<p>자 여기까지 했으면 이제 <code class=\"language-text\">pacakges/pgjs</code> 와 <code class=\"language-text\">pacakges/pgts</code>에서 기본 설정 확장하는 웹팩 설정을 만들어 볼게요 <code class=\"language-text\">pgjs</code>는 <code class=\"language-text\">webpack.config.js</code> 파일을 수정하면 될 것이고 <code class=\"language-text\">pgts</code>에는 <code class=\"language-text\">webpack.config.js</code> 파일을 추가해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> baseConfig <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../webpack.config.base'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">env<span class=\"token punctuation\">,</span> argv</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> config <span class=\"token operator\">=</span> <span class=\"token function\">baseConfig</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">,</span> __dirname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  config<span class=\"token punctuation\">.</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// `packages/pgts` 에서는 `index.ts`</span>\n\n  <span class=\"token keyword\">return</span> config<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>돌다 거의 동일하지만 <code class=\"language-text\">pgts</code>에서는 엔트리 포인트 파일의 확장자를 타입 스크립트의 확장자인 <code class=\"language-text\">ts</code>를 써야 합니다. 주석을 참조해서 바꿔주세요.</p>\n<p> 서버를 띄워 테스트해볼까요? 테스트하기 전에 npm script로 서버를 띄우는 스크립트를 추가할 거에요. 러나로 디펜던시가 <code class=\"language-text\">link</code> 되었기 때문에 npx로는 웹팩을 실행할 수 없거든요. <code class=\"language-text\">packages/pgts</code>와 <code class=\"language-text\">packages/pgjs</code>의 <code class=\"language-text\">packages.json</code>에 스크립트를 추가합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token string\">\"serve\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack serve --mode development\"</span><span class=\"token punctuation\">,</span>\n   <span class=\"token string\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"jest\"</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>중복을 줄이는 설정 파일은 여기까지 할 거에요. 사실 제스트 하나 남았는데 제스트도 웹팩처럼 옵션으로 설정 확장을 제공하진 않지만 웹팩과 동일하게 설정 파일이 어차피 자바스크립트 일반 객체기 때문에 스프레드를 이용해서 쉽게 확장할 수 있어요. 원하시는 분들은 따로 작업하시면 될 것 같습니다. 저는 패스.</p>\n<h2>타입스크립트<a href=\"https://www.typescriptlang.org/\">(typescript)</a> 개발 환경 만들기</h2>\n<p>지금까진 <code class=\"language-text\">pgts</code> 패키지와 <code class=\"language-text\">pgjs</code>는 차이가 없어요. 완전히 동일합니다. 이제 <code class=\"language-text\">pgts</code> 패키지가 타입스크립트를 사용할 수 있게 해볼게요. 총 세가지 작업을 할거에요</p>\n<ol>\n<li>바벨이 타입스크립트를 알아먹게 설정</li>\n<li>tsconfig.json 설정</li>\n<li>ESLint가 타입스크립트를 알아먹게 설정</li>\n<li>제스트에서 타입스크립트를 알아먹게 설정</li>\n</ol>\n<h3>바벨 for 타입스크립트</h3>\n<p>자 이제 첫 번째 작업으로 바벨이 타입스크립트를 알아먹도록 해볼게요.</p>\n<p>바벨 설정도 너무 쉬워요. <code class=\"language-text\">packages/pgts</code> 디렉터리로 이동해서 바벨 타입 스크립트 프리셋 설치합니다. 바벨로 타입 스크립트를 사용할 때 필요한 플러그인들을 한 번에 설치할 수 있어요. <code class=\"language-text\">lerna link convert</code> 이후에는 패키지의 로컬 디펜던시는 <code class=\"language-text\">add</code> 말고 <code class=\"language-text\">npm</code>을 사용해서 설치해야 정상 설치되는 모듈이 있습니다. 이유는 명확하지 않지만 <code class=\"language-text\">node_modules</code> 가 공유되면서 생기는 문제 같습니다. 이 부분은 시간 나면 확인해볼게요.(아시는 분은 연락 좀....) 어차피 모든 로컬 디펜던시들은 <code class=\"language-text\">link</code>를 사용해 루트로 보내버릴 것이기 때문에 일시적인 문제입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i -D @babel/preset-typescript</code></pre></div>\n<p>그리고 바벨 설정에도 추가해야겠죠? <code class=\"language-text\">packages/pgts/.babelrc</code> 파일에 프리셋을 추가합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"../.babelrc\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"@babel/preset-typescript\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 바벨이 타입스크립트를 트랜스파일을 할 수 있습니다. 한번 확인해볼까요? <code class=\"language-text\">packages/pgts/index.ts</code>를 아래와 같이 수정합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">tsTest</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">tsTest</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그리고 <code class=\"language-text\">npm run serve</code>로 서버를 띄웁니다. 콘솔 창에 3이란 숫자가 출력되면 성공이지만 애초에 바벨 설정이 잘못되었다면 서버를 띄울 때 에러가 나서 바로 알 수 있습니다.\nexport는 나중에 제스트로 테스트해보기 위해 미리 해둡니다.</p>\n<h3>tsconfig.json</h3>\n<p>바벨과 함게 타입스크립트를 사용할 수 있게 되었지만 아직 부족해요. 타입스크립트의 기능들을 온전하게 사용하려면 <code class=\"language-text\">tsconfig.json</code> 파일을 만들어 타입스크립트 설정을 해줘야 합니다.\n현재는 <code class=\"language-text\">packages/pgts/tsconfig.json</code> 을 하나만 만들어 줘도 되는 상황이지만 나중에 리액트도 타입스크립트를 같이 쓸 예정이기 때문에 <code class=\"language-text\">tsconfig.json</code>도 디폴트 설정을 만들고 확장하는 구조로 만들어 두겠습니다.</p>\n<p><code class=\"language-text\">packages/pgtsconfig.json</code> 을 파일을 추가합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"noEmit\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ESNext\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonJS\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"importHelpers\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"moduleResolution\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"experimentalDecorators\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"allowSyntheticDefaultImports\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"sourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"lib\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"esnext\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dom\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dom.iterable\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"types\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jest\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"downlevelIteration\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"exclude\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"node_modules\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"**/*.spec.ts\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>아마 특별한 수정 없이 그대로 써도 되는 설정일 겁니다. 사용하시다가 바꿔야 할 상황이 생기면 그때마다 조금씩 상황에 맞게 수정하시면 됩니다.</p>\n<p>그리고 <code class=\"language-text\">packages/pgtsconfig.json</code>을 확장하는 설정 파일 <code class=\"language-text\">packages/pgts/tsconfig.json</code>을 만듭니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"../tsconfig.json\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"@src/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"src/*\"</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"src/**/*.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"src/**/*.ts\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"src/**/*.tsx\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서도 <code class=\"language-text\">extends</code> 옵션을 사용해 설정을 확장했습니다.</p>\n<h3>ESLint for 타입스크립트</h3>\n<p>ESLint도 타입스크립트에 맞게 설정을 해야 정상적으로 정적 분석을 할 수 있습니다. 그래야 이 친구가 잔소리를 할 수 있죠.\n설정은 간단해요. 우선 필요한 디펜던시를 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i -D @typescript-eslint/parser @typescript-eslint/eslint-plugin</code></pre></div>\n<p>타입스크립트를 위한 파서와 플러그인을 설치하고 바로 <code class=\"language-text\">packages/pgts/.eslintrc.js</code> 파일을 수정합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  parser<span class=\"token operator\">:</span> <span class=\"token string\">'@typescript-eslint/parser'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'../.eslintrc'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'plugin:@typescript-eslint/recommended'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'@typescript-eslint'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n   parserOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    ecmaFeatures<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      impliedStrict<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    project<span class=\"token operator\">:</span> <span class=\"token string\">'./tsconfig.json'</span><span class=\"token punctuation\">,</span>\n    tsconfigRootDir<span class=\"token operator\">:</span> __dirname<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>아마 큰 문제 없이 동작할 겁니다. 확인하고 싶으신 분은 <code class=\"language-text\">index.ts</code> 파일에 약간의 장난질(?)을 한 다음 ESLint가 타입스크립트 경고를 주는지 확인해 보시면 될 것 같습니다.</p>\n<h3>제스트 for 타입스크립트</h3>\n<p>이번엔 제스트가 타입스크립트 코드도 테스트할 수 있도록 설정해볼게요. 이번에도 동일한 패턴입니다.  필요 디펜던시 설치! 그리고 설정!</p>\n<p>설치! <code class=\"language-text\">packages/pgts</code></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i -D ts-jest</code></pre></div>\n<p>설정! <code class=\"language-text\">packages/pgts/jest.config.js</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  preset<span class=\"token operator\">:</span> <span class=\"token string\">'ts-jest/presets/js-with-babel'</span><span class=\"token punctuation\">,</span>\n  moduleFileExtensions<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'json'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jsx'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ts'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'tsx'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'node'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d.ts'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  moduleNameMapper<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'^@src/(.*)$'</span><span class=\"token operator\">:</span> <span class=\"token string\">'&lt;rootDir>/src/$1'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  globals<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'ts-jest'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      babelConfig<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  watchPathIgnorePatterns<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'/node_modules/'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>제스트용 타입스크립트 프리셋을 사용하는 설정이고요. 프리셋중에서도 바벨을 사용하는 프리셋으로 설정했습니다.</p>\n<p>테스트 코드!  <code class=\"language-text\">packages/pgts/src/index.test.ts</code></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> tsTest <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./index'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tsTest'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'needs tests'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">tsTest</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>확인!</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> <span class=\"token function\">npm</span> <span class=\"token builtin class-name\">test</span>\n PASS  src/index.test.ts\n  tsTest\n    ✓ needs tests <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> ms<span class=\"token punctuation\">)</span></code></pre></div>\n<p>아마 특별한 문제 없이 정상적으로 테스트까지 완료하셨을 거에요. 하지만 <code class=\"language-text\">index.test.ts</code> 파일을 열어보시면 아마 <code class=\"language-text\">describe</code>와 <code class=\"language-text\">it</code> 함수 위치에서 타입스크립트 경고가 뜰 겁니다. 제스트 API를 타입스크립트가 몰라서 생기는 문제에요. 제스트 타입 파일도 설치해 주면 해결됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i -D @types/jest</code></pre></div>\n<p>이제 타입스크립트 환경의 설정은 모두 끝났습니다.</p>\n<h2>리액트(<a href=\"https://reactjs.org\">React</a>) 개발 환경 만들기</h2>\n<p>리액트 환경은 타입스크립트 환경 위에 만들 겁니다. 정확히는 자바스크립트 환경 위에 타입스크립트 환경 위에 리액트 개발 환경이네요. 한 단계 한 단계 쌓아가고 있습니다. 리액트 환경도 <code class=\"language-text\">pgjs</code>에서 <code class=\"language-text\">pgts</code>를 만들 때와 비슷해요. 우리가 사용하고 있는 환경들을 리액트에 맞게 조금씩 수정할 겁니다. 우선 패키지부터 추가하죠.</p>\n<h3><code class=\"language-text\">react</code> 패키지 추가하기</h3>\n<p>편의를 위해 이번에는 <code class=\"language-text\">lerna create</code> 를 사용하지 않고 패키지를 만들거에요. 그냥 복사하는 거죠.\n<code class=\"language-text\">pacakges/pgreact</code> 디렉도리를 만들고 <code class=\"language-text\">packages/pgts</code>의 <code class=\"language-text\">node_modules</code> 을 제외한 모든 내용을 그대로 복사해서 옮겨 올게요. <code class=\"language-text\">.babelrc</code> 같은 히든 파일들도 잊지말고 복사합니다.\n복사한 후에는 딱히 문제는 없지만 <code class=\"language-text\">packages.json</code> 의 <code class=\"language-text\">name</code> 도 <code class=\"language-text\">pgreact</code>로 바꿔줍니다.\n그리고 <code class=\"language-text\">npm i</code>로 디펜던시를 설치하고 서버도 띄워 보고 테스트도 돌려봅니다. 아마 문제 없이 잘 돌아갈거에요. 아직은 그냥  <code class=\"language-text\">pgts</code>와 동일하니까요.</p>\n<h3>리액트 설치 및 바벨 설정</h3>\n<p>리액트 개발 환경을 만들고 있으니 당연히 리액트를 설치해야 합니다. 그리고 <code class=\"language-text\">jsx</code>를 사용해야 하니 바벨도 리액트를 알 수 있도록 설정할거에요.\n우선 필요한 디펜던시들을 한꺼번에 설치하겠습니다.</p>\n<p><code class=\"language-text\">pacakges/pgreact</code> 에서 실행합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i -D react react-dom core-js @babel/preset-react</code></pre></div>\n<p>리액트는 설치만 하면 바로 사용할 수 있지만 <code class=\"language-text\">jsx</code>를 사용하려면 추가 작업을 해야 합니다. 브라우저는 <code class=\"language-text\">jsx</code>를 모르니까요. 바벨을 이용해 <code class=\"language-text\">jsx</code>를 올바른 자바스크립트 코드로 트랜스파일 할 수 있게 설정해볼게요. 디펜던시는 이미 설치했으니 설정만 하면 됩니다.</p>\n<p><code class=\"language-text\">.babelrc</code>의 <code class=\"language-text\">presets</code> 옵션 배열에 <code class=\"language-text\">@babel/preset-react</code>을 추가합니다. 리액트에 필요한 바벨 플러그인 들을 모아 놓은 프리셋을 사용하겠다는 뜻이에요.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"../.babelrc\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"@babel/preset-typescript\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"@babel/preset-react\"</span> <span class=\"token comment\">// 추가</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>자 이제 리액트를 써볼까요? <code class=\"language-text\">pacakges/src/index.ts</code> 파일의 확장자를 <code class=\"language-text\">tsx</code>로 바꾸고 이 파일에서 간단한 리액트 컴포넌트를 만들어볼게요.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Hello<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">FC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Hello World<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Hello <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>엔트리 포인트 파일의 확장자를 바꿨으니 <code class=\"language-text\">pacakges/react/webpack.config.js</code> 설정에서도 바꿔줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// …</span>\nconfig<span class=\"token punctuation\">.</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>'<span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>src<span class=\"token operator\">/</span>index<span class=\"token punctuation\">.</span>tsx’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ts를 tsx로 변경</span>\n<span class=\"token comment\">// …</span></code></pre></div>\n<p>자 이제 서버를 띄우면 될 것 같지만 아직 안돼요. 왜냐면 우린 웹팩을 통해 바벨을 연동하고 있는데 웹팩 바벨로더에 아직 <code class=\"language-text\">tsx</code>파일을 태우지 않았어요. 그 부분을 수정합니다. 이 내용은 <code class=\"language-text\">pacakges/webpack.config.base.js</code>에 있어요</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//…</span>\nmodule<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(ts|tsx|js|jsx)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 여기를 수정합니다.</span>\n          exclude<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">node_modules</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n          use<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            loader<span class=\"token operator\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">//…</span></code></pre></div>\n<p>그리고 한 가지 더 <code class=\"language-text\">packages/pgreact/tsconfig.json</code>에 <code class=\"language-text\">jsx</code>를 사용하겠다고 선언합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// …</span>\n<span class=\"token string\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> … <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"jsx\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react\"</span> <span class=\"token comment\">// 추가</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//…</span></code></pre></div>\n<p>이거 안 해줬다고 큰 문제가 생기는 건 아니지만 타입스크립트가 자꾸 경고해서 귀찮아요.</p>\n<p>자 이제 서버를 띄워 확인합니다. 헬로 월드가 나오죠? 안된다면 위쪽을 다시 한번 째려보세요.</p>\n<h3>ESLint for 리액트</h3>\n<p>기본적인 환경은 만들었으니 이제 ESLint 에게 우리의 리액트 코드들도 감시해달라고 할게요. 코드에서 발생할 수 있는 실수들을 대신 찾아주고 이런저런 잔소리를 해주기 때문에 리액트 개발할 때도 ESLint는 필수입니다. 우선 ESLint 플러그인들을 설치할게요.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i -D eslint-plugin-react eslint-plugin-react-hooks @types/react @types/react-dom</code></pre></div>\n<p>리액트 타입 선언과 리액트 훅 플러그인도 같이 설치했습니다. 여러분 이러니저러니 해도 훅을 사용하는 게 더 좋습니다. 익숙함의 차이라고 생각합니다. 플러그인 설치가 끝나면 설정에 플러그인을 추가합니다.</p>\n<p><code class=\"language-text\">pacakges/react/.eslintrc.js</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n   <span class=\"token comment\">//…,</span>\n   <span class=\"token string\">'plugin:react/recommended'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 추가</span>\n     <span class=\"token string\">'plugin:react-hooks/recommended'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 추가</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> \n   <span class=\"token comment\">// …,</span>\n   <span class=\"token string\">'react'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 추가</span>\n   <span class=\"token string\">'react-hooks'</span>  <span class=\"token comment\">// 추가</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  settings<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">// settings 추가</span>\n    react<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n     version<span class=\"token operator\">:</span> <span class=\"token string\">'detect'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// … </span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ESLint 설정은 이렇게 끝입니다. 정상적으로 설정이 되었는지 확인해볼까요? <code class=\"language-text\">index.tsx</code>의 <code class=\"language-text\">Hello</code> 컴포넌트에 훅을 사용하는 코드를 추가해볼게요. 아래와 같이 코드를 변경했을때 <code class=\"language-text\">react-hooks/exhaustive-deps</code> 경고가 뜬다면 정상 설정된 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Hello<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">FC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 여기서 경고가 납니다.</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>확인만 하고 다시 원복 해주세요.</p>\n<h3>제스트 for 리액트</h3>\n<p>제스트를 사용해서 E2E테스트도 할 수 있지만 여기서는 유닛테스트만 고려합니다. 이미 제스트는 설치했으니 바로 테스트 코드를 작성할 수 있습니다. 다만 테스트 편의를 위해 유틸성 도구를 추가하겠습니다. 이름 하야 테스팅 라이브러리(<a href=\"https://testing-library.com/\">testing-library</a>)입니다. 프론트 엔드의 테스트 코드를 작성할 때 사용할 수 있는 유용한 기능들을 갖고 있어 쉽고 빠르게 테스트 코드를 작성할 수 있게 해줍니다. 리액트뿐만 아니라 뷰, 앵귤러등의 다양한 프레임웍 그리고 DOM까지 지원합니다. 쓰지말아야 할 특별한 이유가 없다면 사용할 것을 권장합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i @testing-library/react</code></pre></div>\n<p>이미 제스트의 설정에 리액트까지 고려가 되어 있어서 따로 설정을 건드릴 필요가 없습니다.</p>\n<p>이제 <code class=\"language-text\">Hello</code> 컴포넌트를 위한 간단한 테스트 코드를 작성해볼게요.  현재는 <code class=\"language-text\">Hello</code> 컴포넌트가 엔트리 포인트 파일에 정의되어 있기 때문에 별도의 파일로 컴포넌트로 분리하는 작업부터 하겠습니다.</p>\n<p><code class=\"language-text\">packages/pgreact/src/hello.tsx</code></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Hello<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">FC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Hello World<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Hello<span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">index.tsx</code> 파일은 이제 분리된 <code class=\"language-text\">Hello</code> 컴포넌트를 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Hello <span class=\"token keyword\">from</span> <span class=\"token string\">'./hello'</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Hello <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">packages/pgreact/src/index.test.ts</code> 파일의 확장자를 <code class=\"language-text\">tsx</code>로 바꿔주세요. 그래야 <code class=\"language-text\">jsx</code>를 써도 타입스크립트가 경고하지 않아요. 그리고 간단하게 <code class=\"language-text\">Hello</code> 컴포넌트의 테스트 코드를 작성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@testing-library/react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> Hello <span class=\"token keyword\">from</span> <span class=\"token string\">'./hello'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Component test'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'needs tests'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> getByText <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Hello <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>nodeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token string\">'H1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>테스팅 라이브러리의 <code class=\"language-text\">render</code> 함수를 이용해 <code class=\"language-text\">Hello</code> 컴포넌트를 가상의 DOM으로 렌더링하고 <code class=\"language-text\">getByText</code> 함수로 현재 렌더링된 DOM 노드 중에 <code class=\"language-text\">Hello World</code>라는 텍스트를 갖고 있는 노드를 찾습니다. 그리고 찾은 노드가 <code class=\"language-text\">H1</code>이 맞는지를 검증합니다.</p>\n<p><code class=\"language-text\">Hello</code> 컴포넌트가 워낙 간단하고 로직이랄 게 없어서 이런 테스트 코드를 작성했지만 엘리먼트를 변경하는 로직이 없는 상황에서 노드의 이름을 확인하는 테스트 코드는 의미 없는 테스트를 하는 겁니다. <em>이런 단순 렌더링은 애초에 테스트가 필요도 없고 굳이 하겠다면 스냅샷을 사용해야 합니다.</em> 그리고 <strong>엘리먼트의 이름을 확인하는 것은 큰 의미가 없는 테스트 코드일 경우가 많습니다.</strong> 엘리먼트 구조는 바뀔 수도 있고 정말 노드 구조가 중요한지블라블라블라… 또 기승전테스트라 불필요한 사족은 줄이겠습니다.</p>\n<h3>스타일드 컴포넌트(<a href=\"https://styled-components.com\">styled-component</a>)</h3>\n<p>CSS를 자바스크립트 코드나 프레임웍 컴포넌트에 녹일려는 시도들은 정말 많습니다. 저도 몇 가지를 검토해봤었고 현재는 스타일드 컴포넌트에 정착했습니다. 이 정도 도구는 사실 언제든지 다른 것으로 교체할 수 있겠죠. 프로젝트마다 다른 시도를 해보는 것도 재미있을 것 같습니다. 아무튼 저는 최근까진 스타일드 컴포넌트를 사용해왔으니 리액트 환경의 마지막으로 스타일드 컴포넌트까지 설치하고 마무리하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i styled-components</code></pre></div>\n<p>스타일드 컴포넌트는 자바스크립트 문법하에 돌아가기 때문에 설치하면 바로 사용할 수 있어요. <code class=\"language-text\">index.tsx</code>를 수정해볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> styled <span class=\"token keyword\">from</span> <span class=\"token string\">'styled-components'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> Hello<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">FC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Title<span class=\"token operator\">></span>Hello World<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Title<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Title <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>h1<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  color: blue;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Hello <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">Title</code> 이라는 스타일드 컴포넌트를 추가해서 css로 색을 입혀봤습니다. 처음에 스타일드 컴포넌트를 적용하게 되면 기존 css와는 다른 작업 방식 때문에 당황하게 되는데요. <em>포괄적이지만 간단한 팁을 드리자면 스타일드 컴포넌트 하나하나를 css 클래스라고 생각하세요.</em> 그렇게 생각하면 구조를 잡을 때 조금은 도움이 되실 겁니다.</p>\n<h2><code class=\"language-text\">lerna convert link</code> 한번더</h2>\n<p><code class=\"language-text\">ts</code>와 <code class=\"language-text\">react</code>에도 중복된 디펜던시가 있으므로 이것들 역시 루트로 옮기고 루트의 <code class=\"language-text\">node_modules</code>에서 모두가 공유하도록 해야 합니다.</p>\n<p>초반에 했었죠? 커맨드 한 번이면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">npx lerna convert <span class=\"token function\">link</span></code></pre></div>\n<p>package.josn을 확인해보시면 리액트 환경에만 필요한 것만 남고 모두 루트로 이동한 것을 확인할 수 있습니다. 이제 프로토타입이나 실험적인 프로젝트를 몇 십 개씩 만들면서도 하드용량을 아낄 수 있습니다 :)</p>\n<h2>플레이그라운드의 활용</h2>\n<p>자 일단은 제가 필요한 환경 구성은 끝났습니다. 예전에는 개발 관련 유튜브 동영상을 보다가 거기에 나온 예제 코드를 실험해볼까? 하는 마음에 에디터를 열었다가도 필요한 환경을 구성하는 게 귀찮아서 에이 그냥 눈으로만 보자 이랬었는데 이제는 필요한 환경을 그대로 복사해서 새로운 이름만 주고 곧바로 편안한 에디터 환경에서 실험해볼 수 있게 되었어요. <em>예를 들어 필요한 환경이 리액트 환경이라면 <code class=\"language-text\">packages/mytest</code> 라는 디렉터리를 만들고 <code class=\"language-text\">packages/pgreact</code> 의 내용을 고대로 복사한 뒤 바로 실험할 코드들을 입력할 수 있게 되었죠.</em></p>\n<p>작업 중에 독립된 환경에서 실험해보고 싶은 내용이나 프로토타입등도 동일한 방식으로 하고 있고 간단한 테스트 뿐 아니라 조금 진지한 프로젝트도 프로토타이핑은 여기서 시작합니다. 저는 <em>프로젝트별로 디렉터리를 만들고 환경을 복사한 다음 깃 브랜치를 별도로 만들어서 관리합니다.</em> 이러면 main 브랜치는 깔끔하게 환경 패키지들만 유지할 수 있습니다.</p>\n<p>또 하나 해볼 만한 작업은 <code class=\"language-text\">lerna.json</code>의 <code class=\"language-text\">packages</code> 옵션은 배열로 여러 개를 지정할 수 있는데요. 여기에 예를 들어 <code class=\"language-text\">apps/*</code> 같은 경로를 추가해서 환경 설정만 해둔 패키지들과 그 환경을 이용해 실험하는 프로젝트의 위치를 분리하면 관리하기 더 수월할 것 같아요. 기본 환경 설정들의 경로 수정으로 내용이 쓸데없이 길어질 것 같아서 이 글에서는 다루지 않지만 공유하는 리포에는 조만간 적용해 두겠습니다.</p>\n<p>한 가지 아쉬운 건 Export 같이 프로젝트 하나를 독립시킬 수 있는 기능이 필요한데 그걸 구현하려니 해야 할 작업이 참 많네요. 그런 상황에서는 아직 한 땀 한 땀 옮겨야해요.</p>\n<h2>또 다른 활용</h2>\n<p>오픈소스나 라이브러리를 개발하는 개발자라면 작업 내용을 배포전에 다양한 지원 환경에서 적어도 한 번 이상 테스트하게 됩니다. 오픈소스 라이브러리 같은 경우 바닐라 자바스크립트는 당연한 것이고 ESM 그리고 타입스크립트에서도 명확한 타입과 함께 잘 돌아가야 하죠. <em>거기에 리액트, 뷰(Vue), 앵귤러(Angular)와 같은 프레임웍 컴포넌트까지 지원된다면 테스트해야 할 사용 환경이 힘겨울 정도로 많아집니다.</em> 이럴 때 각 환경을 플레이그라운드에서 미리 구성해 놓고 그때그때마다 바로 꺼내서 테스트한다면 각 환경들을 관리하기도 수월하고 테스트 자체도 훨씬 편해지겠죠? 제가 이렇게도 사용하고 있습니다. <strong>심지어 아직 NPM에 배포되지 않은 모듈도 러나의  <code class=\"language-text\">bootstrap</code> 으로 로컬 모듈을 마치 배포한 모듈인 양 디펜던시로 사용하며 테스트 해볼 수 있죠.</strong> 이게 러나의 강점이기도 하구요.</p>\n<h2>마무리 그리고 빠진 한가지</h2>\n<p>자 여기까지 해서 언제든지 쉽게 간이 프로젝트를 추가할 수 있는 플레이그라운드를 만들었어요.</p>\n<p><strong>사실 애초의 계획과는 다르게 한 가지 스택이 빠졌어요. 바로 스토리북이죠.</strong> 환경별로 스토리북으로 프로젝트를 관리한다면 필요할 때마다 스토리를 추가해 독립적인 실험을 해볼 수 있겠죠? 겔러리 형태의 UI도 제공되기 때문에 관리도 쉽고요. 스토리북이 있다면 필요한 환경이 있을 때 디렉터리를 복사할 필요가 없어요. 디렉터리를 복사하는 방법은 스토리북이 빠진 것을 메꾸는 어쩔 수 없는 임시방편이에요. 처음에 구상했던 플레이그라운드는 스토리북에서 완성이 되는 모습이었습니다. <em>스토리북이 빠진 이유는 스토리북이 아직 웹팩5를 지원하지 않기 때문이에요.</em> 제외할 수밖에 없었습니다. 웹팩5는 현재 서드파티의 마이그레이션 문제로 많은 어려움을 겪고 있습니다. <em>언젠간 스토리북이 웹팩5를 지원하게 되면 그때 파트 3를 작성해 마무리를 짓겠습니다.</em> 당분간은 디렉터리 복사에 의존해야네요.</p>\n<p>아무튼 플레이그라운드를 빌미로 요즘 FE 개발 환경 중 필수적인 것들은 하나씩 건드려 봤어요. 개발하는 프로젝트에 따라 추가해야 할 도구들은 많을 테지만 그래도 대부분 이 환경 위에 하나씩 올라갈 겁니다. 든든한 버팀목 같은 도구들이죠.</p>\n<p>내년엔 바뀌거나 추가될 가능성도 있겠네요. 현재 몇 가지 도구들이 물망에 오르고 있습니다.  내년은 또 내년에 기회 되면 소개하도록 하겠습니다.</p>\n<p>완성된 해처리의 리포는 <a href=\"https://github.com/shiren/hatchery\">여기</a>입니다.</p>","fields":{"slug":"/2021-02-22/"},"excerpt":"파트 1에서는 기본 자바스크립트 개발 환경을 러나와 함께 구축해봤어요. 기본 환경만으로 충분하신 분들도 계시겠지만 보통은 그렇지 않을 겁니다.\n이제 두 가지 개발 환경을 추가할 건데요. 타입 스크립트와 리액트 개발 환경이에요. 우선 타입스크립트 환경을부터 추가할 거예요. 그전에 러나로 해줘야 할 작업이 있습니다. 타입스크립트 환경도 결국 지금까지 저희가 구축한 자바스크립트 환경 위에 만들어질 것이기 때문에 디펜던시 모듈을 공유할 수 있도록 만들고 환경 설정 파일들도 기본 자바스크립트의 환경설정 파일들을 확장해서 사용할 거예요. 그…","frontmatter":{"title":"코딩 플레이그라운드 만들며 맛보는 요즘 FE 개발 환경 Part 2","date":"22 February, 2021","categories":"frontend, nodejs, tdd"}},"recomendPost":{"nodes":[{"fields":{"slug":"/2021-02-15/"},"frontmatter":{"title":"코딩 플레이그라운드 만들며 맛보는 요즘 FE 개발 환경 Part 1","categories":"frontend, nodejs, tdd","date":"15 February, 2021"},"excerpt":"개발을 하다 보면 특정 환경에서 빠르게 코드를 작성하고 그 결과를 확인해보고 싶을 때가 있어요. 라이브러리나 프레임웍 혹은 언어를 공부할 때나 아이디어를 빠르게 실험하거나 프로토타입 해보고 싶을 때 그렇지요. 바닐라 자바스크립트로 충분한 환경이라면 디렉터리 하나 만들고 js 파일 하나 html 파일 하나 만들어서 에디터를 열고 브라우저를 열어서 html 파일을 불러오는 것까지 하면 기본적인 준비가 끝나요. 근데요. 이런 바닐라 자바스크립트 환경을 만드는 것조차도 사실 귀찮을 때가 있어요. 이런 기본 환경도 귀찮은데 실무의 복잡한 …"},{"fields":{"slug":"/2020-12-01/"},"frontmatter":{"title":"browserslist 쾌속 가이드","categories":"frontend, nodejs","date":"01 December, 2020"},"excerpt":"언젠가부터 브라우저스리스트(browserslist)라는 것이 자주 눈에 띄더니 지금은 FE 개발 환경에서 뺄 수 없는 도구가 되었어요. 아마도 바벨(Babel)이라는 FE 계의 걸출한 스타 프로젝트에서 도입했기 때문일 거라고 생각합니다. 바벨을 사용하는 프로젝트들이 많다 보니 간접적으로 혹은 직접적으로 브라우저스리스트까지 사용하게 되는 것이죠. 사실 좋아요 좋은 도구라고 생각합니다. 아마 브라우저 환경을 정의하는 표준처럼 당분간 사용될 것 같아요. 보통 공식 사이트에서 자세히 알 수 있는 내용들은 글을 따로 안 쓰려고 하는 편인데…"},{"fields":{"slug":"/2020-06-15-유용한테스트케이스를위한개발자의자세/"},"frontmatter":{"title":"유용한 테스트 케이스를 위한 개발자의 자세","categories":"test, tdd","date":"15 June, 2020"},"excerpt":"각종 커뮤니티에 주기적으로 등장하는 \"private 메서드를 테스트하려면 어떻게 하나요?\" 혹은 \"private 메서드를 테스트해야 하나요?\" 와 같은 질문을 보면서 언젠가는 관련해서 정리해봐야겠다고 생각했었는데 꽤 시간이 흘러 이 내용으로 글을 써본다. 주제 자체는 간단한 편이지만 사람마다 생각이 다른 것 같다. 특히 해외 개발자들의 의견이 분분한 것 같다. 사실 이 문제는 효과적인 테스트 케이스(이하 TC)란 무엇인가란 질문과 비슷하다. private 메서드는 객체지향적인 관점에서 생각한 것이고 노출된 함수 내부에서 접근하는,…"},{"fields":{"slug":"/2017-04-10-웹어셈블리 바로 사용 해보기/"},"frontmatter":{"title":"웹어셈블리 바로 사용 해보기","categories":"frontend, translation","date":"10 April, 2017"},"excerpt":"원글: https://tutorials.technology/tutorials/11-webassembly-initial-steps-tutorial.html 소개 웹어셈블리는 미래에 매우 유용하게 사용될 새롭고도 새로운 표준이다. 이 기술은 W3C 커뮤니티 그룹에서 애플, 구글 , 마이크로소프트 그리고 모질라와 함께 개발되고 있다. 이 프로젝트의 초기 시점인 지금은 고 수준의 언어가 아닌 C/C++로 초점이 맞춰져 있고 웹어셈블리의 약어는 wasm 이며 자바스크립트와 브라우저의 개선 사항 중 하나이다. 웹어셈블리는 자바스크립트를 대체…"}]},"recentPost":{"nodes":[{"fields":{"slug":"/2021-04-20/"},"frontmatter":{"title":"욕 안 먹는 개발자되기","categories":"developer","date":"20 April, 2021"},"excerpt":"직장인이라면 자연스럽게 업무를 대하는 태도가 캐릭터 처럼 만들어져요. 개발자도 마찬가지고요. 신입이라고 태도가 항상 나쁜 것도 아니고 경력이라고 항상 태도가 좋은 것도 아니에요. 코딩 스킬처럼 개선될 수도 있고요. 연차가 적을수록 몰라서 잘못된 태도를 갖는 경우가 많습니다. 이렇게 만들어진 태도는 보통 연차가 높을수록 개선되기 힘들다고들 하죠. 태도라는 큰 추상적인 덩어리는 억울하게도 한 부분, 한 사건에 의해 모든 것을 퉁쳐서 판단되기도 하죠. 이런 태도의 중요한 한 부분은 업무 중 문제가 발생했을 때에 뚜렷하게 나타난다고 생각…"},{"fields":{"slug":"/2021-02-22/"},"frontmatter":{"title":"코딩 플레이그라운드 만들며 맛보는 요즘 FE 개발 환경 Part 2","categories":"frontend, nodejs, tdd","date":"22 February, 2021"},"excerpt":"파트 1에서는 기본 자바스크립트 개발 환경을 러나와 함께 구축해봤어요. 기본 환경만으로 충분하신 분들도 계시겠지만 보통은 그렇지 않을 겁니다.\n이제 두 가지 개발 환경을 추가할 건데요. 타입 스크립트와 리액트 개발 환경이에요. 우선 타입스크립트 환경을부터 추가할 거예요. 그전에 러나로 해줘야 할 작업이 있습니다. 타입스크립트 환경도 결국 지금까지 저희가 구축한 자바스크립트 환경 위에 만들어질 것이기 때문에 디펜던시 모듈을 공유할 수 있도록 만들고 환경 설정 파일들도 기본 자바스크립트의 환경설정 파일들을 확장해서 사용할 거예요. 그…"},{"fields":{"slug":"/2021-02-15/"},"frontmatter":{"title":"코딩 플레이그라운드 만들며 맛보는 요즘 FE 개발 환경 Part 1","categories":"frontend, nodejs, tdd","date":"15 February, 2021"},"excerpt":"개발을 하다 보면 특정 환경에서 빠르게 코드를 작성하고 그 결과를 확인해보고 싶을 때가 있어요. 라이브러리나 프레임웍 혹은 언어를 공부할 때나 아이디어를 빠르게 실험하거나 프로토타입 해보고 싶을 때 그렇지요. 바닐라 자바스크립트로 충분한 환경이라면 디렉터리 하나 만들고 js 파일 하나 html 파일 하나 만들어서 에디터를 열고 브라우저를 열어서 html 파일을 불러오는 것까지 하면 기본적인 준비가 끝나요. 근데요. 이런 바닐라 자바스크립트 환경을 만드는 것조차도 사실 귀찮을 때가 있어요. 이런 기본 환경도 귀찮은데 실무의 복잡한 …"},{"fields":{"slug":"/2020-12-01/"},"frontmatter":{"title":"browserslist 쾌속 가이드","categories":"frontend, nodejs","date":"01 December, 2020"},"excerpt":"언젠가부터 브라우저스리스트(browserslist)라는 것이 자주 눈에 띄더니 지금은 FE 개발 환경에서 뺄 수 없는 도구가 되었어요. 아마도 바벨(Babel)이라는 FE 계의 걸출한 스타 프로젝트에서 도입했기 때문일 거라고 생각합니다. 바벨을 사용하는 프로젝트들이 많다 보니 간접적으로 혹은 직접적으로 브라우저스리스트까지 사용하게 되는 것이죠. 사실 좋아요 좋은 도구라고 생각합니다. 아마 브라우저 환경을 정의하는 표준처럼 당분간 사용될 것 같아요. 보통 공식 사이트에서 자세히 알 수 있는 내용들은 글을 따로 안 쓰려고 하는 편인데…"},{"fields":{"slug":"/2020-11-23/"},"frontmatter":{"title":"누구나 원하는 개발자되기","categories":"recruit","date":"23 November, 2020"},"excerpt":"5~6년 차 즈음부터 개발자 채용에 조금씩 관여하기 시작했고 현 회사에서는 면접관으로 활동한지 5년이 넘은 것 같다. 면접은 1차 면접에 해당하는 기술 면접이었고 팀의 채용 프로세스를 개선하거나 사전과제, 라이브 코딩 문제 출제에 주도적으로 참여했다. 그간 다양한 개발자들을 만났고 운 좋게도 좋은 개발자들을 많이 채용할 수 있었다. 채용 과정에서 좋은 개발자도 만났지만 그렇지 못했던 개발자도 많았고, 아쉬웠던 개발자도 있었다. 아쉬웠던 개발자들은 노력을 하고 있지만 “어느 정도”로 “어떤 방향”으로 해야 하는지 모르는 경우였고 채…"},{"fields":{"slug":"/2020-10-05/"},"frontmatter":{"title":"독서 습관을 만드는 구체적인 방법","categories":"motivation, life","date":"05 October, 2020"},"excerpt":"독서를 습관으로 만들기 위해 그간 많은 노력을 했었다. 습관적으로 SNS를 열면서 “이럴 시간에 책을 읽었으면…” 하고 자주 생각했지만 SNS 아이콘을 터치하는 유혹을 뿌리치기 힘들었다. 여러 가지 시도를 했고  “하루 25분 실행하기: 하루를 대하는 14년차 개발자의 자세” 에서 밝혔다시피 아직 다독가에 비하면 보잘것없지만 그래도 나름 습관 만들기에는 성공한 것 같다. 독서 습관을 만들면서 알게 된 몇가지 좋은 팁을 공유한다. 읽기 속도 측정하기 독서 습관을 만들 때 제일 중요한 것은 책 읽는 속도를 파악하는 것이라고 생각한다.…"}]}},"pageContext":{"slug":"/2021-02-22/","categoriesRegex":"/frontend|nodejs|tdd/g"}},"staticQueryHashes":["1529427419","1755485493","2738229898","993531770"]}