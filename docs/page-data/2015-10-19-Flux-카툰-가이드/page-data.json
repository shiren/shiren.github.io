{"componentChunkName":"component---src-templates-post-tsx","path":"/2015-10-19-Flux-카툰-가이드/","result":{"data":{"markdownRemark":{"html":"<h3>Flux 카툰가이드</h3>\n<blockquote>\n<p>원문<br>\n<a href=\"https://code-cartoons.com/a-cartoon-guide-to-flux-6157355ab207#.9nbhrj3of\">https://code-cartoons.com/a-cartoon-guide-to-flux-6157355ab207#.9nbhrj3of</a></p>\n</blockquote>\n<h1>Flux 카툰가이드</h1>\n<p>플럭스는 현재 웹개발에 대한 토픽들중에 가장 유명하지만 이것을 이해하고 있는 사람은 매우 적다.\n본 가이드는 모두가 이해할 수 있도록 도움을 주려 작성되었다.</p>\n<br>\n<h2>문제</h2>\n<p>첫번째로 플럭스가 해결하는 기초적인 문제부터 설명하려고 한다. 플럭스는 어플리케이션에서 데이터를 다루는 패턴으로 리액트와 함께 페이스북에서 성장해왔다. 각각 독립적으로 사용이 가능하지만 많은 사람들이 둘을 함께 사용한다. 플럭스와 리액트는 페이스북에서 보여졌던 몇가지 문제점들을 해결하기위해 개발되었다.</p>\n<p>가장 잘 알려진 그 문제들중 하나는 노티피케이션 버그이다. 페이스북에 로그인을 하게 되면 메세지 아이콘 위에 노티피케이션 카운트를 볼수있다.메세지 아이콘을 클릭해도 새로운 메세지는 없을것이다. 그후 노티피케이션은 사라진다. 사이트안에서 인터렉션이 조금 이루어지고 얼마 지나지 않아 다시 노티피케이션이 나타나게 된다.\n다시 메세지 아이콘을 클릭하면 그대로 메세지는 없고 이런 현상이 반복해서 일어난다.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/600/1*EfeNEshl8-uwZSuUw275Ag.png\" alt=\"이미지1\"></p>\n<p>이런 사이클은 사이트를 이용하는 유저한테만 발생하지 않았다. 페이스북 개발팀에서도 반복되는 사이클이 있었는데 그들이 이 버그를 고치면 잠시동안 모든게 괜찮아 보였다가도 또 다시 버그가 발생하였다. 이슈가 해결되고 다시 발생하기를 반복했다.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/600/1*4xc1FzIHWiyAvb1iAQKSqQ.png\" alt=\"이미지2\"></p>\n<p>페이스북은 이 사이클에서 벗어날 방법을 찾기 시작했다. 그들은 그냥 한번만 고치는것을 원하지 않았고 시스템을 예측 가능하게 만들어 이런류의 문제가 새로운 형태로 다시 나타나지 않길 원했다.</p>\n<br>\n<h2>잠재적인 문제</h2>\n<p>페이스북팀이 찾은 잠재적인 문제는 어플리케이션안에서 데이터가 흐르는 방법이었다.</p>\n<p>note: 이것은 내가 대화를 통해 얻어는 정보로 간단하게 구현한 것이다. 실제 아키텍처는 다를것이다.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/600/1*OcTeAqv8AU_z-O2HuucmeA.png\" alt=\"Models pass data to the view layer\"></p>\n<p>데이터를 들고 있어 뷰레이어에 데이터를 전달해 데이터를 그리도록 하는 모델들이 있다.\n유저 인터렉션은 뷰를 통해서 일어나게 되기 때문에 뷰는 유저의 입력에 따라 모델을 업데이트해야 될때도 있다. 그리고 모델 역시 다른 모델을 업데이트 하기도 한다.</p>\n<p>게다가, 가끔 이런 액션들은 연쇄적으로 변화를 일으키게 된다.\n나는 이것을 흥미진진한 퐁 게임으로 상상했다.(공이 어디로 튈지 알기가 참 힘들다)</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/600/1*7myoHOaUyFEmPC-dj61CKw.png\" alt=\"Views update models. Models update other models. This starts to look like a really edge-of-your-seat game of Pong.\"></p>\n<p>심지어 이런 변화들은 비동기 적으로 일어날 수도 있다. 한가지의 변화가 여러개의 다른 변화를 발생시킬 수 있다. 나는 퐁 게임안에서 한꺼번에 던저져 여기저기 날라다니며 교차하는 핑퐁 공들로 상상해 봤다.\n이런 상황에서는 데이터 플로우를 디버깅하기 힘들것이다.</p>\n<br>\n<h2>해결책: 단방향 데이터 흐름</h2>\n<p>그래서 페이스북은 다른 종류의 아키텍처를 시도했다. 데이터를 한 방향으로만 흐르게 해서 만약 새로운 데이터를 추가해야 한다면 제일 처음부터 데이터가 다시 흘러가게 하는 것이다. 이런 아키텍처를 플럭스라고 이름지었다.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*lZM0yU9ExEMd7DggVxXkxA.png\" alt=\"The diagram you’ll find in Facebook’s Flux docs. It is way cooler than it looks.\"></p>\n<p>위의 다이어그램 만으로는 알수 없겠지만 사실 이건 매우 쿨한것이다.</p>\n<p>플럭스를 이해하게 되면 이 다이어그램은 꽤 명확해질것이다. 완전히 플럭스에 대해 처음 접하게 되는 사람들에겐 이 다이어그램이 플럭스를 이해하는데 도움을 줄거라고 생각하지 않는다. 다이어그램은 상세한 것들을 알아가기전에 시스템의 큰 그림을 이해하는데 도움을 줄뿐이다.</p>\n<p>내가 플럭스를 잘 이해하다록 도와준것도 이런류의 다이어그램이 아니라\n각각 다른 캐릭터들이 목표를 이루기위해 팀으로 일을 하고 있다고 상상해 보는 것이었다.\n그래서 내 머리속에 가지고 있는 각 캐릭터들을 설명해주고자 한다.</p>\n<br>\n<h2>캐릭터들을 만나다</h2>\n<p>캐릭터들이 어떻게 서로 상호작용 하는지 알려주기 전에 각 캐릭터 소개를 먼저 하겠다.</p>\n<h3>액션 크리에이터(The action creator)</h3>\n<p>첫번째 캐릭터는 액션 크리에이터이다. 모든 변화와 인터렉션이 거쳐가는 통로의 시작이 되는 액션을 만드는 일을 담당한다. 앱의 스테이트를 변경하거나 뷰를 다르게 그리려면 액션을 만들어야 한다.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/600/1*DATbW4s4Ls6UPieavtdB7w.png\" alt=\"The action creator is like a telegraph operator. It formats your message for you.\"></p>\n<p>액션 크리에이터는 일종의 telegraph operator이다. 액션 크리에이터로 하여금 기본적으로 어떤 메세지를 보내야 하는지를 알게하면 액션 크레이이터가 다른 시스템이 이해 할수 있는 방법으로 형식을 맞춘다.</p>\n<p>액션 크리에이터는 타입과 페이로드(전달될 데이터)로 액션을 만든다. 타입은 시스템안에서 미리 정의된 액션(보통 상수 리스트로 정의)의 종류 인데 예를들면 MESSAGE<em>CREATE이나 MESSAGE</em>READ와 같은것 들이다.</p>\n<p>시스템에서 가능한 모든 액션을 따로 모아서 관리하는 것은 추가적인 이점도 있다.\n새로운 개발자가 프로젝트에 참여하게 되었을때 액션 크리에이터 파일들을 열어서 시스템이 제공하는 모든 API(모든 가능한 스테이트 변화들)를 볼 수 있다.</p>\n<p>액션 메세지가 만들어지게 되면 액션 크리에이터는 그 액션을 디스패처에게 전달한다.</p>\n<h3>디스패처(The dispatcher)</h3>\n<p>디스패처는 간단히 말해 거대한 콜백 등록기이다. 일종의 전화 교환기 앞의 전화 교환수와 같다. 액션을 전달되어야 하는 스토어의 목록을 가지고 있으며 액션 크리에이터가 액션을 보내오면 액션을 각각의 스토어들에게 전달한다.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/600/1*R5XHVGZfkPkmL7BcN5jMqg.png\" alt=\"The dispatcher is like a switchboard operator. It knows all the callbacks for the different stores.\"></p>\n<p>이런 작업은 동기로 이루어지는데 아까 말했던 멀티 볼 퐁 게임 효과 같은데 도움이 된다.\n만약 스토어간에 디펜던시가 있어 업데이트가 되기전에 먼저 업데이트가 되어야 하는 관계가 있다면\n디스패처의 waitFor()를 이용하면된다.</p>\n<p>플럭스의 디스패처는 다른 많은 아키텍처에서 볼수있는 디스패처와 다르다. 액션이 모든 등록된 스토어들에게 액션 타입에 상관없이 전달 된다. 이 말은 스토어가 특정 액션만을 subcribe 하고 있는게 아니라는 뜻이다.\n우선 모든 종류의 액션을 감지 하고있다가 관심을 갖는 액션에만 반응을 하는것이다.</p>\n<h3>스토어(The store)</h3>\n<p>다음은 스토어다. 스토어는 어플리케이션의 모든 스테이트를 가지고 있고 모든 스테이트는 스토어안에서 실시간으로 로직을 변경 한다.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/600/1*17MbK8jz94ynP-NFfL0rfw.png\" alt=\"The store is an over-controlling bureaucrat. All changes must go through it.\"></p>\n<p>나는 스토어를 독단적인 관리자라고 생각했다. 모든 스테이트의 변화는 스토어에 의해 독자적으로 만들어져야한다. 그리고 직접적으로 스테이트를 변경하도록 요청할 수도 없다.\n스토어에는 세터(setter)들이 없으며 스테이트를 변경하도록 요청하려면 정확한 절차를 따라야한다.\n액션 크리에이터 디스패처 파이프라인을 통해 액션을 전달해야 한다.</p>\n<p>위에서 언급한대로 스토어가 디스패처에 등록이 되어지면 모든 액션이 스토어로 전달된다.\n스토어 안에는 보통 액션을 확인해 스토어가 관심 갖는 액션인지 아닌지를 결정하는 스위치문이 있다.\n스토어가 관심을 갖고있는 액션이라면 해당 액션이 어떤 변화를 주어야하는지를 확인하고 스테이트를 업데이트 한다.</p>\n<p>스토어가 스테이트에 변화를 주게되면 change이벤트를 발생하게 되고 컨트롤려 뷰에게 스테이트가 변경되었다고 알려준다.</p>\n<h3>컨트롤러뷰와 뷰(The controller view and view)</h3>\n<p>뷰들은 스테이트를 전달 받아 화면에 그려 유저들에게 보여주고 유저의 입력을 받는 역할을 한다.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/600/1*MY5xNk_JeKvGsGdywYD4EA.png\" alt=\"The controller view is like a middle manager who gets notifications from the store and passes the data onto the views under it. The view presents that data to the user.\"></p>\n<p>뷰는 프리젠터이다. 애플리케이션에서 벌어지는 일들은 어떠한것도 알지 못하고 오로지 다뤄야할 데이터에만 관심이 있고 이것을 사람들이 이해할 수 있는 형태로 보여주는 방법을 알고있다.(HTML을 통해)</p>\n<p>컨트롤러뷰는 스토어와 뷰사이의 중간 관리자와 같다. 스테이트가 변경되면 스토어는 컨트롤러뷰에게 알려주고 컨트롤러뷰는 새로운 스테이트를 수집해 업데이트된 스테이트를 관련된 뷰들에게 전달하는 역할을 한다.</p>\n<br >\n<h2>그들이 협업하는 방법</h2>\n<h3>셋업</h3>\n<p>어플리케이션을 초기화하는 셋업작업을한다.(이 작업은 단한번만 이루어진다.)</p>\n<ol>\n<li>대스패처에게 액션이 들어올때 마다 스토어들에게 알려주게 한다.</li>\n</ol>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*GHrusKRFhQ0Y6rrwjqI6QQ.png\"></p>\n<ol start=\"2\">\n<li>그리고 컨트롤러뷰가 스토어에게 최근 스테이트를 요청한다.</li>\n<li>스토어가 컨트롤러뷰에게 스테이트를 전달하면 각 차일트 뷰들에게 전달해 화면에 그리도록 한다.</li>\n</ol>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*66hoDpUhczSXrgH2cUUasw.png\"></p>\n<ol start=\"4\">\n<li>그리고 컨트롤러뷰는 스토어에게 스테이트가 변경되면 계속 알려달라고 요청한다.</li>\n</ol>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*tV7VN0RjpFfwaf1PK3chIA.png\"></p>\n<h3>데이터 흐름</h3>\n<p>셋업이 끝나면 어플리케이션은 유저의 입력을 받을준비가 된것이고 유저가 무언가 변경을 하면 액션을 발생 시킨다.</p>\n<p>유저 인터렉션과 함께 데이터 플로우가 시작 될것이다.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*SusQ7Aip2fSWg6raQtPSnA.png\"></p>\n<ol>\n<li>뷰는 액션 크리에이터에게 액션을 준비하라고 말해준다.</li>\n</ol>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*dkm9qsWuD9DtXzH-u-DjJQ.png\"></p>\n<ol start=\"2\">\n<li>액션 크리에이터가 액션을 구성하고 디스패처에게 보낸다.</li>\n</ol>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*fJwvtpq0XQhB4mUZwh7YOQ.png\"></p>\n<ol start=\"3\">\n<li>디스패처는 스토어에게 순서에 맞춰 액션을 전달한다. 각 스토어는 모든 액션을 전달 받고 스토어가 관심 갖고 있는 액션을 받게 되면 스테이트를 알맞게 바꾼다.</li>\n</ol>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*RLrImTDeArSMoA4kZsajLQ.png\"></p>\n<ol start=\"4\">\n<li>스테이트가 변경이 되면 스토어는 자신을 subscribe하고 있는 뷰 컨트롤러에게 알려준다.</li>\n<li>뷰 컨트롤러는 스토어에게 업데이트된 스테이트를 요청한다.</li>\n</ol>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*5SXO2eftdQveFqImGDVB9A.png\"></p>\n<ol start=\"6\">\n<li>스토어에게 스토어를 전달받은 뷰 컨트롤러는 차일드 뷰들에게 알려줘 새로운 스테이트에 맞게 다시 그리라고 알려준다.</li>\n</ol>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*fWBaUg9-_1-V5M2YQBWhWg.png\"></p>\n<p>이것이 내가 생각하는 플럭스이다. 도움이 되었길 바란다.</p>","fields":{"slug":"/2015-10-19-Flux 카툰 가이드/"},"excerpt":"Flux 카툰가이드 원문\nhttps://code-cartoons.com/a-cartoon-guide-to-flux-6157355ab207#.9nbhrj3of Flux 카툰가이드 플럭스는 현재 웹개발에 대한 토픽들중에 가장 유명하지만 이것을 이해하고 있는 사람은 매우 적다.\n본 가이드는 모두가 이해할 수 있도록 도움을 주려 작성되었다. 문제 첫번째로 플럭스가 해결하는 기초적인 문제부터 설명하려고 한다. 플럭스는 어플리케이션에서 데이터를 다루는 패턴으로 리액트와 함께 페이스북에서 성장해왔다. 각각 독립적으로 사용이 가능하지만 많은 사…","frontmatter":{"title":"Flux 카툰 가이드","date":"19 October, 2015","categories":"frontend, architecture, translation"}},"recomendPost":{"nodes":[{"fields":{"slug":"/2019-05-22-크롬 네이티브 레이지 로딩/"},"frontmatter":{"title":"크롬 네이티브 레이지 로딩","categories":"frontend, tool","date":"22 May, 2019"},"excerpt":"레이지 로딩이란? 좋은 기회로 2019년 구글I/O에 참석했다. 웹 기술 세션 중에는 크게 눈에 띄는 세션은 없었지만, 일부 세션에서 소개된 웹과 관련 기술 몇 가지는 흥미로웠다. Native Lazy Loading, Portals, Duplex, Rich Results 정도가 나의 관심을 끌었다. 그중 키노트에서 시작해 몇 개의 세션에서 두루두루 언급한 네이티브 레이지 로딩이 제일 기대됐다. 관련 세션 레이지 로딩, 특히 이미지 레이지 로딩은 새로운 기술은 아니다. 기존 브라우저는 웹페이지를 불러올 때 초기부터 전체 영역에 해당…"},{"fields":{"slug":"/2018-10-24-reduce()를 이용해 순차적으로 프로미스를 해결하는 방법/"},"frontmatter":{"title":"reduce() 를 이용해 순차적으로 프라미스를 해결하는 방법","categories":"javascript, translation","date":"24 October, 2018"},"excerpt":"원글: Why Using reduce() to Sequentially Resolve Promises Works https://css-tricks.com/why-using-reduce-to-sequentially-resolve-promises-works/ reduce() 를 이용해 순차적으로 프라미스를 해결하는 방법  객체를 사용하지 않고 비동기 자바스크립트 코드를 작성하는 것은 눈을 감고 케이크를 굽는 것 만큼 어렵다. 물론 할 수 있지만 복잡해질 것이고 결국 화딱지가 나서 못 해먹을 것이다. 꼭 필요하다고 말할 순 없지만 일단 …"},{"fields":{"slug":"/2018-07-10-요즘 잘나가는 프론트엔드 개발환경 만들기(2018) ES6/"},"frontmatter":{"title":"요즘 잘나가는 프론트엔드 개발환경 만들기(2018): ES6","categories":"frontend, javascript","date":"10 July, 2018"},"excerpt":"요즘 잘나가는 프론트엔드 개발환경 만들기(2018): ES6 본 시리즈의  이전 아티클에서는 웹팩4에 대해 다루면서 바로 쓸 수 있는 환경을 만들어봤다. 이번편에는 그 환경 그대로 이용해 ES6 개발 환경을 추가한다. ES6는 이제 충분히 써도 될만한 시기라고 생각한다. \"나는 프런트 개발자가 아니기도 하고 브라우저가 모두 지원하지도 않기에 ES6는 아직 못쓴다\" 라고 생각하고 있다면 이 글을 통해 생각을 바꿀 수 있길 바란다. 어차피 쓰는 거 ES6뿐 아니라 ES8까지 사용하는 것을 권장한다. IE11 이하 버전들은 ES6나 이…"},{"fields":{"slug":"/2018-04-16-요즘 잘나가는 프론트엔드 개발 환경 만들기(2018) Webpack 4/"},"frontmatter":{"title":"요즘 잘나가는 프론트엔드 개발 환경 만들기(2018): Webpack 4","categories":"frontend, javascript","date":"16 April, 2018"},"excerpt":"요즘 잘나가는 프론트엔드 개발 환경 만들기(2018): Webpack 4 최근에 새로운 프로젝트를 진행하게 되면서 기존에 간만 살짝 보고 있던 뷰(Vue, 이하 뷰)를 본격적으로 도입하게 되었다. 사실 팀에서는 리액트를 선호하고 있었으나 회사 내부에서 뷰의 사용이 빠른 속도로 증가하고 있었고 그에 따라 팀내에서도 뷰에 대한 전문성이 필요하게 되었다. 뷰와 리액트는 서로 영향을 주고받고 발전해나가는 도구들이라 비슷한 부분이 많아 큰 어려움 없이 적응할 수 있었다. 새로운 프로젝트에서는 뷰를 사용하는것 뿐 아니라 다른 개발 환경도 요…"}]},"recentPost":{"nodes":[{"fields":{"slug":"/2020-11-23/"},"frontmatter":{"title":"누구나 원하는 개발자되기","categories":"recruit","date":"23 November, 2020"},"excerpt":"5~6년 차 즈음부터 개발자 채용에 조금씩 관여하기 시작했고 현 회사에서는 면접관으로 활동한지 5년이 넘은 것 같다. 면접은 1차 면접에 해당하는 기술 면접이었고 팀의 채용 프로세스를 개선하거나 사전과제, 라이브 코딩 문제 출제에 주도적으로 참여했다. 그간 다양한 개발자들을 만났고 운 좋게도 좋은 개발자들을 많이 채용할 수 있었다. 채용 과정에서 좋은 개발자도 만났지만 그렇지 못했던 개발자도 많았고, 아쉬웠던 개발자도 있었다. 아쉬웠던 개발자들은 노력을 하고 있지만 “어느 정도”로 “어떤 방향”으로 해야 하는지 모르는 경우였고 채…"},{"fields":{"slug":"/2020-10-05/"},"frontmatter":{"title":"독서 습관을 만드는 구체적인 방법","categories":"motivation, life","date":"05 October, 2020"},"excerpt":"독서를 습관으로 만들기 위해 그간 많은 노력을 했었다. 습관적으로 SNS를 열면서 “이럴 시간에 책을 읽었으면…” 하고 자주 생각했지만 SNS 아이콘을 터치하는 유혹을 뿌리치기 힘들었다. 여러 가지 시도를 했고  “하루 25분 실행하기: 하루를 대하는 14년차 개발자의 자세” 에서 밝혔다시피 아직 다독가에 비하면 보잘것없지만 그래도 나름 습관 만들기에는 성공한 것 같다. 독서 습관을 만들면서 알게 된 몇가지 좋은 팁을 공유한다. 읽기 속도 측정하기 독서 습관을 만들 때 제일 중요한 것은 책 읽는 속도를 파악하는 것이라고 생각한다.…"},{"fields":{"slug":"/2020-09-07/"},"frontmatter":{"title":"하루 25분 실행하기: 하루를 대하는 14년차 개발자의 자세","categories":"productivity, motivation, life","date":"07 September, 2020"},"excerpt":"하루 24시간은 모두에게 공평하지만 그 24시간을 모두가 공평하게 사용하진 않는다. 하루의 여가시간을 어떻게 하면 더 효율적으로 사용할 수 있을까는 나의 오랜 고민거리였다. 단기 목표도 세워보고 장기 목표도 세워보고 포모도로, GTD도 도입하고 간츠도 사용해보고 하루 표준 계획표도 짜보고 일주일 보고서도 만들어봤다. 하루를 온전히 “노력”하기 위한 ”노력”을 많이 했다. 시도했던 것 대부분은 조금씩 달랐지만 주로 나에게 맞는 일상 패턴을 찾는 과정이었다. 개발자로서 회사 업무시간이나 여가 시간, 하루 대부분의 시간을 개발과 관련된…"},{"fields":{"slug":"/2020-07-27-1/"},"frontmatter":{"title":"이벤트 핸들러를 대하는 개발자의 자세","categories":"frontend, refactoring","date":"27 July, 2020"},"excerpt":"이벤트 핸들러는 UI를 개발할 때면 항상 사용된다. 웹뿐만 아니라 네이티브 어플리케이션에서도 약간의 차이가 있을뿐 거의 동일한 추상이 사용된다. 자주 사용되는 만큼 중요하지만 사실 너무 자주 사용되다 보니 가볍게 생각하며 습관적으로 고민 없이 좋지 않은 코드를 만들곤 한다. 자주 사용된다는 건 코드의 양적인 비중도 크다는 것이고 그만큼 조금만 더 신경 쓴다면 큰 효과를 볼 수도 있다. 이런 이벤트 핸들러를 어떻게 다루면 좋은지에 대해 간략하게 정리해봤다. 이벤트 핸들러라고 해서 꼭 DOM 이벤트에만 해당하는 것은 아니며 모듈 간의…"}]}},"pageContext":{"slug":"/2015-10-19-Flux 카툰 가이드/","categoriesRegex":"/frontend|architecture|translation/g"}},"staticQueryHashes":["1529427419","1755485493","2738229898","993531770"]}