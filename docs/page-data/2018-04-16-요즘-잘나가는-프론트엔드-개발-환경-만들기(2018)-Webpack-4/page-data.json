{"componentChunkName":"component---src-templates-post-tsx","path":"/2018-04-16-요즘-잘나가는-프론트엔드-개발-환경-만들기(2018)-Webpack-4/","result":{"data":{"markdownRemark":{"html":"<p><img src=\"https://user-images.githubusercontent.com/389021/39568622-c4f1a4be-4efd-11e8-9ddd-b987e493e99b.png\" alt=\"요즘 잘나가는 프론트엔드 개발 환경 만들기(2018): Webpack 4\"></p>\n<p>최근에 새로운 프로젝트를 진행하게 되면서 기존에 간만 살짝 보고 있던 뷰(Vue, 이하 뷰)를 본격적으로 도입하게 되었다. 사실 팀에서는 리액트를 선호하고 있었으나 회사 내부에서 뷰의 사용이 빠른 속도로 증가하고 있었고 그에 따라 팀내에서도 뷰에 대한 전문성이 필요하게 되었다. 뷰와 리액트는 서로 영향을 주고받고 발전해나가는 도구들이라 비슷한 부분이 많아 큰 어려움 없이 적응할 수 있었다. 새로운 프로젝트에서는 뷰를 사용하는것 뿐 아니라 다른 개발 환경도 요즘 것들로 업그레이드 해봤다. 웹팩 4 사용하고 테스트 러너도 기존에 팀 내에서 표준처럼 사용하던 카르마(Karma)에서 요즘(이미) 잘나가는 제스트(Jest)로 새롭게 시도해봤다.</p>\n<p>웹팩 4에 대한 내용을 시작으로 3회에 걸쳐 웹팩 4 + ES6 + 뷰 2 + 제스트 개발 환경에 대한 글을 공유할 예정이다. 내용은 기존에 웹팩을 사용했던 개발자와 처음 웹팩을 접하는 개발자 모두를 대상으로 작성했다.</p>\n<h2>웹팩 4 에서 달라진점</h2>\n<p>몇 달 전에 웹팩 4가 나왔다. 가장 큰 변화라고 할 수 있는 것은 개발 환경에 맞게 기본적으로 설정이 되어 있는 Development 모드와 프로덕션 환경에 맞게 설정이 되어 있는 Production 모드가 생긴 것이다. Parcel의 장점인 심플한 사용성을 수용한것으로 보인다. 그리고 모드에 따라 적용되는 옵션이 달라졌다. 변경된 내용을 조금 정리해봤다.</p>\n<ul>\n<li>빌드 속도가 빨라졌다. 개발팀이 강한 자신감을 보인 부분이기도 하다. 최대 98%까지 빨라질 수 있다고 한다. 멀티코어를 사용하게 된 것도 아닌데 이 정도면 놀라울 정도의 최적화가 이뤄진것 같다.</li>\n<li><code class=\"language-text\">webpack</code> 코어와 <code class=\"language-text\">webpack-cli</code> 가 분리 배포 된다.</li>\n<li>모드가 생겨 일정한 규칙만 지키면 설정 파일이 없이도 빌드가 가능하게 되었다. 상단에 서술한 Production, Development 모드를 말한다. 0CJS라고 표현해서 뭔가 봤더니 Zero configuration Javascript란다.</li>\n<li>CommonsChunkPlugin이 deprecated되고 SplitChunksPlugin으로 내장되었으며 optimization.splitChunks라는 옵션이 생겼다.</li>\n<li>특별한 작업없이 WebAssembly 파일(wasm)을 직접 import해서 사용할 수 있다. 웹팩 4에서는 실험적인 수준이고 웹팩 5에서 안정적으로 지원한다고 한다.</li>\n</ul>\n<h2>기본 번들 환경</h2>\n<p>이번 프로젝트에서도 개발 서버를 띄워 작업을 할 수 있게 하고 단위 개발이 끝나면 프로덕션 빌드까지 만들 목적으로 웹팩을 사용한다. 우선 기본적인 번들 환경부터 시작해보자. 적당한 이름의 프로젝트 디렉터리를 만들고 노드 프로젝트를 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">npm init</code></pre></div>\n<p><code class=\"language-text\">npm init</code> 에서는 늘 그렇듯 일단 엔터를 연타한다. 옵션을 사용하면 엔터 연타 없이 디폴트로 <code class=\"language-text\">package.json</code> 만드는 방법이 있었던것 같은데 개인적으로 엔터 연타를 선호한다. (<code class=\"language-text\">-y</code> 옵션이다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">npm install --save-dev webpack webpack-cli</code></pre></div>\n<p><code class=\"language-text\">webpack</code> 과 <code class=\"language-text\">webpack-cli</code> 를 설치한다. 번들링 환경은 글로벌에 설치하지 않도록 한다. mode를 이용한 0CJS 빌드를 테스트해보기 위해 간단한 코드를 작성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//src/index.js</span>\n<span class=\"token keyword\">import</span> sayHello <span class=\"token keyword\">from</span> <span class=\"token string\">'./sayHello'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//src/sayhello.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'HELLO WEBPACK4'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">src</code> 디렉터리를 만들고 그 안에 위의 파일을 각각 생성한다. 이제 설정 없이 각 환경에 맞는 빌드를 만들어 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">npx webpack --mode development</code></pre></div>\n<p><code class=\"language-text\">npx</code> 는 현재 프로젝트에 설치된 디펜던시를 마치 Path로 잡아 놓은 것 마냥 바로 사용할 수 있게 해주는 명령이다. npm에 포함되어 있다. 모드 옵션을 development로 주었다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/389021/39112584-e53e88be-4713-11e8-8524-aa05771d7b6f.png\" alt=\"img\"></p>\n<p>실행한 결과로 <code class=\"language-text\">dist/main.js</code> 로 번들링된 파일이 만들어졌다. <code class=\"language-text\">development</code> 모드로 만들어진 번들 파일이라 압축은 되어 있지 않지만 소스맵이 포함되어 있다. 이쯤 되면 알 수 있지만 <code class=\"language-text\">production</code> 모드로 번들링을 하고자 할 때는 <code class=\"language-text\">--mode</code> 옵션의 값을 <code class=\"language-text\">production</code> 으로 주면 된다.</p>\n<h2>mode를 이용한 webpack.config.js</h2>\n<p>0CJS가 간편하긴 하지만 작은 프로젝트나 프로토타입용으로나 적합하지 실무에서는 세부 설정을 적용할 수밖에 없다. 기본적인 환경을 새 버전에 맞게 구성해보자. 웹팩 4에서는 mode 옵션이 필수 옵션이다. 즉 0CJS 사용할 때 뿐 아니라 <code class=\"language-text\">webpack.config.js</code> 으로 설정을 직접 구성해 사용할 때도 mode 옵션이 필요하다. 각 모드 별로 기본 디폴트 옵션값이 다르고 필요한 설정의 내용도 다르다. 모드별로 필요한 설정이 미리 잡혀있고 그것을 오버라이드하는 느낌으로 커스텀 설정을 한다. 우선 가장 기본적인 설정부터 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  entry<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    app<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    filename<span class=\"token operator\">:</span> <span class=\"token string\">'[name].bundle.js'</span><span class=\"token punctuation\">,</span>\n    path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>설정이 없던 상태와 달라진 것은 번들링된 파일 이름이 <code class=\"language-text\">app.bundle.js</code> 로 달라진 것 뿐이다. 0CJS일 때의 번들 파일명이 <code class=\"language-text\">main.js</code> 인데 마음에 들지 않는다. 그리고 나중에 Chunk로 디펜던시 모듈들을 분리하려면 어차피 설정이 필요하다.</p>\n<p>위 설정은 커맨드라인 명령에서 <code class=\"language-text\">--mode</code> 옵션을 반드시 넘겨줘야 한다. 웹팩 3을 사용하는 환경에서는 development와 production 빌드를 한개의 설정 파일을 공유하면서 커맨드라인에서 넘기는 옵션으로 분기를 태워서 개별적으로 적용하거나 설정 파일을 각각에 빌드에 맞게 따로 구성했다. 물론 웹팩 4에서도 가능한 일이다. 하지만 mode 옵션으로 인해 조금 더 나은 방법으로 바뀌었다. 우선 빌드에 따라 개별 파일 구성할 때는 mode 옵션이 설정에 추가되어야 한다. 개발 환경에서만 사용되는 설정 파일 <code class=\"language-text\">webpack.config.dev.js</code> 이 있다고 하면 파일 안의 설정에는 <code class=\"language-text\">mode</code> 옵션이 들어있어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//webpack.config.dev.js</span>\n\n<span class=\"token comment\">// ...</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  mode<span class=\"token operator\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// production 설정 파일에서는 'production'</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 설정을 해두면 커맨드라인에서 <code class=\"language-text\">--mode</code> 옵션을 따로 주지 않아도 된다. 설정 파일에 mode 설정을 한 상태에서 커맨드라인에서 옵션을 주게 되면 설정 파일의 mode 옵션을 덮어쓰게 되니 주의해야 한다. 특정 설정 파일을 이용해 빌드할 때는 <code class=\"language-text\">--config</code> 옵션을 이용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npx webpack <span class=\"token operator\">--</span>config webpack<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>dev<span class=\"token punctuation\">.</span>js</code></pre></div>\n<p>한 개의 설정을 공유하면서 커맨드라인에서 주어지는 옵션으로 각 빌드 별로 분기를 만들 때는 커맨드라인에서 주어지는 mode 옵션을 받아서 처리한다. 그러기 위해서는 우선 설정 파일의 설정이 객체의 형태가 아니라 객체를 반환하는 함수의 형태여야 한다. 일종의 콜백처럼 동작한다고 생각하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">env<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    entry<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      app<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      filename<span class=\"token operator\">:</span> <span class=\"token string\">'[name].bundle.js'</span><span class=\"token punctuation\">,</span>\n      path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> config<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>첫 번째 인자는 커맨드라인에서 전달해주는 <code class=\"language-text\">--env</code> 옵션들이 객체 형태로 전달 된다. <code class=\"language-text\">webpack.EnvironmentPlugin</code> 나 <code class=\"language-text\">webpack.DefinePlugin</code> 를 이용하면 구현 코드에서도 해당 변수들을 전역에서 사용할 수 있게 해준다. 4 버전 이하에서는 <code class=\"language-text\">--env</code> 옵션을 이용해 어떤 빌드인지 구분했지만, 이제는 그럴 필요가 없어졌다. 두 번째 인자에는 커맨드라인에서 전달되는 모든 옵션이 객체 형태로 전달 된다. 여기에 <code class=\"language-text\">mode</code> 프로퍼티로 빌드 정보가 넘어온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">env<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    entry<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      app<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      filename<span class=\"token operator\">:</span> <span class=\"token string\">'[name].bundle.js'</span><span class=\"token punctuation\">,</span>\n      path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>mode <span class=\"token operator\">===</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//... Development 설정</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//... Production 설정</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> config<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>장단이 있기에 이번 프로젝트에서는 설정의 복잡도가 많이 높아지기전까지는 하나의 설정 파일을 공유하는것으로 결정했다.</p>\n<h2>Production 빌드 설정</h2>\n<p>프로젝트의 진행 내용상 현재로서는 프로덕션 빌드에서 고려해야 할 것은 코드 미니파이밖에 없다. 기존에는 <code class=\"language-text\">UglifyWebpackPlugin</code> 을 직접 설치한 뒤 미니 파이 설정을 직접 해줘야 했다. 하지만 웹팩 4에서는 <code class=\"language-text\">UglifyWebpackPlugin</code> 이 내장되어 따로 설치할 필요가 없어졌다. 내장되면서 <code class=\"language-text\">webpack.optimize.UglifyJsPlugin</code> 으로 직접 사용해 설정할 수 있는데 기본 설정만으로도 무리 없는 상태라 <code class=\"language-text\">mode</code> 가 <code class=\"language-text\">production</code> 인것 만으로도 특별한 설정 없이 미니파이가 가능해졌다. 즉 추가 설치나 설정 없이 미니파이 가능하다. 그래서 따로 설정할 것은 없는데 빌드마다 기존의 dist 디렉터리를 지워주는 플러그인 정도만 사용했다.</p>\n<p>플러그인을 설치하고</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">npm i --save-dev clean-webpack-plugin</code></pre></div>\n<p>간단한 설정을 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//...</span>\n<span class=\"token keyword\">const</span> CleanWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clean-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">env<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//...</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>mode <span class=\"token operator\">===</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Production 설정</span>\n    config<span class=\"token punctuation\">.</span>plugins <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">CleanWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'dist'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> config<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 매 프로덕션 빌드마다 dist 디렉토리는 깔끔하게 지워진다.</p>\n<h2>Development 빌드 설정</h2>\n<p>Development 빌드를 따로 만들 일은 없으므로 Development 빌드 설정은 온전히 개발 서버 설정이다. <code class=\"language-text\">webpack-dev-server</code> 를 위한 설정을 하고 <code class=\"language-text\">htmlWebpackPlugin</code> 으로 서버를 띄울 때마다 임시 <code class=\"language-text\">index.html</code> 파일을 만들어 사용한다. 그리고 Hot Module Replacement(HMR)도 설정한다. HMR은 코드에 변경이 생겨 다시 빌드할 때 매번 브라우저를 리로드 할 필요 없이 변경된 모듈만 바로 교체하는 기능이다. 그래서 현재 테스트 중인 스테이트가 계속 유지된다는 장점도 있다. 그리고 빠질 수 없는 소스맵 설정도 들어간다.</p>\n<p>우선 <code class=\"language-text\">htmlWebpackPlugin</code> 과 <code class=\"language-text\">webpack-dev-server</code> 를 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">npm i --save-dev html-webpack-plugin webpack-dev-server</code></pre></div>\n<p>그리고 설정 파일에 필요한 설정을 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//...</span>\n<span class=\"token keyword\">const</span> webpack <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">env<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//...</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>mode <span class=\"token operator\">===</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    config<span class=\"token punctuation\">.</span>plugins <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>HotModuleReplacementPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        title<span class=\"token operator\">:</span> <span class=\"token string\">'Development'</span><span class=\"token punctuation\">,</span>\n        showErrors<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 에러 발생시 메세지가 브라우저 화면에 노출 된다.</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    config<span class=\"token punctuation\">.</span>devtool <span class=\"token operator\">=</span> <span class=\"token string\">'inline-source-map'</span><span class=\"token punctuation\">;</span>\n\n    config<span class=\"token punctuation\">.</span>devServer <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      hot<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 서버에서 HMR을 켠다.</span>\n      host<span class=\"token operator\">:</span> <span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 디폴트로는 \"localhost\" 로 잡혀있다. 외부에서 개발 서버에 접속해서 테스트하기 위해서는 '0.0.0.0'으로 설정해야 한다.</span>\n      contentBase<span class=\"token operator\">:</span> <span class=\"token string\">'./dist'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 개발서버의 루트 경로</span>\n      stats<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        color<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">//...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> config<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>splitChunks</h2>\n<p>기존에 CommonsChunkPlugin을 이용해 사용에 맞게 자동으로 번들 파일을 분리했던 기능을 splitChunk 옵션을 통해 할 수 있다. splitChunk를 이용하면 대형 프로젝트에서 거대한 번들 파일을 적절히 분리하고 나눌 수 있다. 파일 사이즈, 비동기 요청 횟수 등의 옵션에 따라 자동으로 분리할 수 있고 정규식에 따라서 특정 파일들만 분리할 수 있고 혹은 특정 엔트리 포인트를 분리할 수 있다. 번들 파일을 적절히 분리하면 브라우저 캐시를 전략적으로 활용할 수 있으며 초기 로딩속도를 최적화할 수도 있다. 물론 프로젝트의 필요에 따라 엔트리 포인트를 분리해서 여러 가지 번들 파일을 만들 때도 사용된다.\nsplitChunks 에 대한 자세한 이야기는 <a href=\"https://webpack.js.org/plugins/split-chunks-plugin/#select-chunks\">여기</a> 에서 확인할 수 있다.</p>\n<p>자주 사용되는 코드 분리는 npm으로 설치한 디펜던시 모듈과 실제 구현코드와 번들 파일을 분리하는 것이다. 설정에 아래와 같은 옵션을 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//..</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">env<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//..</span>\n    output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      filename<span class=\"token operator\">:</span> <span class=\"token string\">'[name].bundle.js'</span><span class=\"token punctuation\">,</span>\n      path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    optimization<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      splitChunks<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        cacheGroups<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          commons<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[\\\\/]node_modules[\\\\/]</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n            name<span class=\"token operator\">:</span> <span class=\"token string\">'vendors'</span><span class=\"token punctuation\">,</span>\n            chunks<span class=\"token operator\">:</span> <span class=\"token string\">'all'</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">//..</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">cacheGroups</code> 는 명시적으로 특정 파일들을 청크로 분리할 때 사용한다. 여기서는 common 이란 청크를 분리한다. 내용을 살펴보면 <code class=\"language-text\">test</code> 를 사용해 대상이 되는 파일을 정규식으로 잡는다. 여기서는 <code class=\"language-text\">node_modules</code> 디렉터리에 있는 파일들이다. <code class=\"language-text\">name</code> 은 청크로 분리할 때 이름으로 사용될 파일명이다. 우리의 설정에서는 output.filename 옵션에 <code class=\"language-text\">[name]</code> 에 대치될 내용이기도 하다. <code class=\"language-text\">chunks</code> 는 모듈의 종류에 따라 청크에 포함할지 말지를 결정하는 옵션이다 <code class=\"language-text\">initial</code> 과 <code class=\"language-text\">async</code> 그리고 <code class=\"language-text\">all</code> 이 있다. 여기서는 <code class=\"language-text\">all</code> 을 사용하는데 말 그대로 <code class=\"language-text\">test</code> 조건에 포함되는 모든 것을 분리하겠다는 뜻이다. <code class=\"language-text\">initial</code> 은 초기 로딩에 필요한 경우, <code class=\"language-text\">async</code> 은 <code class=\"language-text\">import()</code> 를 이용해 다이나믹하게 사용되는 경우에 분리한다.</p>\n<p>분리된 파일들은 서버가 열리면 <code class=\"language-text\">HtmlWebpackPlugin</code> 이 알아서 index.html에 주입해준다. 물론 production 빌드를 하면 분리된 번들 파일 두개가 생성된다</p>\n<h2>package.json에 script 추가하기</h2>\n<p>자 이제 일반적인 webpack 설정은 모두 끝났다. package.json에 script 옵션을 추가해 쉽게 웹팩을 실행할 수 있게 하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//...</span>\n<span class=\"token string\">\"mian\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.js\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"build-dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack --mode development\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack --mode production\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack-dev-server --open --mode development\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">//...</span></code></pre></div>\n<p><code class=\"language-text\">npm run dev</code> 로 개발 서버를 실행할 수 있고 <code class=\"language-text\">--open</code> 옵션으로 이제 서버가 뜨면 자동으로 브라우저가 열고 서버에 접속까지 해준다. <code class=\"language-text\">npm run build</code> 로 production 빌드를 할수 있다. 필요에 따라 <code class=\"language-text\">npm run build-dev</code> 로 development 빌드를 수행할 수도 있다.</p>\n<h2>최종 설정 파일</h2>\n<p>이렇게 만들어진 최종 설정 파일 <code class=\"language-text\">webpack.config.js</code> 는 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> webpack <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> CleanWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clean-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">env<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    entry<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      app<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      filename<span class=\"token operator\">:</span> <span class=\"token string\">'[name].bundle.js'</span><span class=\"token punctuation\">,</span>\n      path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    optimization<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      splitChunks<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        cacheGroups<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          commons<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[\\\\/]node_modules[\\\\/]</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n            name<span class=\"token operator\">:</span> <span class=\"token string\">'vendors'</span><span class=\"token punctuation\">,</span>\n            chunks<span class=\"token operator\">:</span> <span class=\"token string\">'all'</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>mode <span class=\"token operator\">===</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    config<span class=\"token punctuation\">.</span>plugins <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>HotModuleReplacementPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        title<span class=\"token operator\">:</span> <span class=\"token string\">'Development'</span><span class=\"token punctuation\">,</span>\n        showErrors<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    config<span class=\"token punctuation\">.</span>devtool <span class=\"token operator\">=</span> <span class=\"token string\">'inline-source-map'</span><span class=\"token punctuation\">;</span>\n\n    config<span class=\"token punctuation\">.</span>devServer <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      hot<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      host<span class=\"token operator\">:</span> <span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span>\n      contentBase<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      stats<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        color<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    config<span class=\"token punctuation\">.</span>plugins <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">CleanWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'dist'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> config<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>마무리</h2>\n<p>웹팩 4를 이용해 기본적인 번들부터 개발 서버 그리고 splitChunk까지 설정했다. 확실히 이번 버전부터는 설정이 간결해지고 사용이 쉬워진 것을 느낄 수 있었다. 웹팩 4가 나온 시점에는 플러그인들의 지원이 조금 아쉬운 편이었는데 이제는 자주 사용되는 플러그인이나 로더는 모두 무리 없이 사용할 수 있고 얼마 전엔 여러가지 문제를 개선한 4.6 버전이 배포되었다. 다음에는 ES6와 Vue 2의 개발 환경을 추가하고자 한다.</p>","fields":{"slug":"/2018-04-16-요즘 잘나가는 프론트엔드 개발 환경 만들기(2018) Webpack 4/"},"excerpt":"요즘 잘나가는 프론트엔드 개발 환경 만들기(2018): Webpack 4 최근에 새로운 프로젝트를 진행하게 되면서 기존에 간만 살짝 보고 있던 뷰(Vue, 이하 뷰)를 본격적으로 도입하게 되었다. 사실 팀에서는 리액트를 선호하고 있었으나 회사 내부에서 뷰의 사용이 빠른 속도로 증가하고 있었고 그에 따라 팀내에서도 뷰에 대한 전문성이 필요하게 되었다. 뷰와 리액트는 서로 영향을 주고받고 발전해나가는 도구들이라 비슷한 부분이 많아 큰 어려움 없이 적응할 수 있었다. 새로운 프로젝트에서는 뷰를 사용하는것 뿐 아니라 다른 개발 환경도 요…","frontmatter":{"title":"요즘 잘나가는 프론트엔드 개발 환경 만들기(2018): Webpack 4","date":"16 April, 2018","categories":"frontend, javascript"}},"recomendPost":{"nodes":[{"fields":{"slug":"/2020-12-01/"},"frontmatter":{"title":"browserslist 쾌속 가이드","categories":"frontend, nodejs","date":"01 December, 2020"},"excerpt":"언젠가부터 브라우저스리스트(browserslist)라는 것이 자주 눈에 띄더니 지금은 FE 개발 환경에서 뺄 수 없는 도구가 되었어요. 아마도 바벨(Babel)이라는 FE 계의 걸출한 스타 프로젝트에서 도입했기 때문일 거라고 생각합니다. 바벨을 사용하는 프로젝트들이 많다 보니 간접적으로 혹은 직접적으로 브라우저스리스트까지 사용하게 되는 것이죠. 사실 좋아요 좋은 도구라고 생각합니다. 아마 브라우저 환경을 정의하는 표준처럼 당분간 사용될 것 같아요. 보통 공식 사이트에서 자세히 알 수 있는 내용들은 글을 따로 안 쓰려고 하는 편인데…"},{"fields":{"slug":"/2020-07-27-1/"},"frontmatter":{"title":"이벤트 핸들러를 대하는 개발자의 자세","categories":"frontend, refactoring","date":"27 July, 2020"},"excerpt":"이벤트 핸들러는 UI를 개발할 때면 항상 사용된다. 웹뿐만 아니라 네이티브 어플리케이션에서도 약간의 차이가 있을뿐 거의 동일한 추상이 사용된다. 자주 사용되는 만큼 중요하지만 사실 너무 자주 사용되다 보니 가볍게 생각하며 습관적으로 고민 없이 좋지 않은 코드를 만들곤 한다. 자주 사용된다는 건 코드의 양적인 비중도 크다는 것이고 그만큼 조금만 더 신경 쓴다면 큰 효과를 볼 수도 있다. 이런 이벤트 핸들러를 어떻게 다루면 좋은지에 대해 간략하게 정리해봤다. 이벤트 핸들러라고 해서 꼭 DOM 이벤트에만 해당하는 것은 아니며 모듈 간의…"},{"fields":{"slug":"/2020-03-12-은닉을 향한 자바스크립트의 여정/"},"frontmatter":{"title":"은닉을 향한 자바스크립트의 여정","categories":"javascript","date":"12 March, 2020"},"excerpt":"ECMAScript 클래스 필드(class field) 명세중에  즉  (이하 Private 속성) 가 있다. 클래스 필드 스펙은 Stage 3(Candidate)까지 올랐으니 아마 곧 Stage 4(Finished)를 거쳐 표준 스펙이 될 것이다. 사실 초기에 명세 문서를 봤을 때는 \"드디어 private이 생기는건가?\"하는 기대감과 \"문법이 좀 별론데\"라는 실망감이 있었을 뿐 뭔가 현실감은 없었다. 그렇게 시간이 흘러 기억 속에서 잊힌 채로 지내다가 얼마전에 타입스크립트 3.8에서 정식으로 지원한다는 소식을 들었고 이를 계기로…"},{"fields":{"slug":"/2018-10-24-reduce()를 이용해 순차적으로 프로미스를 해결하는 방법/"},"frontmatter":{"title":"reduce() 를 이용해 순차적으로 프라미스를 해결하는 방법","categories":"javascript, translation","date":"24 October, 2018"},"excerpt":"원글: Why Using reduce() to Sequentially Resolve Promises Works https://css-tricks.com/why-using-reduce-to-sequentially-resolve-promises-works/ reduce() 를 이용해 순차적으로 프라미스를 해결하는 방법  객체를 사용하지 않고 비동기 자바스크립트 코드를 작성하는 것은 눈을 감고 케이크를 굽는 것 만큼 어렵다. 물론 할 수 있지만 복잡해질 것이고 결국 화딱지가 나서 못 해먹을 것이다. 꼭 필요하다고 말할 순 없지만 일단 …"}]},"recentPost":{"nodes":[{"fields":{"slug":"/2021-04-20/"},"frontmatter":{"title":"욕 안 먹는 개발자되기","categories":"developer","date":"20 April, 2021"},"excerpt":"직장인이라면 자연스럽게 업무를 대하는 태도가 캐릭터 처럼 만들어져요. 개발자도 마찬가지고요. 신입이라고 태도가 항상 나쁜 것도 아니고 경력이라고 항상 태도가 좋은 것도 아니에요. 코딩 스킬처럼 개선될 수도 있고요. 연차가 적을수록 몰라서 잘못된 태도를 갖는 경우가 많습니다. 이렇게 만들어진 태도는 보통 연차가 높을수록 개선되기 힘들다고들 하죠. 태도라는 큰 추상적인 덩어리는 억울하게도 한 부분, 한 사건에 의해 모든 것을 퉁쳐서 판단되기도 하죠. 이런 태도의 중요한 한 부분은 업무 중 문제가 발생했을 때에 뚜렷하게 나타난다고 생각…"},{"fields":{"slug":"/2021-02-22/"},"frontmatter":{"title":"코딩 플레이그라운드 만들며 맛보는 요즘 FE 개발 환경 Part 2","categories":"frontend, nodejs, tdd","date":"22 February, 2021"},"excerpt":"파트 1에서는 기본 자바스크립트 개발 환경을 러나와 함께 구축해봤어요. 기본 환경만으로 충분하신 분들도 계시겠지만 보통은 그렇지 않을 겁니다.\n이제 두 가지 개발 환경을 추가할 건데요. 타입 스크립트와 리액트 개발 환경이에요. 우선 타입스크립트 환경을부터 추가할 거예요. 그전에 러나로 해줘야 할 작업이 있습니다. 타입스크립트 환경도 결국 지금까지 저희가 구축한 자바스크립트 환경 위에 만들어질 것이기 때문에 디펜던시 모듈을 공유할 수 있도록 만들고 환경 설정 파일들도 기본 자바스크립트의 환경설정 파일들을 확장해서 사용할 거예요. 그…"},{"fields":{"slug":"/2021-02-15/"},"frontmatter":{"title":"코딩 플레이그라운드 만들며 맛보는 요즘 FE 개발 환경 Part 1","categories":"frontend, nodejs, tdd","date":"15 February, 2021"},"excerpt":"개발을 하다 보면 특정 환경에서 빠르게 코드를 작성하고 그 결과를 확인해보고 싶을 때가 있어요. 라이브러리나 프레임웍 혹은 언어를 공부할 때나 아이디어를 빠르게 실험하거나 프로토타입 해보고 싶을 때 그렇지요. 바닐라 자바스크립트로 충분한 환경이라면 디렉터리 하나 만들고 js 파일 하나 html 파일 하나 만들어서 에디터를 열고 브라우저를 열어서 html 파일을 불러오는 것까지 하면 기본적인 준비가 끝나요. 근데요. 이런 바닐라 자바스크립트 환경을 만드는 것조차도 사실 귀찮을 때가 있어요. 이런 기본 환경도 귀찮은데 실무의 복잡한 …"},{"fields":{"slug":"/2020-12-01/"},"frontmatter":{"title":"browserslist 쾌속 가이드","categories":"frontend, nodejs","date":"01 December, 2020"},"excerpt":"언젠가부터 브라우저스리스트(browserslist)라는 것이 자주 눈에 띄더니 지금은 FE 개발 환경에서 뺄 수 없는 도구가 되었어요. 아마도 바벨(Babel)이라는 FE 계의 걸출한 스타 프로젝트에서 도입했기 때문일 거라고 생각합니다. 바벨을 사용하는 프로젝트들이 많다 보니 간접적으로 혹은 직접적으로 브라우저스리스트까지 사용하게 되는 것이죠. 사실 좋아요 좋은 도구라고 생각합니다. 아마 브라우저 환경을 정의하는 표준처럼 당분간 사용될 것 같아요. 보통 공식 사이트에서 자세히 알 수 있는 내용들은 글을 따로 안 쓰려고 하는 편인데…"},{"fields":{"slug":"/2020-11-23/"},"frontmatter":{"title":"누구나 원하는 개발자되기","categories":"developer, recruit","date":"23 November, 2020"},"excerpt":"5~6년 차 즈음부터 개발자 채용에 조금씩 관여하기 시작했고 현 회사에서는 면접관으로 활동한지 5년이 넘은 것 같다. 면접은 1차 면접에 해당하는 기술 면접이었고 팀의 채용 프로세스를 개선하거나 사전과제, 라이브 코딩 문제 출제에 주도적으로 참여했다. 그간 다양한 개발자들을 만났고 운 좋게도 좋은 개발자들을 많이 채용할 수 있었다. 채용 과정에서 좋은 개발자도 만났지만 그렇지 못했던 개발자도 많았고, 아쉬웠던 개발자도 있었다. 아쉬웠던 개발자들은 노력을 하고 있지만 “어느 정도”로 “어떤 방향”으로 해야 하는지 모르는 경우였고 채…"},{"fields":{"slug":"/2020-10-05/"},"frontmatter":{"title":"독서 습관을 만드는 구체적인 방법","categories":"motivation, life","date":"05 October, 2020"},"excerpt":"독서를 습관으로 만들기 위해 그간 많은 노력을 했었다. 습관적으로 SNS를 열면서 “이럴 시간에 책을 읽었으면…” 하고 자주 생각했지만 SNS 아이콘을 터치하는 유혹을 뿌리치기 힘들었다. 여러 가지 시도를 했고  “하루 25분 실행하기: 하루를 대하는 14년차 개발자의 자세” 에서 밝혔다시피 아직 다독가에 비하면 보잘것없지만 그래도 나름 습관 만들기에는 성공한 것 같다. 독서 습관을 만들면서 알게 된 몇가지 좋은 팁을 공유한다. 읽기 속도 측정하기 독서 습관을 만들 때 제일 중요한 것은 책 읽는 속도를 파악하는 것이라고 생각한다.…"}]}},"pageContext":{"slug":"/2018-04-16-요즘 잘나가는 프론트엔드 개발 환경 만들기(2018) Webpack 4/","categoriesRegex":"/frontend|javascript/g"}},"staticQueryHashes":["1529427419","1755485493","2738229898","993531770"]}