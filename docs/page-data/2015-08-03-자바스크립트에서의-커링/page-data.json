{"componentChunkName":"component---src-templates-post-tsx","path":"/2015-08-03-자바스크립트에서의-커링/","result":{"data":{"markdownRemark":{"html":"<h1>자바스크립트의 커링</h1>\n<p>Currying in Javascript</p>\n<blockquote>\n<p>원문<br>\n<a href=\"https://medium.com/@kevincennis/currying-in-javascript-c66080543528\">https://medium.com/@kevincennis/currying-in-javascript-c66080543528</a></p>\n</blockquote>\n<br>\n<h2>자바스크립트에서의 커링</h2>\n<p>최근 나는 함수형 프로그래밍에 대해 많은 생각을 해왔다. 함수형 프로그래밍은 일종의 커링함수 만들어가는 과정과 같이 재미있는 것이라 생각했다.<br>\n커링을 모르는 사람을 위해 설명을 하자면<br>\n<strong>커링은 n개의 인자를 가진 함수를 변형하여 하나의 인자를 받는 n개의 함수로 만드는 것</strong>이다.<br>\n각 부분이 적용된 함수들은 체인을 만들게 되고 마지막 체인에서 결국 value를 해결하게 된다.\n아래 커링을 사용하는 간단한 예제가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">volume</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">l<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> h</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> l <span class=\"token operator\">*</span> w <span class=\"token operator\">*</span> h<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> curried <span class=\"token operator\">=</span> <span class=\"token function\">curry</span><span class=\"token punctuation\">(</span> volume <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">curried</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span></code></pre></div>\n<h2>Disclaimer</h2>\n<p>이 포스트는</p>\n<ul>\n<li>클로저</li>\n<li>일급함수</li>\n<li>Function#apply()</li>\n</ul>\n<p>와 같은 것들에 대한 지식이 있다고 가정한다. 만약 당신이 이런 컨셉에 익숙치 않다면 더 읽기 전에 각 내용에 대해 알아 보고 오는게 좋다.</p>\n<h2>커링 함수를 작성하자</h2>\n<p>커링 함수를 구현할 때 제일 처음 떠오르는 생각은 커링할 함수를 인자로 받아야 한다는 것이다. 여기서부터 시작할 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">curry</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">fn</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그리고 다음으로 우리의 함수가 얼마나 많은 인자를 필요로 하는지 알아야 한다(이것을 \"arity\"라고한다). 이게 아니면, 우리는 언제 새로운 함수를 리턴하게 되고 언제 값을 돌려받을지는 알 수 없다. length 프로퍼티를 이용해 함수가 얼마나 많은 인자가 필요한지를 알 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">curry</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">fn</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> arity <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서부터 점점 어려워진다.\n기본적으로 커리된 함수가 호출될 때마다 우리는 새로운 인자를 클로저 안의 Array에 추가한다. 만약 커리된 원래 함수가 필요한 인의 개수와 그 Array의 원소의 개가 같게되면  우리는 원래의 함수를 호출하고 아니라면 새로운 함수를 리턴한다.<br>\n그러기 위해서는<br></p>\n<ol>\n<li>우리는 이자의 목록을 소유할 클로저가 필요하고</li>\n<li>전체 인자의 개수를 체크해 부분적으로 적용된 새로운 함수를 리턴하거나</li>\n<li>혹은 모든 인수가 적용된 원래 함수의 결과 값을 리턴하는 함수가 필요하다.</li>\n</ol>\n<p>나는 보통 'resolver'라는 즉시실행 함수로 구현한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">curry</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">fn</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> arity <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">resolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>resolver 안에서 처음 해야 할 일은 전달받은 인자의 복사본을 만드는 것이다. memory라는 이름의 변수를 만들고 Array#slice를 이용해서 arguments 객체의 복사본을 만들 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">curry</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">fn</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> arity <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">resolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> memory <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span> arguments <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다음으로 resolver는 함수를 리턴해야 한다. 이 함수가 커리된 함수를 호출했을 때 실행되는 함수이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">curry</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">fn</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> arity <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">resolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> memory <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span> arguments <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>resolver 내부에서 리턴된 함수가 호출될 때는 인자가 전달이 되어야 하는데 이 인자는 memory라는 변수에 저장될 인자가 될 수도 있다. 그래서 먼저 slice()를 이용해 memory의 카피를 만든다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">curry</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">fn</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> arity <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">resolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> memory <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span> arguments <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> local <span class=\"token operator\">=</span> memory<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그리고 새로운 인자들을 Array#push를 이용해 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">curry</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">fn</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> arity <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">resolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> memory <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span> arguments <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> local <span class=\"token operator\">=</span> memory<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span> local<span class=\"token punctuation\">,</span> arguments <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>자 이제 우리는 지금까지의 부분 적용된 함수의 체인으로 전달받은 모든 인자들이 담긴 새로운 배열을 얻게 되었다.\n마지막으로 해야 할 일은 전달받은 인자의 개수와 커리된 함수의 arity와 비교해야 한다. 만약 개수가 같다면 우리는 원래 함수를 호출하게 된다. 만약 아니라면 우리는 resolver를 이용해 다른 memory에 저장된 모든 인자를 갖는 다른 함수를 리턴한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">curry</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">fn</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> arity <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">resolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> memory <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span> arguments <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> local <span class=\"token operator\">=</span> memory<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span> local<span class=\"token punctuation\">,</span> arguments <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      next <span class=\"token operator\">=</span> local<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> arity <span class=\"token operator\">?</span> fn <span class=\"token operator\">:</span> resolver<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> local <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이해하기 쉽지는 않은 코드일 것이다. 예제를 하나하나 설명하겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">volume</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">l<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> h</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> l <span class=\"token operator\">*</span> w <span class=\"token operator\">*</span> h<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> curried <span class=\"token operator\">=</span> <span class=\"token function\">curry</span><span class=\"token punctuation\">(</span> volume <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Okay, curried는 volume을 우리의 커리함수에 인자로 전달해 실행한 결과이다.\n잠깐 되돌아본다면 이때 일어나는 일은 아래와 같다.</p>\n<ol>\n<li>우리는 volume의 arity를 저장한다.(3이다)</li>\n<li>resolver를 인자 없이 즉시 실행한다, memory가 빈 상태라는 의미이다.</li>\n<li>resolver는 무명함수를 리턴한다.</li>\n</ol>\n<p>자 이제는 우리의 커리된 함수를 실행하고 그 결과를 length에 저장한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">volume</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">l<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> h</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> l <span class=\"token operator\">*</span> w <span class=\"token operator\">*</span> h<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> curried <span class=\"token operator\">=</span> <span class=\"token function\">curry</span><span class=\"token punctuation\">(</span> volume <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> length <span class=\"token operator\">=</span> <span class=\"token function\">curried</span><span class=\"token punctuation\">(</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>각 과정을 자세히 설명하면,</p>\n<ol>\n<li>여기서 우리가 실행한 것은 정확히 resolver에 의해 리턴된 무명함수이다.</li>\n<li>memory의 복사본을 만들고(비어있었던) 이것을 local이라고 부른다.</li>\n<li>전달받은 인자 (2)를 local 배열에 추가한다.</li>\n<li>local의 개수가 volume의 arity보다 작으니 우리는 이전까지 가지고 있던 인자의 목록과 함께 resolver를 다시 실행한다. 이것은 새로운 클로저에서 새로운 이전에 전달받은 인자(2)를 포함한 새로운 memory 배열을 만든다.</li>\n<li>마침내, resolver는 새로운 클로저와 그 안의 새로운 memory 배열에 접근할 수 있는 새로운 함수를 만들어 리턴한다.</li>\n</ol>\n<p>그래서 다시 우리는 무명함수를 얻게 된다. 그러나 이번에는 memory 객체가 비어있지 않고 (2)라는 인자를 갖고 있게 된다.\n만약 다시 length 함수를 호출하게 되면 이 프로세스가 반복된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">volume</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">l<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> h</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> l <span class=\"token operator\">*</span> w <span class=\"token operator\">*</span> h<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> curried <span class=\"token operator\">=</span> <span class=\"token function\">curry</span><span class=\"token punctuation\">(</span> volume <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> length <span class=\"token operator\">=</span> <span class=\"token function\">curried</span><span class=\"token punctuation\">(</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> lengthAndWidth <span class=\"token operator\">=</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol>\n<li>다시 실제로 실행되는 것은 resolver가 리턴한 무명함수이고,</li>\n<li>이번에는 resolver가 이전의 인자들을 가지고 있어 우리는 [2]라는 배열의 복사본을 얻게 된다.</li>\n<li>그리고 새로운 인자인 3을 local 배열에 추가하고,</li>\n<li>여전히 local의 개수가 arity보다 적기 때문에 지금까지 전달된 인자들과 resolver를 이용해 새로운 함수를 리턴한다.</li>\n</ol>\n<p>자 이제는 우리의 lengthAndWidth 함수를 호출해 결과 값을 얻어올 차례이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">volume</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">l<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> h</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> l <span class=\"token operator\">*</span> w <span class=\"token operator\">*</span> h<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> curried <span class=\"token operator\">=</span> <span class=\"token function\">curry</span><span class=\"token punctuation\">(</span> volume <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> length <span class=\"token operator\">=</span> <span class=\"token function\">curried</span><span class=\"token punctuation\">(</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> lengthAndWidth <span class=\"token operator\">=</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token function\">lengthAndWidth</span><span class=\"token punctuation\">(</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 24</span></code></pre></div>\n<p>지금부터는 단계가 끝부분에서 약간 달라진다.</p>\n<ol>\n<li>다시 한번 resolver가 리턴한 무명함수가 실행되고,</li>\n<li>이번에도 resolver는 이전 두 개의 인자를 가지고 있어 [2,3]와 같은 배열이 local에 할당된다.</li>\n<li>새로운 인자인 4가 local 배열에 추가되고,</li>\n<li>이번에는 arity와 local의 개수가 같게되어 새로운 함수를 리턴하는 대신 지금까지 쌓아온 인자를 volume에 전달하여 호출해 실행한 결과 값인 24를 얻게 된다.</li>\n</ol>\n<h2>Wrapping up</h2>\n<p>아직까지는 나는 일상적인 작업에서 커링을 꼭 써야 하는 유즈케이스를 찾지는 못 했다. 하지만 나는 이런 함수를 작성하는 과정이 함수형 프로그래밍의 이해도를 높이고 클로저나 1급 함수에 대한 개념을 강화할 수 있을 거라 생각한다.</p>","fields":{"slug":"/2015-08-03-자바스크립트에서의 커링/"},"excerpt":"자바스크립트의 커링 Currying in Javascript 원문\nhttps://medium.com/@kevincennis/currying-in-javascript-c66080543528 자바스크립트에서의 커링 최근 나는 함수형 프로그래밍에 대해 많은 생각을 해왔다. 함수형 프로그래밍은 일종의 커링함수 만들어가는 과정과 같이 재미있는 것이라 생각했다.\n커링을 모르는 사람을 위해 설명을 하자면\n커링은 n개의 인자를 가진 함수를 변형하여 하나의 인자를 받는 n개의 함수로 만드는 것이다.\n각 부분이 적용된 함수들은 체인을 만들게 되고 …","frontmatter":{"title":"자바스크립트에서의 커링","date":"03 August, 2015","categories":"javascript, translation"}},"recomendPost":{"nodes":[{"fields":{"slug":"/2020-03-12-은닉을 향한 자바스크립트의 여정/"},"frontmatter":{"title":"은닉을 향한 자바스크립트의 여정","categories":"javascript, ecmascript, private","date":"12 March, 2020"},"excerpt":"ECMAScript 클래스 필드(class field) 명세중에  즉  (이하 Private 속성) 가 있다. 클래스 필드 스펙은 Stage 3(Candidate)까지 올랐으니 아마 곧 Stage 4(Finished)를 거쳐 표준 스펙이 될 것이다. 사실 초기에 명세 문서를 봤을 때는 \"드디어 private이 생기는건가?\"하는 기대감과 \"문법이 좀 별론데\"라는 실망감이 있었을 뿐 뭔가 현실감은 없었다. 그렇게 시간이 흘러 기억 속에서 잊힌 채로 지내다가 얼마전에 타입스크립트 3.8에서 정식으로 지원한다는 소식을 들었고 이를 계기로…"},{"fields":{"slug":"/2018-10-24-reduce()를 이용해 순차적으로 프로미스를 해결하는 방법/"},"frontmatter":{"title":"reduce() 를 이용해 순차적으로 프라미스를 해결하는 방법","categories":"javascript, translation","date":"24 October, 2018"},"excerpt":"원글: Why Using reduce() to Sequentially Resolve Promises Works https://css-tricks.com/why-using-reduce-to-sequentially-resolve-promises-works/ (번역)reduce() 를 이용해 순차적으로 프라미스를 해결하는 방법  객체를 사용하지 않고 비동기 자바스크립트 코드를 작성하는 것은 눈을 감고 케이크를 굽는 것 만큼 어렵다. 물론 할 수 있지만 복잡해질 것이고 결국 화딱지가 나서 못 해먹을 것이다. 꼭 필요하다고 말할 순 없지만…"},{"fields":{"slug":"/2018-08-14-Vue.js에서의 다이나믹 컴포넌트 템플릿/"},"frontmatter":{"title":"Vue.js에서의 다이나믹 컴포넌트 템플릿","categories":"vue, translation","date":"14 August, 2018"},"excerpt":"원글: https://medium.com/scrumpy/dynamic-component-templates-with-vue-js-d9236ab183bb Vue.js에서의 다이나믹 컴포넌트 템플릿 컴포넌트들이 항상 같은 구조로 되어 있진 않다. 그리고 때론 관리해야할 상태들이 많을때도 있다. 이런 문제는 비동기적인 방법으로 해결할 수도 있다. 유즈 케이스 스크럼피는 알림, 댓글, 첨부 파일 등에서 컴포넌트 템플릿을 사용한다. 우선 댓글 부분을 살펴보면서 정확히 어떤 것을 말하는지 알아보자. 최근의 댓글은 더 이상 단순한 텍스트 필드가…"},{"fields":{"slug":"/2018-02-23-ECMAScript 스펙 톺아보기: Primitive/"},"frontmatter":{"title":"ECMAScript 스펙 톺아보기: Primitive","categories":"javascript","date":"23 February, 2018"},"excerpt":"ECMAScript 스펙 톺아보기: Primitive 프리미티브에 대한 의문 현재 팀 내부에서는 시니어들이 팀 인력 채용 프로세스를 개선하고 있다. 프로세스 중에서도 현재는 필기시험 문제를 재출제하는 중인데 이게 생각보다 쉽지 않아 매일 매일 서로 의견이 분분하다. 그러던 어느 날 프리미티브에 대한 의견을 나누던 중 자바스크립트의 프리미티브를 객체 같이 사용된다고 설명해도 되느냐 안되느냐의 문제를 놓고 토론을 하게 되었는데 내 의견은 표면적으로 객체처럼 사용할 수 있기에 객체 같이 취급된다고 표현해도 된다는 의견이었고 다른 한 멤…"}]},"recentPost":{"nodes":[{"fields":{"slug":"/2020-07-27-1/"},"frontmatter":{"title":"이벤트 핸들러를 대하는 개발자의 자세","categories":"frontend, refactoring","date":"27 July, 2020"},"excerpt":"이벤트 핸들러는 UI를 개발할 때면 항상 사용된다. 웹뿐만 아니라 네이티브 어플리케이션에서도 약간의 차이가 있을뿐 거의 동일한 추상이 사용된다. 자주 사용되는 만큼 중요하지만 사실 너무 자주 사용되다 보니 가볍게 생각하며 습관적으로 고민 없이 좋지 않은 코드를 만들곤 한다. 자주 사용된다는 건 코드의 양적인 비중도 크다는 것이고 그만큼 조금만 더 신경 쓴다면 큰 효과를 볼 수도 있다. 이런 이벤트 핸들러를 어떻게 다루면 좋은지에 대해 간략하게 정리해봤다. 이벤트 핸들러라고 해서 꼭 DOM 이벤트에만 해당하는 것은 아니며 모듈 간의…"},{"fields":{"slug":"/2020-06-15-유용한테스트케이스를위한개발자의자세/"},"frontmatter":{"title":"유용한 테스트 케이스를 위한 개발자의 자세","categories":"test, tdd, unittest","date":"15 June, 2020"},"excerpt":"각종 커뮤니티에 주기적으로 등장하는 \"private 메서드를 테스트하려면 어떻게 하나요?\" 혹은 \"private 메서드를 테스트해야 하나요?\" 와 같은 질문을 보면서 언젠가는 관련해서 정리해봐야겠다고 생각했었는데 꽤 시간이 흘러 이 내용으로 글을 써본다. 주제 자체는 간단한 편이지만 사람마다 생각이 다른 것 같다. 특히 해외 개발자들의 의견이 분분한 것 같다. 사실 이 문제는 효과적인 테스트 케이스(이하 TC)란 무엇인가란 질문과 비슷하다. private 메서드는 객체지향적인 관점에서 생각한 것이고 노출된 함수 내부에서 접근하는,…"},{"fields":{"slug":"/2020-03-24-개발자와명상/"},"frontmatter":{"title":"개발자와 명상","categories":"life, meditation, productivity","date":"24 March, 2020"},"excerpt":"언젠가부터 여러 가지 걱정들로 머릿속이 복잡해지고 있었다. 이런 상황에서는 운동과 독서가 해결책이 될 수 있는데 운동은 평소 꾸준히 하는 편이었고 독서량을 많이 늘려봤다. 기술 서적이 아닌 내 삶에 필요하다고 생각하는 주제의 책들을 읽었다. 하지만 뭔가 부족했다. “생각을 정리할 시간이 필요하다.”라고 생각했지만, 막상 생각을 정리할 시간을 내기 힘들었다. 지금 생각해보면 그게 힘들었던 건지 생각을 직접적으로 대면하기 두려웠었는지 모르겠다.  몸뚱아리는 현재에 있었지만, 정신과 생각은 미래와 과거를 수없이 오갔다.  마음이 평화롭…"},{"fields":{"slug":"/2020-03-12-은닉을 향한 자바스크립트의 여정/"},"frontmatter":{"title":"은닉을 향한 자바스크립트의 여정","categories":"javascript, ecmascript, private","date":"12 March, 2020"},"excerpt":"ECMAScript 클래스 필드(class field) 명세중에  즉  (이하 Private 속성) 가 있다. 클래스 필드 스펙은 Stage 3(Candidate)까지 올랐으니 아마 곧 Stage 4(Finished)를 거쳐 표준 스펙이 될 것이다. 사실 초기에 명세 문서를 봤을 때는 \"드디어 private이 생기는건가?\"하는 기대감과 \"문법이 좀 별론데\"라는 실망감이 있었을 뿐 뭔가 현실감은 없었다. 그렇게 시간이 흘러 기억 속에서 잊힌 채로 지내다가 얼마전에 타입스크립트 3.8에서 정식으로 지원한다는 소식을 들었고 이를 계기로…"}]}},"pageContext":{"slug":"/2015-08-03-자바스크립트에서의 커링/","categoriesRegex":"/javascript|translation/g"}},"staticQueryHashes":["1529427419","1755485493","2738229898","993531770"]}