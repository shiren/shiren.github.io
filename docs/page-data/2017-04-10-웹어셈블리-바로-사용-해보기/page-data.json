{"componentChunkName":"component---src-templates-post-tsx","path":"/2017-04-10-웹어셈블리-바로-사용-해보기/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>원글: <a href=\"https://tutorials.technology/tutorials/11-webassembly-initial-steps-tutorial.html\">https://tutorials.technology/tutorials/11-webassembly-initial-steps-tutorial.html</a></p>\n</blockquote>\n<h2>소개</h2>\n<p>웹어셈블리는 미래에 매우 유용하게 사용될 새롭고도 새로운 표준이다. 이 기술은 W3C 커뮤니티 그룹에서 애플, 구글 , 마이크로소프트 그리고 모질라와 함께 개발되고 있다. 이 프로젝트의 초기 시점인 지금은 고 수준의 언어가 아닌 C/C++로 초점이 맞춰져 있고 웹어셈블리의 약어는 <strong>wasm</strong> 이며 자바스크립트와 브라우저의 개선 사항 중 하나이다. 웹어셈블리는 자바스크립트를 대체하려는 목적이 아니며 사실 보완하려고 나왔다. 웹어셈블리를 사용하려면 크롬 카나리 버전이나 파이어폭스 나이틀리 버전을 설치해야 한다. 마이크로소프트의 엣지 프리뷰와 사파리도 곧 이 기술을 적용할 예정이다. 가장 큰 이점은 빠른 실행이지만 웹 프로그래밍이 더 이상 자바스크립트만으로 제한되지 않는다는 장점도 있다. 이 튜토리얼에서는 브라우저가 웹어셈블리를 실행할 수 있게 세팅하고 웹어셈블리를 컴파일할 수 있도록 필요한 도구들을 컴파일할 것이며 최종적으로 웹어셈블리가 printf를 수행하는 Hello world 예제를 만들어 볼 것이다.</p>\n<p>자 시작해보자!</p>\n<h2>스텝 1: 데모를 확인할 브라우저를 설치한다.</h2>\n<p>현재 크롬 카나리는 리눅스를 지원하지 않으니 파이어폭스 나이틀리를 설치한다. 맥이나 윈도우 유저는 크롬 카나리를 이용할 것을 권장한다. 파이어폭스를 실행할 때는 절대 경로를 이용해서 실행해야 한다. 그렇지 않으면 인스톨 된 일반 파이어폭스가 실행된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd\nwget https://archive.mozilla.org/pub/firefox/nightly/latest-mozilla-central/firefox-53.0a1.en-US.linux-x86_64.tar.bz2\ntar xf firefox-53.0a1.en-US.linux-i686.tar.bz2\ncd firefox\n./firefox</code></pre></div>\n<p>상태바를 확인해서 파이어폭스 나이틀리 버전이 실행되었는지 확인한다. 브라우저가 웹어셈블리를 사용할 수 있도록 설정한다.</p>\n<ul>\n<li>파이어폭스의 경우 주소창에 <strong>about:config</strong> 을 입력해 이동을 한다. 이동하게 되면 경고 얼럿이 뜨는데 수락해 주고 서치바에서 wasm을 입력하고 <strong>javascript.options.wasm</strong> 을 더블클릭해 값이 true가 되도록 바꾼다. 그리고 브라우저를 다시 시작한다.</li>\n<li>크롬 카나리의 경우 주소창에 <strong>chrome://flags</strong> 를 입력하고 <strong>Experimental WebAssembly</strong> 항목이 나올 때까지 스크롤하고 링크를 클릭해 활성화 한 뒤 브라우저를 재실행 한다.(역: 번역 시점 최신 버전인 카나리 59 버전에서는 별도의 설정을 안 해도 된다.)</li>\n</ul>\n<p><a href=\"http://webassembly.org/demo/\">여기</a>에서 웹어셈블리의 데모를 확인할 수 있다.</p>\n<h2>스텝 2: 우분투의 요구 사항</h2>\n<p>우분투에서 binaryen 툴체인을 이용하려면 몇 가지 라이브러리를 컴파일해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sudo apt-get install git cmake make ninja-build</code></pre></div>\n<p>웹어셈블리가 지원되는 LLVM을 빌드 하려면 최소한 3.4.4 버전 이상의 cmake가 필요하다. 하단에 부록 파트를 살펴보면 소스 코드를 이용해 cmake를 설치하는 방법을 찾을 수 있다.</p>\n<h2>스텝 3: 인프라스트럭처와 툴체인 컴파일</h2>\n<p>일단 LLVM이 웹어셈블리를 지원하도록 준비해야 한다. 만약 오래된 버전의 cmake를 사용하고 있다면 이 튜토리얼의 하단에 위치한 부록 파트를 확인한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git clone http://llvm.org/git/llvm.git\ncd llvm/tools\ngit clone http://llvm.org/git/clang.git\ncd ../projects\ngit clone http://llvm.org/git/compiler-rt.git\ncd ..\nmkdir build\ncd build\ncmake -G Ninja -DLLVM_EXPERIMENTAL_TARGETS_TO_BUILD=WebAssembly ..\nninja\nninja install</code></pre></div>\n<p>만약 닌자가 메모리를 너무 많이 사용하는 경우 아래의 항목 살펴봐라(컴파일을 느리게 하는 원인들이다.)</p>\n<ul>\n<li>스왑 스페이스의 사용을 비활성화해 시스템이 멈추는것을 피한다 <strong>sudo swapoff -a</strong></li>\n<li><strong>echo $MAKEFLAFS</strong> 의 내용을 확인해 얼마나 많은 프로세서가 컴파일할 때 사용되는지 확인한다. <strong>ninja -j1</strong> 을 이용하는 것을 추천한다.</li>\n<li>메모리를 적게 사용하는 골드 링커를 이용한다. 골드 링커를 이용하려면 <strong>id(id.bfd)</strong> 의 심벌릭 링크를 <strong>id.gold</strong> 로 변경한다.</li>\n</ul>\n<p><strong>id.bfg*를 *id.gold</strong> 로 변경하기 위해선 아래의 과정을 거친다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ls -lah /usr/bin/ld # check which ld you are using\nsudo rm /usr/bin/ld\nsudo ln -s /usr/bin/ld.gold /usr/bin/ld\nls -lah /usr/bin/ld # check that you are using gold linker</code></pre></div>\n<p>스왑 스페이스를 다시 켜려면 <strong>sudo sudo swapon -a</strong> 를 입력한다. 그리고 이제 <strong>Binaryen</strong> 을 컴파일한다. <strong>Binaryen</strong> 는 최소 세 개의 필요한 바이너리들을 제공한다.</p>\n<ul>\n<li>asm.js를 컴파일 하기 위한 <strong>asm2wasm</strong></li>\n<li>LLVM 웹어셈블리 백엔드 <code class=\"language-text\">.s</code> 아웃풋 파일을 컴파일 하기 위한 <strong>s2wasm</strong></li>\n<li>Rust MIR를 컴파일 하기 위한 <strong>mir2wasm</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd\ngit clone https://github.com/WebAssembly/binaryen\ncd binaryen\ncmake .\nmake</code></pre></div>\n<p>컴파일이 끝나면 bin 디렉터리에 필요한 실행파일들을 얻게 된다. 필요에 따라 <strong>sudo make install</strong> 을 수행할 수 있다. 마지막으로 WABT(The WebAssembly Binary Toolkit)을 아래의 순서에 따라 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git clone https://github.com/WebAssembly/wabt.git\ncd wabt\nmkdir build\ncd build\ncmake -G Ninja -DBUILD_TESTS=OFF ..\nninja\nsudo ninja install</code></pre></div>\n<h2>스텝 4: HELLO WORLD 예제</h2>\n<p>웹어셈블리 Hello world 어플리케이션을 실행하려면 html 템플릿과 필요한 코드를 준비해야 한다. 아래의 <strong>hello_world</strong> 라는 새 디렉터리를 만들고 그 안에 아래의 html 코드를 index.html로 저장한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\">&lt;!DOCTYPE html></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Content-Type<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/html; charset=utf-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Hello world<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'WebAssembly'</span> <span class=\"token keyword\">in</span> window<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello_world.wasm'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Fetch the binary</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">arrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">buffer</span> <span class=\"token operator\">=></span> WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Get a Module from the buffer</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n              <span class=\"token comment\">// Get an Instance of the Module</span>\n              <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebAssembly<span class=\"token punctuation\">.</span>Instance</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"btn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count function result is : \"</span> <span class=\"token operator\">+</span> instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        output<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"Your browser doesn't support Web Assembly. You may need \"</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">\"to enable it in your browser's flags.\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>btn<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Click me to execute hello world!<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>그리고 C를 이용해 출력해 보자, 아래의 내용을 hello_world.c로 저장한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 컴파일을 수행한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">clang -emit-llvm --target=wasm32 -S hello_world.c\nllc hello_world.ll -march=wasm32\ns2wasm hello_world.s &gt; hello_world.wast\nwast2wasm -o hello_world.wasm hello_world.wast</code></pre></div>\n<h2>스텝 5: 예제를 열어본다.</h2>\n<p>드디어 이번 단계에서 파이어폭스를 통해 예제 파일을 열어본다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd hello_world\npython -m SimpleHTTPServer 8000</code></pre></div>\n<p>혹은 <strong>wasm-cli</strong> 를 이용해 wasm 파일만 테스트 해볼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install -g wasm-cli\nwasm hello_world.wasm</code></pre></div>\n<p><a href=\"http://localhost:8000\">http://localhost:8000</a> 을 파이어폭스 주소창에 입력해 예제를 열어본다.</p>\n<h2>부록</h2>\n<h3>Error libgtk-3.so.0: cannot open shared object file: No such file or directory</h3>\n<p>파이어폭스 53 버전을 실행하려 할때 아래의 에러를 만날 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">XPCOMGlueLoad error for file /home/parallels/firefox-32/libmozgtk.so:\nlibgtk-3.so.0: cannot open shared object file: No such file or directory\nCouldn&#39;t load XPCOM.</code></pre></div>\n<p>이럴땐</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">locate libgtk-3.so.0</code></pre></div>\n<p>위와 같이 입력해 아래의 결과가 출력이 된다면</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/usr/lib/x86_64-linux-gnu/libgtk-3.so.0\n/usr/lib/x86_64-linux-gnu/libgtk-3.so.0.1000.8</code></pre></div>\n<p>64비트 버전의 모질라 파이어폭스를 다운로드 해야한다.</p>\n<h3>Error: GDK_BACKEND does not match available displays</h3>\n<p>위와 같은 에러 메세지를 만나면 DISPLAY 환경 변수를 셋팅해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">export DISPLAY=:0.0</code></pre></div>\n<p>위의 내용을 <strong>.bashrc</strong> 나 <strong>.zshrc</strong> 에 추가해 언제나 값이 설정되도록 한다.</p>\n<h3>Error: CMake 3.4.3 or higher is required. You are running version 3.2.2</h3>\n<p>이 에러를 해결하려면 cmake를 다운로드해 컴파일 해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">wget https://cmake.org/files/v3.7/cmake-3.7.0.tar.gz\ntar -xf cmake-3.7.0.tar.gz\ncd cmake-3.7.0\n./bootstrap\nmake\nsudo make install</code></pre></div>\n<h3>Error: Uncaught ReferenceError: Wasm is not defined</h3>\n<p><strong>Wasm.instantiateModule()</strong> 대신 <strong>WebAssembly.instance()</strong> 를 사용한다.</p>\n<h3>Error: Uncaught Error: memory access out of bounds</h3>\n<p>이 이슈에 대해서 다시 업데이트할 예정이지만 이 문제는 간혹 <strong>s2wasm</strong> 을 사용할 때 <strong>–allocate-stack</strong> 옵션으로 해결이 될 때가 있다.</p>\n<h2>역자 부록(맥과 크롬 카나리 환경을 위한 팁)</h2>\n<ul>\n<li>스텝 3의 첫번째, LLVM을 설치하기 전에 ninja-build를 설치해야 한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">brew install ninja</code></pre></div>\n<ul>\n<li>LLVM은 다운로드하고 컴파일 하는 과정이 정말 오래 걸린다.</li>\n<li>역자의 경우 스텝 3의 첫번째 LLVM 설치하는 부분에서 <strong>ninja install</strong> 은 <strong>sudo ninja install</strong> 로 권한을 주고 설치해야 했다.</li>\n<li>binaryen 을 make 로 빌드한뒤 <strong>sudo make install</strong> 로 인스톨 해야 툴들의 경로가 제대로 잡힌다.</li>\n</ul>","fields":{"slug":"/2017-04-10-웹어셈블리 바로 사용 해보기/"},"excerpt":"원글: https://tutorials.technology/tutorials/11-webassembly-initial-steps-tutorial.html 소개 웹어셈블리는 미래에 매우 유용하게 사용될 새롭고도 새로운 표준이다. 이 기술은 W3C 커뮤니티 그룹에서 애플, 구글 , 마이크로소프트 그리고 모질라와 함께 개발되고 있다. 이 프로젝트의 초기 시점인 지금은 고 수준의 언어가 아닌 C/C++로 초점이 맞춰져 있고 웹어셈블리의 약어는 wasm 이며 자바스크립트와 브라우저의 개선 사항 중 하나이다. 웹어셈블리는 자바스크립트를 대체…","frontmatter":{"title":"웹어셈블리 바로 사용 해보기","date":"10 April, 2017","categories":"webassembly, translation"}},"recomendPost":{"nodes":[{"fields":{"slug":"/2018-10-23-reduce()를 이용해 순차적으로 프로미스를 해결하는 방법/"},"frontmatter":{"title":"reduce() 를 이용해 순차적으로 프라미스를 해결하는 방법","categories":"javascript, translation","date":"23 October, 2018"},"excerpt":"원글: Why Using reduce() to Sequentially Resolve Promises Works https://css-tricks.com/why-using-reduce-to-sequentially-resolve-promises-works/ (번역)reduce() 를 이용해 순차적으로 프라미스를 해결하는 방법  객체를 사용하지 않고 비동기 자바스크립트 코드를 작성하는 것은 눈을 감고 케이크를 굽는 것 만큼 어렵다. 물론 할 수 있지만 복잡해질 것이고 결국 화딱지가 나서 못 해먹을 것이다. 꼭 필요하다고 말할 순 없지만…"},{"fields":{"slug":"/2018-08-14-Vue.js에서의 다이나믹 컴포넌트 템플릿/"},"frontmatter":{"title":"Vue.js에서의 다이나믹 컴포넌트 템플릿","categories":"vue, translation","date":"14 August, 2018"},"excerpt":"원글: https://medium.com/scrumpy/dynamic-component-templates-with-vue-js-d9236ab183bb Vue.js에서의 다이나믹 컴포넌트 템플릿 컴포넌트들이 항상 같은 구조로 되어 있진 않다. 그리고 때론 관리해야할 상태들이 많을때도 있다. 이런 문제는 비동기적인 방법으로 해결할 수도 있다. 유즈 케이스 스크럼피는 알림, 댓글, 첨부 파일 등에서 컴포넌트 템플릿을 사용한다. 우선 댓글 부분을 살펴보면서 정확히 어떤 것을 말하는지 알아보자. 최근의 댓글은 더 이상 단순한 텍스트 필드가…"},{"fields":{"slug":"/2016-08-23-도커로 노드앱을 구축하며 배운것들/"},"frontmatter":{"title":"도커로 노드앱을 구축하며 배운것들","categories":"javascript, docker, nodejs, translation","date":"23 August, 2016"},"excerpt":"도커로 노드 앱을 구축하며 배운것들 원문\nhttp://jdlm.info/articles/2016/03/06/lessons-building-node-app-docker.html\nby John Lees-Miller 도커를 이용해 노드제이에스 어플리케이션을 개발 하고 배포 하면서 어렵게 배운 팁과 트릭을 공유하고자 한다. 이 튜토리얼 아티클에서는 socket.io chat example을 이용해 기초부터 프로덕션에 응용 가능한 상태까지 될 수 있으면 쉽게 이해할 수 있도록 설명하려 한다. 아래와 같은 내용을 다룬다. 도커를 이용해 노드…"},{"fields":{"slug":"/2016-02-18-네이티브 애드온으로 Node.js의 성능을 향상 시키는 방법/"},"frontmatter":{"title":"네이티브 애드온으로 Node.js의 성능을 향상 시키는 방법","categories":"javascript, nodejs, translation","date":"18 February, 2016"},"excerpt":"네이티브 애드온으로 Node.js의 성능을 향상 시키는 방법 원문\nhttps://medium.com/developers-writing/how-to-get-a-performance-boost-using-node-js-native-addons-fd3a24719c85#.buw8o2rrn 이상한그림 아마도 천 번 정도는 들어봤을 법한 Node.js(이하 노드)의 네이티브 모듈에 대해 그것이 무엇이고 왜 고려되어야 할지 다뤄본다. 노드 애드온은 C나 C++로 작성된 동적 링크 공유 객체로 노드의  함수에 의해 로드 되어 일반적인 노드 모듈…"}]},"recentPost":{"nodes":[{"fields":{"slug":"/2020-07-27-1/"},"frontmatter":{"title":"이벤트 핸들러를 대하는 개발자의 자세","categories":"frontend, refactoring","date":"27 July, 2020"},"excerpt":"이벤트 핸들러는 UI를 개발할 때면 항상 사용된다. 웹뿐만 아니라 네이티브 어플리케이션에서도 약간의 차이가 있을뿐 거의 동일한 추상이 사용된다. 자주 사용되는 만큼 중요하지만 사실 너무 자주 사용되다 보니 가볍게 생각하며 습관적으로 고민 없이 좋지 않은 코드를 만들곤 한다. 자주 사용된다는 건 코드의 양적인 비중도 크다는 것이고 그만큼 조금만 더 신경 쓴다면 큰 효과를 볼 수도 있다. 이런 이벤트 핸들러를 어떻게 다루면 좋은지에 대해 간략하게 정리해봤다. 이벤트 핸들러라고 해서 꼭 DOM 이벤트에만 해당하는 것은 아니며 모듈 간의…"},{"fields":{"slug":"/2020-06-15-유용한테스트케이스를위한개발자의자세/"},"frontmatter":{"title":"유용한 테스트 케이스를 위한 개발자의 자세","categories":"test, tdd, unittest","date":"15 June, 2020"},"excerpt":"각종 커뮤니티에 주기적으로 등장하는 \"private 메서드를 테스트하려면 어떻게 하나요?\" 혹은 \"private 메서드를 테스트해야 하나요?\" 와 같은 질문을 보면서 언젠가는 관련해서 정리해봐야겠다고 생각했었는데 꽤 시간이 흘러 이 내용으로 글을 써본다. 주제 자체는 간단한 편이지만 사람마다 생각이 다른 것 같다. 특히 해외 개발자들의 의견이 분분한 것 같다. 사실 이 문제는 효과적인 테스트 케이스(이하 TC)란 무엇인가란 질문과 비슷하다. private 메서드는 객체지향적인 관점에서 생각한 것이고 노출된 함수 내부에서 접근하는,…"},{"fields":{"slug":"/2020-03-24-개발자와명상/"},"frontmatter":{"title":"개발자와 명상","categories":"life, meditation, productivity","date":"24 March, 2020"},"excerpt":"언젠가부터 여러 가지 걱정들로 머릿속이 복잡해지고 있었다. 이런 상황에서는 운동과 독서가 해결책이 될 수 있는데 운동은 평소 꾸준히 하는 편이었고 독서량을 많이 늘려봤다. 기술 서적이 아닌 내 삶에 필요하다고 생각하는 주제의 책들을 읽었다. 하지만 뭔가 부족했다. “생각을 정리할 시간이 필요하다.”라고 생각했지만, 막상 생각을 정리할 시간을 내기 힘들었다. 지금 생각해보면 그게 힘들었던 건지 생각을 직접적으로 대면하기 두려웠었는지 모르겠다.  몸뚱아리는 현재에 있었지만, 정신과 생각은 미래와 과거를 수없이 오갔다.  마음이 평화롭…"},{"fields":{"slug":"/2020-03-12-은닉을 향한 자바스크립트의 여정/"},"frontmatter":{"title":"은닉을 향한 자바스크립트의 여정","categories":"javascript, ecmascript, private","date":"12 March, 2020"},"excerpt":"ECMAScript 클래스 필드(class field) 명세중에  즉  (이하 Private 속성) 가 있다. 클래스 필드 스펙은 Stage 3(Candidate)까지 올랐으니 아마 곧 Stage 4(Finished)를 거쳐 표준 스펙이 될 것이다. 사실 초기에 명세 문서를 봤을 때는 \"드디어 private이 생기는건가?\"하는 기대감과 \"문법이 좀 별론데\"라는 실망감이 있었을 뿐 뭔가 현실감은 없었다. 그렇게 시간이 흘러 기억 속에서 잊힌 채로 지내다가 얼마전에 타입스크립트 3.8에서 정식으로 지원한다는 소식을 들었고 이를 계기로…"}]}},"pageContext":{"slug":"/2017-04-10-웹어셈블리 바로 사용 해보기/","categoriesRegex":"/webassembly|translation/g"}},"staticQueryHashes":["1529427419","1755485493","2738229898","993531770"]}