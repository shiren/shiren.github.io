{"componentChunkName":"component---src-templates-post-tsx","path":"/2016-03-23-웹개발자를-위한-크롬-개발자-도구/","result":{"data":{"markdownRemark":{"html":"<h3>웹 개발자를 위한 크롬 개발자 도구</h3>\n<h1>시작하면서</h1>\n<p>꼭 프론트엔드 개발자가 아니더라도 웹 개발을 하다 보면 한 번쯤은 크롬 개발자 도구를 사용해 봤을 거라 생각한다.\n크롬이 버전업할수록 크롬 개발자 도구 역시 나날이 발전해 왔고 현존하는 도구 중에는 최고의 웹 개발자 도구라고 말할 수 있다.\n예전 IE6에서 alert과 status로 디버깅을 했던 시절을 생각하면 정말 좋은 세상에 살고 있다는 생각이 든다.</p>\n<p>크롬 개발자 도구에는 정말 많은 기능들이 추가되었고 별도의 도구로 사용했던 기능들도 내부에 편입되어 더욱 유용해졌다. 심지어 로컬파일를 에디팅하고 저장해서 바로바로 브라우저에서 확인해 보는 에디터의 기능도 추가되었다. 이런 기능들이 모두 필요하지는 않을 수 있지만, 몇 가지는 꼭 알았으면 하는 기능들이 있다. 이 글은 전문 프론트엔드 개발자가 아닌 웹(또는 서버)개발자를 대상으로 자바스크립트 디버깅을 할 때 알아두면 좋을 만한 기능들을 소개한다.</p>\n<h1>유용한 셋팅</h1>\n<p>도구가 발전함에 따라 셋팅창에서 설정할 수 있는 내용도 많아졌다. 몇 가지 유용한 셋팅에 대해 알아보자.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/389021/15638038/c720d84e-2656-11e6-801b-ae520d10f9fc.png\" alt=\"셋팅켜기이미지\"></p>\n<p>도구에서 F1키를 누르거나 메뉴에서 Settings를 클릭해서 셋팅창을 열 수 있다.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/389021/15638039/c723697e-2656-11e6-8837-2cfe0172b6bb.png\" alt=\"셋팅창\"></p>\n<h2>다크테마 적용</h2>\n<p>개인적으로도 그렇지만 IDE나 에디터, 터미널 등 개발 환경을 다크 테마 위주로 셋팅하는 취향을 가진 개발자들이 많을 것으로 생각한다.\n이런 취향을 가진 개발자를 위해 크롬 개발자 도구도 다크 테마로 전환할 수 있다.\n다크 테마는 <strong>General - Appearance - Theme</strong> 항목에서 변경 할 수 있다.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/389021/15638042/c724bc84-2656-11e6-80d5-4673236ae555.png\" alt=\"다크테마로전환\"></p>\n<p>Default로 설정되어 있는것을 클릭해서 Dark로 바뀌본다.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/389021/15638040/c723bb68-2656-11e6-8825-4bf328c3f7d5.png\" alt=\"테크테마완성\"></p>\n<p>이제 있어보이는 다크 테마가 적용되어 뭘해도 멋있어 보인다.</p>\n<h2>Disable cache</h2>\n<p>아마 대부분 아는 옵션일 것이라 생각되지만 의외로 이 옵션을 몰라서 매번 <strong>인터넷 사용 기록 삭제</strong>로 캐시를 지워 주는 개발자가 많다.\n<strong>General - Disable cache</strong> 옵션을 체크해두면 개발자 도구가 열린 상태에선 캐시가 적용되지 않는다.</p>\n<h2>Blackboxing</h2>\n<p>언제 부턴인가 셋팅창에 자리를 잡기 시작한 Blackboxing 옵션.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/389021/15638041/c723d27e-2656-11e6-9ce7-59f31378c58d.png\" alt=\"Blackboxing\"></p>\n<p>자바스크립트 디버깅에 아주 유용한 기능이다. 코드량이 많을수록 빛을 발하는데, 디버거로 에러 스택을 추적하는 과정에 불필요한 라이브러리 코드를 건너뛸 수 있다.</p>\n<p>제이쿼리를 사용한 자바스크립트 코드를 디버깅하면 아래와 같은 콜 스택 정보를 볼 수 있다.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/389021/15638043/c7265b70-2656-11e6-96ce-46a4988c9640.png\" alt=\"불필요한 jQuery, Backbone 콜스택정보\"></p>\n<p>여기서 실제 서비스에서 작성한 코드는 app.js 파일 하나인데 프레임웍정보에 가려 정작 필요한 정보를 찾기가 힘들다. 블랙박싱옵션으로 제이쿼리나 언더스코어같이 사용은 하지만 직접 개발한 내용은 아니라서 굳이 디버깅시에 보일 필요가 없는 프레임웍들의 코드를 숨겨줄 수 있다.</p>\n<p>간단하게 <strong>Add pattern</strong> 버튼으로 블랙박싱할 자바스크립트 파일을 추가만 하면 앞으로는 귀찮던 몇개의 작업을 피할 수 있게된다.</p>\n<p><strong>Blackbox content scripts</strong> 체크박스는 크롬 익스텐션의 스크립트 파일들을 블랙박싱해주는 기능으로 항상 체크해두는게 좋다</p>\n<h1>Source</h1>\n<p>소스탭은 자바스크립트를 디버깅할때 주로 사용하게 된다. 웹페이지에 로드된 자바스크립트 파일을 확인 할 수 있고 코드의 스탭별 디버깅이나 변수의 값을 확인하는 등의 작업을 할 수 있다.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/389021/15638044/c740e954-2656-11e6-91c7-35dea262f239.png\" alt=\"소스탭\"></p>\n<h2>Command + P(Ctrl + P)</h2>\n<p>개발자들이 많이 사용하는 서브라임텍스트에는 \"Go to anything\"이라는 기능이 있다. 프로젝트 내의 파일을 검색하여 파일 이동을 쉽게 지원해주는 기능인데 서브라임텍스트에서 선보인 이후 많은 에디터들이 같은 기능을 지원하게 된다. 이 기능을 개발자도구에서도 지원한다.</p>\n<p>소스탭에서 <strong>Command + P</strong>를 입력하면 팝업이 열리게 되는데 찾고자하는 파일의 이름을 타이핑하면 자동완성이 지원되어 원하는 파일을 쉽게 찾게 된다.</p>\n<p>웹페이지에 로드된 자바스크립트 파일뿐아니라 CSS, HTML, 이미지파일도 검색이 된다.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/389021/15638048/c7469e80-2656-11e6-93e3-4b26db3f8525.png\" alt=\"go to anything\"></p>\n<p>파일 찾고 열어주는것 외에 특정 파일이 로드된 상태에서 <strong>\":1\"</strong>을 입력하면 코드의 1번 라인으로 포커스를 이동해 준다.\n이런 방식의 라인 이동은 VIM을 조금 사용해 봤던 개발자라면 익숙한 기능이다.</p>\n<h2>디버깅 컨트롤</h2>\n<p>다른 환경의 디버깅 도구와 마찬가지로 크롬 개발자 도구도 코드를 스텝별로 디버깅 하는 기능을 지원한다.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/389021/15638047/c7457fb4-2656-11e6-9d43-1502ad9ff6ad.png\" alt=\"디버깅컨트롤툴\"></p>\n<p>디버깅을 컨트롤 하는 패널에는 스텝을 다룰수 있는 버튼외에 브렉포인트관련 도구와 Async 체크박스가 있다.\n해당 버튼들은 다른 환경의 디버깅 도구를 다뤄본 사람이라면 금방 적응할만한 UI를 가지고 있다.</p>\n<ul>\n<li><em>Pause/Continue, F8</em>: 첫 번째 버튼은 평소에는 Pause 버튼 상태인데 브렉포인트가 잡힌 상태에선 Continue 버튼이 된다. 다른 브렉포인트가 잡힐 때까지 코드를 진행시킨다.</li>\n<li><em>Step over, F10</em>: 스텝 오버는 코드 라인을 한 스탭 진행하는데 현재 실행 라인에 함수 실행 코드가 있다면 함수는 실행하는데 이때 함수안의 코드로는 진입하지 않는다. 즉 라인의 함수를 실행만 하게 된다.</li>\n<li><em>Step into, F11</em>: 스텝 인투는 스텝 오버와 다르게 현재 실행 라인의 코드에 함수가 있다면 함수안의 첫 번째 코드로 진입해 들어가 다시 하나씩 라인별로 코드를 실행할 수 있다.</li>\n<li><em>Step out, SHIFT+F11</em>: 스텝 인투로 들어온 함수를 끝까지 실행하고 밖으로 빠져나와 해당 함수를 실행한 함수로 돌아간다.</li>\n<li><em>Toggle breakpoints</em>: 브렉포인트를 끄거나 켤수 있다.</li>\n<li><em>Pause on exception</em>: 자바스크립트 예외가 발생하면 해당 위치에 브렉포인트를 잡아준다</li>\n<li><em>Capture async stack trace</em>: 함수의 비동기 호출을 추적한다.</li>\n</ul>\n<h2>Watch</h2>\n<p>Watch 패널은 디버깅 도중에 살펴볼 변수나 객체를 미리 등록해서 한 번에 확인할 수 있게 해준다.\n<strong>\"+\"</strong> 버튼을 누르고 자바스크립트에서 변수명 혹은 함수 실행 등 자바스크립트로 표현 가능한 표현식을 입력한다.</p>\n<p>브렉포인트가 잡힌 상태에서만 정상적으로 동작하게 되는데 디버깅 도중 현재 코드 스텝의 스코프에서 자바스크립트의 표현식에 해당되는 내용을 보여준다.\n자바스크립트 문법에만 맞는다면 무엇이든 허용된다.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/389021/15638045/c74546fc-2656-11e6-9647-2e702d19c17d.png\" alt=\"Watch\"></p>\n<h2>Call Stack</h2>\n<p>콜스택 패널에서는 현재 스텝의 함수 실행 콜스택을 보여준다.\n디버깅 컨트롤 툴에서 async 체크 박스가 체크되어있다면 여기에서 비동기 호출 콜백들도 볼 수 있다.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/389021/15638046/c7457b04-2656-11e6-9bb9-7681d4576516.png\" alt=\"콜스택\"></p>\n<p>각 항목을 클릭해서 해당라인의 코드를 살펴 볼수도 있다.</p>\n<h2>Scope</h2>\n<p>Scope는 일종에 자동 Watch라고 생각하면 된다. 자바스크립트의 펑션 스코프를 기반으로 글로벌 스코프부터 현재 라인에 해당되는 스코프까지의\n변수들을 보여준다. this와 arguments의 내용들도 볼 수가 있는데 정확히 말하자면 Excution Context의 내용들을 보여준다.\n순간순간 매우 유용한 정보들을 제공해준다.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/389021/15638049/c74a476a-2656-11e6-9d45-1c506e512456.png\" alt=\"Scope\"></p>\n<h2>break point</h2>\n<p>크롬 개발자 도구에선 여러 종류의 브렉포인트를 걸 수 있게 되었다.\n도구 내에 코드 라인의 거터를 통해서 지정할 수 있을 뿐 아니라 DOM의 특정 상황이나 Ajax 통신에도 브렉포인트를 걸 수 있다.</p>\n<h3>브렉 포인트 걸기</h3>\n<p>웹페이지에 로드된 자바스크립트 파일을 열고 코드 화면의 특정 라인의 커터를 클릭하면 쉽게 브렉포인트를 잡을 수 있다.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/389021/15638050/c762a5c6-2656-11e6-8314-12d4afd70a0f.png\" alt=\"브렉포인트걸기\"></p>\n<p>물론 빈칸이 아닌 코드가 있는 라인을 클릭해야 브렉포인트가 정상적으로 잡힌다.\n코드라인에 브렉포인트가 잡히게 되면 브렉포인트 패널에도 해당 정보가 추가된다.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/389021/15638051/c767f5da-2656-11e6-8481-80662cf78cf7.png\" alt=\"브렉포인트패널\"></p>\n<p>체크박스로 브렉포인트를 온오프 할 수 있다.\n이후 자바스크립트 실행 도중 해당 라인을 지나게 되면 해당 라인부터 디버깅할 수 있다.</p>\n<h3>DOM Breakpoints</h3>\n<p>브렉포인트 바로 밑에 보면 DOM breakpoints라는 패널이 보이고 아무런 버튼도 존재하지 않는다.\nDOM 브렉포인트는 DOM 상에 특정한 변화를 주는 자바스크립트 작업이 일어났을 때 브렉포인트를 잡아주는데,\n소스 탭에서는 DOM 브렉포인트를 잡을 수 없고 엘리먼트 탭에서 잡아줘야 한다.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/389021/15638052/c768e116-2656-11e6-871d-a5eae277eade.png\" alt=\"엘리먼트탭 Dom break on\"></p>\n<p>앨리먼트탭에서 변화를 감지하길 원하는 특정 엘리먼트 위에 마우스를 대고 오른쪽 클릭을 하게 되면 컨텍스트 메뉴가 나오는데 메뉴 중 Break On이라는 항목이 있다\n그 하위 항목들이 바로 DOM 브렉포인트를 잡아주는 메뉴이다.</p>\n<ul>\n<li><em>Subtree Modifications</em>: 해당 노드의 자식노드의 변화, 예를들면 자식노드의 추가나 삭제를 하는 자바스크립트 코드에 브렉포인트를 잡아준다.</li>\n<li><em>Attributes Modificattion</em>: 해당 노드의 어트리뷰트를 변경하는 자바스크립트 코드에 브렉포인트를 잡아준다.</li>\n<li><em>Node Removal</em>: 해당노드를 삭제하는 자바스크립트 코드에 브렉포인트를 잡아준다.</li>\n</ul>\n<p>아무 웹페이지나 열고 Body 엘리먼트에 Subtree Modifications Dom 브렉포인트를 걸어주면 정신없이 브렉포인트가 잡히는 것을 볼 수 있다.</p>\n<h3>XHR Breakpoints</h3>\n<p>Ajax 요청이 발생되는 시점의 자바스크립트 코드에 브렉포인트를 걸어주는 패널이다.\n<strong>\"+\"</strong>를 눌러 API URL의 일부를 입력하면 해당 텍스트가 포함된 URL로 Ajax 요청이 발생하는 코드에 브렉포인트가 잡힌다.\n특정 API가 어떤 상황에서 호출되는지 찾아볼 때 유용하게 사용될 수 있다.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/389021/15638054/c76bfcac-2656-11e6-813a-6470e6476386.png\" alt=\"XHR Breakpoints\"></p>\n<h3>Event Listener Breakpoints</h3>\n<p>DOM과 BOM에서 발생되는 이벤트 리스너에 브렉포인트를 잡아주는 패널이다.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/389021/15638053/c76aab5e-2656-11e6-8211-2877b158ea14.png\" alt=\"EventListenerBreakpoints\"></p>\n<p>브라우저 상에서 발생하는 모든 이벤트 리스너를 잡아낼 수 있고 타이머 함수에 의해 실행되는 함수의 실행도 잡아낼 수 있다.\n크고 복잡해진 웹 어플리케이션에서는 때때로 이벤트 핸들러들이 꼬일 수가 있는데 그런 상황에서 매우 유용하게 사용된다.</p>\n<h1>Console</h1>\n<p>콘솔 창은 크롬 개발자 도구에서 아마도 제일 자주 사용되지 않을까 생각한다.\n자바스크립트 REPL의 역할도 하면서 브라우저 상의 각종 로그들을 볼 수 있다.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/389021/15638055/c77020fc-2656-11e6-972d-0226b8aca74b.png\" alt=\"콘솔\"></p>\n<h2>소스코드 찾기(Cmd+Opt+F, Ctrl+Shift+F)</h2>\n<p>콘솔 창에서 맥은 <strong>Command+Option+F</strong> 윈도우는 <strong>Ctrl+shift+f</strong>를 누르면 검색 창이 뜨게 되는데 여기서는 웹페이지의 모든 리소스의 내용을 검색하여 검색 결과를 보여준다.</p>\n<p><a href=\"19.png\">FIND</a>\n<img src=\"https://cloud.githubusercontent.com/assets/389021/15638056/c78342a4-2656-11e6-887a-2d48196a5e0e.png\" alt=\"FIND\"></p>\n<p>터미널의 grep과 비슷하게 로드된 리소스의 내용을 검색해준다. js 파일과 html 그리고 css 파일의 내용을 검색 해주는데 정규식 체크박스를 체크하고 정규식으로도 검색을 할 수 있다. 검색 결과를 클릭하면 해당 코드가 소스 패널에서 열린다.</p>\n<h2>Preserve Log</h2>\n<p>콘솔 창의 내용은 웹페이지가 다시 로드되거나 리프레시 되면 모두 사라지고 초기화되는데 콘솔 창의 Preserve Log의 체크박스를 체크해두면 페이지가 다시 로드돼도 콘솔 창의 로그 내용은 그대로 유지되게 된다.\n매번 페이지를 리로드 하면서 특정 조건을 달리해 로그를 비교해 볼때 유용하다.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/389021/15638057/c789b30a-2656-11e6-8c85-7c39281241a7.png\" alt=\"Preserve Log\"></p>\n<h1>커맨드 라인 API</h1>\n<p>커맨드 라인 API는 콘솔창이나 자바스크립트 코드 내에서 크롬 개발자 도구와 상호작용하는 API를 제공하고 그 외 추가적인 유용한 API를 제공한다.\n이중 몇 가지 유용한 API를 소개한다.</p>\n<h2>$0, $1, $2, $3, $4, $5</h2>\n<p>콘솔과 엘리먼트 탭이 상호작용하는 셀렉터이다 $0이 의미하는 것은 엘리먼트 탭에서 마지막으로 선택한 엘리먼트를 가리킨다.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/389021/15638059/c78d58e8-2656-11e6-9efa-6503a022ca6c.png\" alt=\"$0\"></p>\n<p>엘리먼트 탭에서 엘리먼트를 선택하게 되면 엘리먼트 태그 옆에 == $0이라고 표시해 주고 있다.\n참고 이미지에서는 Body 엘리먼트를 선택했는데 콘솔을 열어 $0을 입력해보면 body 엘리먼트가 표시되는 것을 확인할 수 있다.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/389021/15638060/c791db2a-2656-11e6-82bc-59b4eb109507.png\" alt=\"$0콘솔에서접근\"></p>\n<p>마치 해당 노드의 참조 변수를 자동으로 만들어 주는 것과 같아 실제로 자바스크립트의 변수처럼 $0을 사용할 수 있다.\n$0는 가장 최근 선택한 엘리먼트를 가리키게 되고 $1는 $0보다 이전 $2는 $1 이전에 선택한 엘리먼트를 가리키게 되는데 $5까지 접근할 수 있다.</p>\n<h2>$(), $$() 함수</h2>\n<p>$는 제이쿼리를 대표하는 함수 명인데, 웹페이지에서 제이쿼리를 사용하고 있지 않더라도 커맨드 라인 API의 $함수가 비슷한 기능을 제공해준다.\n물론 제이쿼리의 기능을 모두 지원하는 것은 아니고 엘리먼트를 탐색하는 기능만 지원한다.\n$는 엘리먼트 하나를 찾아주고 $$는 조건에 해당하는 엘리먼트를 모드 찾아준다.\n이미 눈치챈 사람이 있을지 모르겠지만 querySelector와 querySelectorAll 함수의 숏컷이라고 생각하면 된다.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/389021/15638058/c78c962e-2656-11e6-8ab0-47fc3028a793.png\" alt=\"$, $$\"></p>\n<h2>copy() 함수</h2>\n<p>copy 함수는 특정 내용을 클립보드에 복사해주는 기능을 한다. 엘리먼트에 해당하는 내용을 넘기면 outerHTML의 내용이 클립보드에 복사되어 어딘가에 붙여 넣을 수 있고,객체를 넘기면 해당 객체의 내용을 클립보드에 복사 하게 된다. 물론 문자열이나 숫자를 넘겨 클립보드에 복사 할 수도 있다.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/389021/15638061/c7928fa2-2656-11e6-9330-672314426fd5.png\" alt=\"copy()\"></p>\n<p>참고 이미지의 예제는 일반 객체를 카피함수에 넘겨 실행한뒤 곧바로 붙여넣기(C-v)해봤다.</p>\n<h2>inspect() 함수</h2>\n<p>inspect() 함수는 $0의 반대 기능을 한다고 생각하면 이해가 쉽다. 엘리먼트 탭에서 특정 노드가 선택되도록  콘솔에서 명령을 내릴 수 있다.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/389021/15638062/c7a4404e-2656-11e6-94ae-6feb9ee3c11f.png\" alt=\"inspect()\"></p>\n<h1>마무리</h1>\n<p>이외에도 크롬 개발자 도구에는 정말 많은 기능이 있고 계속 추가되고 있다.\n한발 먼저 새로운 크롬 개발자 도구를 사용하고자 한다면 <a href=\"https://www.google.co.kr/chrome/browser/canary.html\">크롬 카나리 버전</a>을 사용해 보는 것도 좋을 것이다. 조금 더 자세한 내용이나 더 많은 정보는 <a href=\"https://developer.chrome.com/devtools\">크롬 웹사이트</a> 를 참고 하기 바란다.</p>","fields":{"slug":"/2016-03-23-웹개발자를 위한 크롬 개발자 도구/"},"excerpt":"웹 개발자를 위한 크롬 개발자 도구 시작하면서 꼭 프론트엔드 개발자가 아니더라도 웹 개발을 하다 보면 한 번쯤은 크롬 개발자 도구를 사용해 봤을 거라 생각한다.\n크롬이 버전업할수록 크롬 개발자 도구 역시 나날이 발전해 왔고 현존하는 도구 중에는 최고의 웹 개발자 도구라고 말할 수 있다.\n예전 IE6에서 alert과 status로 디버깅을 했던 시절을 생각하면 정말 좋은 세상에 살고 있다는 생각이 든다. 크롬 개발자 도구에는 정말 많은 기능들이 추가되었고 별도의 도구로 사용했던 기능들도 내부에 편입되어 더욱 유용해졌다. 심지어 로컬…","frontmatter":{"title":"웹개발자를 위한 크롬 개발자 도구","date":"23 March, 2016","categories":"frontend, tool"}},"recomendPost":{"nodes":[{"fields":{"slug":"/2020-12-01/"},"frontmatter":{"title":"browserslist 쾌속 가이드","categories":"frontend, nodejs","date":"01 December, 2020"},"excerpt":"언젠가부터 브라우저스리스트(browserslist)라는 것이 자주 눈에 띄더니 지금은 FE 개발 환경에서 뺄 수 없는 도구가 되었어요. 아마도 바벨(Babel)이라는 FE 계의 걸출한 스타 프로젝트에서 도입했기 때문일 거라고 생각합니다. 바벨을 사용하는 프로젝트들이 많다 보니 간접적으로 혹은 직접적으로 브라우저스리스트까지 사용하게 되는 것이죠. 사실 좋아요 좋은 도구라고 생각합니다. 아마 브라우저 환경을 정의하는 표준처럼 당분간 사용될 것 같아요. 보통 공식 사이트에서 자세히 알 수 있는 내용들들은 글을 따로 안 쓰려고 하는 편인…"},{"fields":{"slug":"/2020-07-27-1/"},"frontmatter":{"title":"이벤트 핸들러를 대하는 개발자의 자세","categories":"frontend, refactoring","date":"27 July, 2020"},"excerpt":"이벤트 핸들러는 UI를 개발할 때면 항상 사용된다. 웹뿐만 아니라 네이티브 어플리케이션에서도 약간의 차이가 있을뿐 거의 동일한 추상이 사용된다. 자주 사용되는 만큼 중요하지만 사실 너무 자주 사용되다 보니 가볍게 생각하며 습관적으로 고민 없이 좋지 않은 코드를 만들곤 한다. 자주 사용된다는 건 코드의 양적인 비중도 크다는 것이고 그만큼 조금만 더 신경 쓴다면 큰 효과를 볼 수도 있다. 이런 이벤트 핸들러를 어떻게 다루면 좋은지에 대해 간략하게 정리해봤다. 이벤트 핸들러라고 해서 꼭 DOM 이벤트에만 해당하는 것은 아니며 모듈 간의…"},{"fields":{"slug":"/2019-05-22-크롬 네이티브 레이지 로딩/"},"frontmatter":{"title":"크롬 네이티브 레이지 로딩","categories":"frontend, tool","date":"22 May, 2019"},"excerpt":"레이지 로딩이란? 좋은 기회로 2019년 구글I/O에 참석했다. 웹 기술 세션 중에는 크게 눈에 띄는 세션은 없었지만, 일부 세션에서 소개된 웹과 관련 기술 몇 가지는 흥미로웠다. Native Lazy Loading, Portals, Duplex, Rich Results 정도가 나의 관심을 끌었다. 그중 키노트에서 시작해 몇 개의 세션에서 두루두루 언급한 네이티브 레이지 로딩이 제일 기대됐다. 관련 세션 레이지 로딩, 특히 이미지 레이지 로딩은 새로운 기술은 아니다. 기존 브라우저는 웹페이지를 불러올 때 초기부터 전체 영역에 해당…"},{"fields":{"slug":"/2017-11-13-이맥스와 함께하는 개발환경/"},"frontmatter":{"title":"이맥스와 함께하는 개발환경","categories":"tool","date":"13 November, 2017"},"excerpt":"금단의 영역에 손을 대다 에디터, IDE뿐 아니라 업무에 관련된 새로운 도구가 나오면 꼭 써봐야 직성이 풀리는 성격이었지만 언젠가부터 그놈이 그놈이고 저놈이 그놈이고 새로운 기능이 있어도 개발을 할 때 사용하는 기능들은 매우 한정적이라는 사실을 깨닫게 되었다. 인텔리제이도 일년 이상은 사용해봤지만 프론트 엔드를 주로 개발하기에 딱히 IDE가 필요하지 않았고 수많은 기능들을 거의 사용하지 않다 보니 필요 이상의 도구를 사용하는 느낌이었다. 그런 느낌이 조금씩 자라나던 중 생뚱맞게도 박웅현 작가의 **여덟 단어** 라는 책을 읽다가 …"}]},"recentPost":{"nodes":[{"fields":{"slug":"/2020-12-01/"},"frontmatter":{"title":"browserslist 쾌속 가이드","categories":"frontend, nodejs","date":"01 December, 2020"},"excerpt":"언젠가부터 브라우저스리스트(browserslist)라는 것이 자주 눈에 띄더니 지금은 FE 개발 환경에서 뺄 수 없는 도구가 되었어요. 아마도 바벨(Babel)이라는 FE 계의 걸출한 스타 프로젝트에서 도입했기 때문일 거라고 생각합니다. 바벨을 사용하는 프로젝트들이 많다 보니 간접적으로 혹은 직접적으로 브라우저스리스트까지 사용하게 되는 것이죠. 사실 좋아요 좋은 도구라고 생각합니다. 아마 브라우저 환경을 정의하는 표준처럼 당분간 사용될 것 같아요. 보통 공식 사이트에서 자세히 알 수 있는 내용들들은 글을 따로 안 쓰려고 하는 편인…"},{"fields":{"slug":"/2020-11-23/"},"frontmatter":{"title":"누구나 원하는 개발자되기","categories":"recruit","date":"23 November, 2020"},"excerpt":"5~6년 차 즈음부터 개발자 채용에 조금씩 관여하기 시작했고 현 회사에서는 면접관으로 활동한지 5년이 넘은 것 같다. 면접은 1차 면접에 해당하는 기술 면접이었고 팀의 채용 프로세스를 개선하거나 사전과제, 라이브 코딩 문제 출제에 주도적으로 참여했다. 그간 다양한 개발자들을 만났고 운 좋게도 좋은 개발자들을 많이 채용할 수 있었다. 채용 과정에서 좋은 개발자도 만났지만 그렇지 못했던 개발자도 많았고, 아쉬웠던 개발자도 있었다. 아쉬웠던 개발자들은 노력을 하고 있지만 “어느 정도”로 “어떤 방향”으로 해야 하는지 모르는 경우였고 채…"},{"fields":{"slug":"/2020-10-05/"},"frontmatter":{"title":"독서 습관을 만드는 구체적인 방법","categories":"motivation, life","date":"05 October, 2020"},"excerpt":"독서를 습관으로 만들기 위해 그간 많은 노력을 했었다. 습관적으로 SNS를 열면서 “이럴 시간에 책을 읽었으면…” 하고 자주 생각했지만 SNS 아이콘을 터치하는 유혹을 뿌리치기 힘들었다. 여러 가지 시도를 했고  “하루 25분 실행하기: 하루를 대하는 14년차 개발자의 자세” 에서 밝혔다시피 아직 다독가에 비하면 보잘것없지만 그래도 나름 습관 만들기에는 성공한 것 같다. 독서 습관을 만들면서 알게 된 몇가지 좋은 팁을 공유한다. 읽기 속도 측정하기 독서 습관을 만들 때 제일 중요한 것은 책 읽는 속도를 파악하는 것이라고 생각한다.…"},{"fields":{"slug":"/2020-09-07/"},"frontmatter":{"title":"하루 25분 실행하기: 하루를 대하는 14년차 개발자의 자세","categories":"productivity, motivation, life","date":"07 September, 2020"},"excerpt":"하루 24시간은 모두에게 공평하지만 그 24시간을 모두가 공평하게 사용하진 않는다. 하루의 여가시간을 어떻게 하면 더 효율적으로 사용할 수 있을까는 나의 오랜 고민거리였다. 단기 목표도 세워보고 장기 목표도 세워보고 포모도로, GTD도 도입하고 간츠도 사용해보고 하루 표준 계획표도 짜보고 일주일 보고서도 만들어봤다. 하루를 온전히 “노력”하기 위한 ”노력”을 많이 했다. 시도했던 것 대부분은 조금씩 달랐지만 주로 나에게 맞는 일상 패턴을 찾는 과정이었다. 개발자로서 회사 업무시간이나 여가 시간, 하루 대부분의 시간을 개발과 관련된…"}]}},"pageContext":{"slug":"/2016-03-23-웹개발자를 위한 크롬 개발자 도구/","categoriesRegex":"/frontend|tool/g"}},"staticQueryHashes":["1529427419","1755485493","2738229898","993531770"]}