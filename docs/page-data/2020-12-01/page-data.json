{"componentChunkName":"component---src-templates-post-tsx","path":"/2020-12-01/","result":{"data":{"markdownRemark":{"html":"<p><img src=\"https://user-images.githubusercontent.com/389021/100712708-87e78300-33f6-11eb-8300-e83fdba0b93e.png\"></p>\n<p>언젠가부터 브라우저스리스트(browserslist)라는 것이 자주 눈에 띄더니 지금은 FE 개발 환경에서 뺄 수 없는 도구가 되었어요. 아마도 바벨(Babel)이라는 FE 계의 걸출한 스타 프로젝트에서 도입했기 때문일 거라고 생각합니다. 바벨을 사용하는 프로젝트들이 많다 보니 간접적으로 혹은 직접적으로 브라우저스리스트까지 사용하게 되는 것이죠. 사실 좋아요 좋은 도구라고 생각합니다. 아마 브라우저 환경을 정의하는 표준처럼 당분간 사용될 것 같아요.</p>\n<p>보통 공식 사이트에서 자세히 알 수 있는 내용들은 글을 따로 안 쓰려고 하는 편인데요. 짧게 바로 쓸 수 있는 내용만 요약해서 정리해볼게요.</p>\n<h2>Browserslist가 뭘까</h2>\n<p>소개는 짧게 할게요. 브라우저스리스트는 브라우저를 선택하는 옵션 기능만 따로 뽑아 놓은 도구라고 생각하시면 돼요. 어떤 프로그램이 브라우저에 대응해 내부에서 처리해야 할 작업이 다르다면 옵션으로 지원 브라우저 환경을 입력받을 수 있잖아요? FE는 그런 옵션이나 설정이 필요한 경우가 많습니다. 반복해서 만들게 되는 그 설정 기능만 따로 떼서 브라우저 환경을 쉽게 정의할 수 있고 또 쉽게 코드에서 사용할 수 있도록 만든 도구입니다. 그 자체만으로는 특별한 기능이 없어요. 다른 프로그램에서 사용되기 위한 프로그램입니다. 프레임웍이나 빌드도 구 같은 데서 사용해요. 바벨에서는 브라우저에 따라 사용해야 할 폴리필의 내용이나 빌드 결과가 달라집니다. 그래서 바벨은 바벨을 사용하는 프로젝트의 대응 브라우저 환경을 입력받아야 하는데 그때 브라우저스리스트가 사용돼요.</p>\n<p>브라우저스리스트는 브라우저 환경을 정의할 때 쿼리라는 간단한 문법을 사용합니다. 대응할 브라우저와 버전을 쉽게 정의할 수 있어요. 명시적으로 브라우저와 버전을 특정할 수도 있고 최신 버전 2개 뭐 이런 식으로 정의를 할 수 있어요. 심지어 브라우저 사용 통계를 사용해 세계에서 점유율이 5% 이상인 브라우저들만 선택할 수도 있어요. 이 통계 정보는 API 서버에서 가져오는 것이 아니에요. <code class=\"language-text\">caniuse-lite</code>라는 브라우저 사용통계나 버전 정보를 들고 있는 프로젝트의 정적인 데이터를 사용합니다. 그래서 브라우저스리스트를 사용할 때마다 <code class=\"language-text\">caniuse-lite</code> 데이터를 자주 업데이트해요. 브라우저스리스트가 주는 정보는 빌드 할 때나 한번 필요한 것이라 그걸로 충분할 것 같아요.</p>\n<h2>쿼리</h2>\n<p><em>브라우저스리스트는 쿼리라는 문법을 사용해 브라우저를 정의할 수 있습니다.</em> 쿼리는 꽤 직관적이라 쉽게 이해할 수 있어요.</p>\n<p>명시적으로 인터넷익스플로러(IE) 버전 10을 지원하겠다고 대놓고 쓸 수 있고요.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">ie 10</code></pre></div>\n<p>버전의 범위를 지정할 수도 있어요.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">ie 6-9</code></pre></div>\n<p>IE 6에서 9까지 지원한다는 뜻입니다. 근데 인간적으로 IE 6부터 10까지는 버립시다. 웹개발자들을 애껴주세요.</p>\n<p>쿼리는 <code class=\"language-text\">not</code>을 사용해 부정조건을 만들 수 있어요.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">not ie 6-10</code></pre></div>\n<p>IE 6부터 10까지는 절대로 지원하지 않겠다는 쿼리에요. 좋죠? 예전엔 브라우저 특성을 잘 이해하는게 내 밥그릇이라고 생각했는데 지금 생각해보면 그 시간에 그딴것보다 다른 스킬을 키우는게 더 행복했을것 같아요. 네 TMI 네요.</p>\n<p>IE관련 설정은</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">not ie &lt;= 10</code></pre></div>\n<p>이렇게 특정 버전 이하는 지원하지 않겠다는 형태의 쿼리가 좋다고 생각해요.</p>\n<p>브라우저스리스트에서 제일 신박했던 기능이 있는데 바로 사용 통계를 기반으로 한 브라우저 선택입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"> &gt; 2%</code></pre></div>\n<p>전 세계 점유율 2% 이상의 브라우저만 지원한다는 뜻인데 국가 코드와 함께 특정 국가나 아시아와 같은 지역도 선택할 수 있어요.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"> &gt; 2% in KR\n &gt; 2% in alt-AS</code></pre></div>\n<p>첫번째는 한국에서 점유율 2% 이상인 브라우저들을 선택하는 것이고 두번째것은 아시아 지역 전체의 점유율 2%를 뜻해요.</p>\n<p>그리고 자주 쓰이는 쿼리가 하나 더 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">last 2 versions</code></pre></div>\n<p>최근 2개 버전의 브라우저를 선택하는 쿼리입니다. 대부분 메이저 버전을 기준으로 합니다. 한국의 경우 보통 모던 브라우저는 거의 최신 버전을 지원하면서 IE만 선택적으로 지원하게 되는데 이 쿼리하고 IE 지원 범위 쿼리만으로 대부분 커버가 될 거예요. 브라우저 이름까지 넣어서 조금 더 세부적으로 정의할 수도 있지만 이렇게까지 할 필요가 있는 프로젝트는 자주 없을 것 같아요.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">last 2 Chrome versions\nlast 2 Firefox versions</code></pre></div>\n<p>그리고 가장 골칫거리인 것이 바로 지원이 중단된 브라우저들일 텐데요. 지원이 중단된 브라우저들은 간단히 제외할 수도 있어요.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">not dead</code></pre></div>\n<p><code class=\"language-text\">dead</code>는 지원이 중단된 브라우저를 뜻해요 그래서 <code class=\"language-text\">not dead</code> 이렇게 하면 지원이 중단되지 않은 브라우저만 지원하겠다는 뜻이에요. 한국에서는 종종 지원이 중단된 브라우저도 지원해야 할 경우가 있어서 무심코 사용하다간 큰일 날 수 있어요.</p>\n<p>그리고 쿼리를 조합할 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"> &gt; 1%, last 1 versions\n &gt; 1% and last 1 versions</code></pre></div>\n<p><code class=\"language-text\">or</code>, <code class=\"language-text\">and</code> 조건을 사용할 수 있습니다. <code class=\"language-text\">or</code>의 경우 콤마로 대신할 수 있어요. <code class=\"language-text\">&gt; 1%, last 1 versions</code>는 점유율 1% 이상과 최신 버전 1개를 선택하는 것이고 <code class=\"language-text\">&gt; 1% and last 1 versions</code> 이건 점유율 1% 이상이면서 최신 버전인 것만 선택합니다.</p>\n<h2>쿼리를 정의하는 방법</h2>\n<p>쿼리는 두 가지 방법으로 정의할 수 있습니다.</p>\n<ol>\n<li><code class=\"language-text\">.browserslistrc</code> 파일안에 정의</li>\n<li><code class=\"language-text\">package.json</code> 파일에 <code class=\"language-text\">browserslist</code> 키를 사용해 정의</li>\n</ol>\n<p><code class=\"language-text\">.browserslistrc</code> 파일을 사용하는 방법이 제일 간단해요.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"> &gt; 1%\nlast 2 versions\nnot ie &lt;= 10</code></pre></div>\n<p>프로젝트 루트에 <code class=\"language-text\">.browserslistrc</code> 파일을 만드시고 위와 같이 입력하면 됩니다. <strong>그냥 바쁘신 분들은 위 내용 복붙해서 IE 부분만 프로젝트 상황에 맞게 조절해 주시면 웬만하면 바로 쓸 수 있는 쿼리라고 생각하시면 될 것 같습니다.</strong> 라인으로 구분되는 쿼리들은 <code class=\"language-text\">or</code> 조건인데 <code class=\"language-text\">not</code>은 <code class=\"language-text\">and</code> 조건으로 동작하는 것 같아요.</p>\n<p><code class=\"language-text\">package.json</code> 파일을 이용하는 방법은 공식 사이트에서도 권장하는 방법이에요. <code class=\"language-text\">package.json</code>에 <code class=\"language-text\">browserslist</code>키를 사용해 배열로 정의합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"browserslist\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n  \"> <span class=\"token number\">1</span>%”<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"last 2 versions\"</span><span class=\"token punctuation\">,</span>\n  “not ie &lt;= <span class=\"token number\">10</span>”\n<span class=\"token punctuation\">]</span></code></pre></div>\n<h2>쿼리 디버깅</h2>\n<p><em>입력한 쿼리가 정상적으로 동작하고 있는지 바로 확인할 수 있어요.</em> 쿼리가 정의된 파일이 있는 경로에서 커맨드라인으로 아래와 같이 입력하면 됩니다.(파일이 없는 경로에서는 디폴트 쿼리를 적용해요)</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">npx browserslist</code></pre></div>\n<p>결과는 쿼리에 대응되는 브라우저 목록이 출력됩니다. 만약 지원하는 브라우저가 목록에 없다면 쿼리를 수정하셔야 해요.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">and_chr 86\nand_ff 82\nand_qq 10.4\nand_uc 12.12\nandroid 81\nbaidu 7.12\nbb 10\nbb 7\nchrome 86\nchrome 85\nedge 86\nedge 85\nfirefox 82\nfirefox 81\nie 11\nie_mob 11\nie_mob 10\nios_saf 14\nios_saf 13.4-13.7\nios_saf 12.2-12.4\nkaios 2.5\nop_mini all\nop_mob 59\nop_mob 12.1\nopera 72\nopera 71\nsafari 14\nsafari 13.1\nsamsung 12.0\nsamsung 11.1-11.2</code></pre></div>\n<p>아까 입력했던 쿼리의 2020년 11월 29일의 결과입니다. 브라우저 사용 통계를 사용하기 때문에 시간에 따라 바뀔 수 있겠죠?</p>\n<h2>그 밖에 유용한 기능</h2>\n<p><a href=\"https://github.com/browserslist/browserslist-ga\">browserlist-ga</a>를 사용하면 웹사이트의 Google Analytics 정보를 이용해 브라우저를 선택할 수 있어요. 실제로 웹사이트를 이용하는 사람들의 브라우저 점유율이니 이보다 정확할 수는 없겠네요. 하지만 이것도 웬만큼 사용자가 누적되어야 의미 있는 통계가 될 겁니다. 제 블로그처럼 적은 사용자로는….</p>\n<p>배포나 개발 환경에 따라 다른 설정을 할 수 있고요. 비슷한 방법으로 중간에 키를 두고 다양한 쿼리를 정의할 수도 있어요. 공식 리포의 문서를 참조하시면 됩니다.</p>\n<p>다른 <code class=\"language-text\">.browserslistrc</code> 파일을 확장해서 정의 기능도 있습니다. 기본 브라우저 대응 쿼리를 정의하고 그것을 공유하고 확장해, 조금 다른 파생 설정을 만들 수 있어요. 중복을 제거할 수 있겠죠? 사실 웬만큼 복잡한 쿼리가 아니라면 크게 유용한 것 같지 않다고 생각했는데 브라우저스리스트를 사용한 모듈이나 프레임웍 중에는 기능에 따라 복잡한 쿼리가 필요할 수도 있겠네요. 이것 역시 리포에 잘 나와있습니다.</p>\n<h2>끝으로</h2>\n<p>마지막으로 따로 뭐를 정리할 내용이 없는 주제네요. 그래도 안 쓰면 허전해서… 아무튼 브라우저스리스트는 그 자체만으로 특별한 기능이 있는 게 아니고 대응 브라우저를 읽기 쉽고 편하게 정의할 수 있도록 만든 도구를 위한 도구라고 할 수 있습니다. 농구에서 왼손 같은 것이죠.(아재 인증)</p>\n<p>아마 노드 기반의 FE 개발 환경에서는 꽤 오랫동안 사용하게 될 것 같습니다.</p>","fields":{"slug":"/2020-12-01/"},"excerpt":"언젠가부터 브라우저스리스트(browserslist)라는 것이 자주 눈에 띄더니 지금은 FE 개발 환경에서 뺄 수 없는 도구가 되었어요. 아마도 바벨(Babel)이라는 FE 계의 걸출한 스타 프로젝트에서 도입했기 때문일 거라고 생각합니다. 바벨을 사용하는 프로젝트들이 많다 보니 간접적으로 혹은 직접적으로 브라우저스리스트까지 사용하게 되는 것이죠. 사실 좋아요 좋은 도구라고 생각합니다. 아마 브라우저 환경을 정의하는 표준처럼 당분간 사용될 것 같아요. 보통 공식 사이트에서 자세히 알 수 있는 내용들은 글을 따로 안 쓰려고 하는 편인데…","frontmatter":{"title":"browserslist 쾌속 가이드","date":"01 December, 2020","categories":"frontend, nodejs"}},"recomendPost":{"nodes":[{"fields":{"slug":"/2020-12-01/"},"frontmatter":{"title":"browserslist 쾌속 가이드","categories":"frontend, nodejs","date":"01 December, 2020"},"excerpt":"언젠가부터 브라우저스리스트(browserslist)라는 것이 자주 눈에 띄더니 지금은 FE 개발 환경에서 뺄 수 없는 도구가 되었어요. 아마도 바벨(Babel)이라는 FE 계의 걸출한 스타 프로젝트에서 도입했기 때문일 거라고 생각합니다. 바벨을 사용하는 프로젝트들이 많다 보니 간접적으로 혹은 직접적으로 브라우저스리스트까지 사용하게 되는 것이죠. 사실 좋아요 좋은 도구라고 생각합니다. 아마 브라우저 환경을 정의하는 표준처럼 당분간 사용될 것 같아요. 보통 공식 사이트에서 자세히 알 수 있는 내용들은 글을 따로 안 쓰려고 하는 편인데…"},{"fields":{"slug":"/2020-07-27-1/"},"frontmatter":{"title":"이벤트 핸들러를 대하는 개발자의 자세","categories":"frontend, refactoring","date":"27 July, 2020"},"excerpt":"이벤트 핸들러는 UI를 개발할 때면 항상 사용된다. 웹뿐만 아니라 네이티브 어플리케이션에서도 약간의 차이가 있을뿐 거의 동일한 추상이 사용된다. 자주 사용되는 만큼 중요하지만 사실 너무 자주 사용되다 보니 가볍게 생각하며 습관적으로 고민 없이 좋지 않은 코드를 만들곤 한다. 자주 사용된다는 건 코드의 양적인 비중도 크다는 것이고 그만큼 조금만 더 신경 쓴다면 큰 효과를 볼 수도 있다. 이런 이벤트 핸들러를 어떻게 다루면 좋은지에 대해 간략하게 정리해봤다. 이벤트 핸들러라고 해서 꼭 DOM 이벤트에만 해당하는 것은 아니며 모듈 간의…"},{"fields":{"slug":"/2019-05-22-크롬 네이티브 레이지 로딩/"},"frontmatter":{"title":"크롬 네이티브 레이지 로딩","categories":"frontend, tool","date":"22 May, 2019"},"excerpt":"레이지 로딩이란? 좋은 기회로 2019년 구글I/O에 참석했다. 웹 기술 세션 중에는 크게 눈에 띄는 세션은 없었지만, 일부 세션에서 소개된 웹과 관련 기술 몇 가지는 흥미로웠다. Native Lazy Loading, Portals, Duplex, Rich Results 정도가 나의 관심을 끌었다. 그중 키노트에서 시작해 몇 개의 세션에서 두루두루 언급한 네이티브 레이지 로딩이 제일 기대됐다. 관련 세션 레이지 로딩, 특히 이미지 레이지 로딩은 새로운 기술은 아니다. 기존 브라우저는 웹페이지를 불러올 때 초기부터 전체 영역에 해당…"},{"fields":{"slug":"/2017-04-10-웹어셈블리 바로 사용 해보기/"},"frontmatter":{"title":"웹어셈블리 바로 사용 해보기","categories":"frontend, translation","date":"10 April, 2017"},"excerpt":"원글: https://tutorials.technology/tutorials/11-webassembly-initial-steps-tutorial.html 소개 웹어셈블리는 미래에 매우 유용하게 사용될 새롭고도 새로운 표준이다. 이 기술은 W3C 커뮤니티 그룹에서 애플, 구글 , 마이크로소프트 그리고 모질라와 함께 개발되고 있다. 이 프로젝트의 초기 시점인 지금은 고 수준의 언어가 아닌 C/C++로 초점이 맞춰져 있고 웹어셈블리의 약어는 wasm 이며 자바스크립트와 브라우저의 개선 사항 중 하나이다. 웹어셈블리는 자바스크립트를 대체…"}]},"recentPost":{"nodes":[{"fields":{"slug":"/2020-12-01/"},"frontmatter":{"title":"browserslist 쾌속 가이드","categories":"frontend, nodejs","date":"01 December, 2020"},"excerpt":"언젠가부터 브라우저스리스트(browserslist)라는 것이 자주 눈에 띄더니 지금은 FE 개발 환경에서 뺄 수 없는 도구가 되었어요. 아마도 바벨(Babel)이라는 FE 계의 걸출한 스타 프로젝트에서 도입했기 때문일 거라고 생각합니다. 바벨을 사용하는 프로젝트들이 많다 보니 간접적으로 혹은 직접적으로 브라우저스리스트까지 사용하게 되는 것이죠. 사실 좋아요 좋은 도구라고 생각합니다. 아마 브라우저 환경을 정의하는 표준처럼 당분간 사용될 것 같아요. 보통 공식 사이트에서 자세히 알 수 있는 내용들은 글을 따로 안 쓰려고 하는 편인데…"},{"fields":{"slug":"/2020-11-23/"},"frontmatter":{"title":"누구나 원하는 개발자되기","categories":"recruit","date":"23 November, 2020"},"excerpt":"5~6년 차 즈음부터 개발자 채용에 조금씩 관여하기 시작했고 현 회사에서는 면접관으로 활동한지 5년이 넘은 것 같다. 면접은 1차 면접에 해당하는 기술 면접이었고 팀의 채용 프로세스를 개선하거나 사전과제, 라이브 코딩 문제 출제에 주도적으로 참여했다. 그간 다양한 개발자들을 만났고 운 좋게도 좋은 개발자들을 많이 채용할 수 있었다. 채용 과정에서 좋은 개발자도 만났지만 그렇지 못했던 개발자도 많았고, 아쉬웠던 개발자도 있었다. 아쉬웠던 개발자들은 노력을 하고 있지만 “어느 정도”로 “어떤 방향”으로 해야 하는지 모르는 경우였고 채…"},{"fields":{"slug":"/2020-10-05/"},"frontmatter":{"title":"독서 습관을 만드는 구체적인 방법","categories":"motivation, life","date":"05 October, 2020"},"excerpt":"독서를 습관으로 만들기 위해 그간 많은 노력을 했었다. 습관적으로 SNS를 열면서 “이럴 시간에 책을 읽었으면…” 하고 자주 생각했지만 SNS 아이콘을 터치하는 유혹을 뿌리치기 힘들었다. 여러 가지 시도를 했고  “하루 25분 실행하기: 하루를 대하는 14년차 개발자의 자세” 에서 밝혔다시피 아직 다독가에 비하면 보잘것없지만 그래도 나름 습관 만들기에는 성공한 것 같다. 독서 습관을 만들면서 알게 된 몇가지 좋은 팁을 공유한다. 읽기 속도 측정하기 독서 습관을 만들 때 제일 중요한 것은 책 읽는 속도를 파악하는 것이라고 생각한다.…"},{"fields":{"slug":"/2020-09-07/"},"frontmatter":{"title":"하루 25분 실행하기: 하루를 대하는 14년차 개발자의 자세","categories":"productivity, motivation, life","date":"07 September, 2020"},"excerpt":"하루 24시간은 모두에게 공평하지만 그 24시간을 모두가 공평하게 사용하진 않는다. 하루의 여가시간을 어떻게 하면 더 효율적으로 사용할 수 있을까는 나의 오랜 고민거리였다. 단기 목표도 세워보고 장기 목표도 세워보고 포모도로, GTD도 도입하고 간츠도 사용해보고 하루 표준 계획표도 짜보고 일주일 보고서도 만들어봤다. 하루를 온전히 “노력”하기 위한 ”노력”을 많이 했다. 시도했던 것 대부분은 조금씩 달랐지만 주로 나에게 맞는 일상 패턴을 찾는 과정이었다. 개발자로서 회사 업무시간이나 여가 시간, 하루 대부분의 시간을 개발과 관련된…"},{"fields":{"slug":"/2020-07-27-1/"},"frontmatter":{"title":"이벤트 핸들러를 대하는 개발자의 자세","categories":"frontend, refactoring","date":"27 July, 2020"},"excerpt":"이벤트 핸들러는 UI를 개발할 때면 항상 사용된다. 웹뿐만 아니라 네이티브 어플리케이션에서도 약간의 차이가 있을뿐 거의 동일한 추상이 사용된다. 자주 사용되는 만큼 중요하지만 사실 너무 자주 사용되다 보니 가볍게 생각하며 습관적으로 고민 없이 좋지 않은 코드를 만들곤 한다. 자주 사용된다는 건 코드의 양적인 비중도 크다는 것이고 그만큼 조금만 더 신경 쓴다면 큰 효과를 볼 수도 있다. 이런 이벤트 핸들러를 어떻게 다루면 좋은지에 대해 간략하게 정리해봤다. 이벤트 핸들러라고 해서 꼭 DOM 이벤트에만 해당하는 것은 아니며 모듈 간의…"},{"fields":{"slug":"/2020-06-15-유용한테스트케이스를위한개발자의자세/"},"frontmatter":{"title":"유용한 테스트 케이스를 위한 개발자의 자세","categories":"test, tdd","date":"15 June, 2020"},"excerpt":"각종 커뮤니티에 주기적으로 등장하는 \"private 메서드를 테스트하려면 어떻게 하나요?\" 혹은 \"private 메서드를 테스트해야 하나요?\" 와 같은 질문을 보면서 언젠가는 관련해서 정리해봐야겠다고 생각했었는데 꽤 시간이 흘러 이 내용으로 글을 써본다. 주제 자체는 간단한 편이지만 사람마다 생각이 다른 것 같다. 특히 해외 개발자들의 의견이 분분한 것 같다. 사실 이 문제는 효과적인 테스트 케이스(이하 TC)란 무엇인가란 질문과 비슷하다. private 메서드는 객체지향적인 관점에서 생각한 것이고 노출된 함수 내부에서 접근하는,…"}]}},"pageContext":{"slug":"/2020-12-01/","categoriesRegex":"/frontend|nodejs/g"}},"staticQueryHashes":["1529427419","1755485493","2738229898","993531770"]}