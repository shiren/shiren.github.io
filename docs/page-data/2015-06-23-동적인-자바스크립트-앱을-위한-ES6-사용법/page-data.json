{"componentChunkName":"component---src-templates-post-tsx","path":"/2015-06-23-동적인-자바스크립트-앱을-위한-ES6-사용법/","result":{"data":{"markdownRemark":{"html":"<h3>동적인 자바스크립트 앱을 위한 ES6 사용법</h3>\n<p>How to Use ES6 for Isomorphic JavaScript Apps</p>\n<blockquote>\n<p>원문<br>\n<a href=\"http://medium.com/javascript-scene/how-to-use-es6-for-isomorphic-javascript-apps-2a9c3abe5ea2\">http://medium.com/javascript-scene/how-to-use-es6-for-isomorphic-javascript-apps-2a9c3abe5ea2</a></p>\n</blockquote>\n<p><br><br></p>\n<p>이제 먼지는 좀 가라앉았고, 나는 결국 프로덕션 앱에 ES6를 사용하기 시작했다.\n그리고 <a href=\"https://github.com/ericelliott/isomorphic-express-boilerplate\">isomorphic Javascript</a>를 작업하기 때문에 Node.js와 Browser 둘 다 작동 해야한다.</p>\n<p>이글은 ES6의 기능이나 동적인 자바스크립트에 대한 깊은 튜토리얼은 아닐것이다. 기본적인 내용으로 Babel 환경에서 개발하고 실행할 수 있게\n하는데에 촛점을 두고있다.</p>\n<h3>Use Babel</h3>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/fit/c/800/800/1*58R0tzuzVXd_7k89Igm9jA.png\" alt=\"Babel\"></p>\n<p>Babel.js(이후 바벨)는 ES6 코드를 ES5 형태로 transpile해서 Node.js와 브라우저에서 지금 바로 사용할 수 있게 하는 좋은 툴이다.\n그러나 셋팅하는 방법이 쉽진 않다.</p>\n<h4>Install Babel</h4>\n<p>바벨에 관한 튜토리얼들은 바벨을 글로벌에 설치하라고 말하는데 이는 당신의 코드가 다른 사람들과 공유되지 않을 때에만 적합하다. 만약 팀 프로젝트이거나 오픈소스 라이브러리를 개발한다면 프로젝트 패키지당 하나씩 로컬로 설치하는게 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install -g babel\n$ npm install --save-dev babel</code></pre></div>\n<p>설치가 완료되면 <code class=\"language-text\">babel-node</code>를 실행해 REPL을 볼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ babel-node\n&gt; Object.assign({}, {msg: &#39;wow!&#39;}); // =&gt; { msg: &#39;wow!&#39; }</code></pre></div>\n<p>브라우저 환경을 위해서는 아래와 같은 것들이 필요하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install --save-dev babelify browserify</code></pre></div>\n<p>이로써 당신은 arrow function과 같은 ES6의 새롭고 좋은 기능들을 사용할 수 있게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>하지만 새로운 built-in method인 <code class=\"language-text\">Object.assign()</code>이나 <code class=\"language-text\">Object.is()</code> 같은 메소드를 사용할 수는 없다.\n이게 조금 애매한데 왜냐하면 <code class=\"language-text\">babel-node</code>의 REPL에서는 제대로 동작하기 때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => true</span></code></pre></div>\n<p>다행히 폴리필을 이용하면 쉽게 해결된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install --save core-js</code></pre></div>\n<p>그리고 엔트리 파일 상단에 아래의 내용을 추가하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'core-js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>Linting</h4>\n<p>혹시 코드 린트를 포기하게 될까봐 적정한다면 걱정할 것 없다. ESLint를 이용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install --save-dev eslint</code></pre></div>\n<blockquote>\n<p><a href=\"https://github.com/ericelliott/prod-module-boilerplate/blob/master/.eslintrc\">내가 사용하고있는 .eslintrc 파일을 보려면 클릭</a></p>\n</blockquote>\n<p><code class=\"language-text\">env</code>와 <code class=\"language-text\">ecmaFeatures</code> 키에 해당되는 내용을 살펴보면 ESLint가 ES6 코드를 만났을때 에러가 발생하는 것을 방지할 수 있다.</p>\n<p>리액트 코드에서 자주쓰이는 ES7의 오브젝트 rest나 spread 프로퍼티를 사용하고자 한다면 <code class=\"language-text\">babel-eslint</code>가 필요할 것이다.</p>\n<h4>Compiling</h4>\n<p>바벨 문서에는 컴파일링이 쉬운것 처럼 말한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ babel script.js --out-file script-compiled.js</code></pre></div>\n<p>보기엔 쉬워보인다. 하지만 이렇게 하는 것은 내부에서 아무런 모듈을 임포트하지 않았을 때에나 정상적으로 동작한다.\n보통은 내부에 디펜던시 관계가 있는 모든 코드 베이스 전체를 컴파일하길 원할 것이다.(한 개의 파일이 아니고)\n이럴 때는 <code class=\"language-text\">-d</code> 옵션을 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ babel -d build-dir source-dir</code></pre></div>\n<p>첫번째 디렉토리가 아웃풋 디렉토리이다.</p>\n<p>그리고 <code class=\"language-text\">node-inspector</code>가 정상적으로 작동하려면 소스 맵이 필요한데 <code class=\"language-text\">-s</code>옵션으로 소스 맵을 만들게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ babel -d build-dir source-dir -s</code></pre></div>\n<p>이렇게 하면 필요한 모든 파일들이 컴파일이 되고 소스 맵파일을 만들어 디버거에서 라이브 코드가 실제로 어떤 원본 소스에 해당하는지 정확하게 찾을 수 있게된다.\n다시 말하면 디버거에서 바벨이 생성한 컴파일된 자바스크립트코드가 아니라 컴파일되기 전애 직접 작성한 원본 코드로 디버깅을 할 수 있다.(역: *_*)</p>\n<p>브라우저를 위한 컴파일에는 Babelify라는 Browserify 트랜스폼이 필요하다. 아래와 같이 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ browserify script.js -t babelify --outfile bundle.js</code></pre></div>\n<h4>기존 모듈의 사용</h4>\n<p>위에 언급된 툴을 이용하면 ES6이나 Node-style의 모듈을 ES6 문법을 이용해 사용할 수 있다.\n(역: NodeJS의 CommonJS방식과 ES6에서 제공하는 Import방식의 모듈을 특별한 작업 없이 바로 사용할 수 있다는 이야기)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import &#39;core-js&#39;; // Node module\nimport harness from &#39;./harness&#39;; // ES6 module</code></pre></div>\n<p>그래서 npm 생태계에서 지원 하는 엄청난 양의 표준 모듈을 특별한 작업 없이 ES6 코드 베이스로 바로 사용할 수 있게된다.\n하지만 많은 사람들이 아직 ES5를 사용하고 있으니 npm에 모듈을 퍼블리시 할 때는 컴파일된 버전을 퍼블리시하는 것을 추천한다.</p>\n<p>공개용 라이브러리를 개발할 때 나는 소스들을 <code class=\"language-text\">source</code> 디렉토리에서 넣어두고 컴파일된 ES5코드들은 <code class=\"language-text\">dist</code>나 <code class=\"language-text\">lib</code>에 둔다.\n<code class=\"language-text\">package.json</code>의 <code class=\"language-text\">main</code>키 값을 컴파일된 ES5 버전의 코드로 두는 것은 좋은 아이디어일 것이다.</p>\n<h4>자동화</h4>\n<p>나는 아래의 커맨드를 npm 스크립트에 등록하고 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint source\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"clean\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rm -rf build/* &amp;&amp; mkdir build/public &amp;&amp; mkdir build/server &amp;&amp; mkdir build/client\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"build-server\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"babel -d build/server source/server -s\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"build-client\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"browserify source/client/index.js -t babelify --outfile build/client/bundle.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run clean &amp;&amp; npm run build-server &amp;&amp; npm build-client\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>React</h4>\n<p>리액트에서도 잘 동작한다. Babel하고 ESLint가 JSX를 지원하기 때문이다.</p>\n<h4>Party Time</h4>\n<p>축하한다! 당신은 동적인 자바스크립트 앱을 위해 ES6를 사용할 준비가 되었다.\n혹시라도 궁금해 할까봐 내가 자주 사용하는 ES6의 유용한것들의 키워드를 나열해본다.</p>\n<ul>\n<li>Compact object literals</li>\n<li>Destructuring</li>\n<li>Arrow functions (한 줄 람다에 최고)</li>\n<li>Default params</li>\n<li>Rest params</li>\n<li>Generators</li>\n</ul>\n<p>당신은 새로운 Defaults/overrides 패턴을 바로 익혀두기 바란다.</p>\n<h4>ES6 Defaults / Overrides Pattern</h4>\n<p>디폴트 파라메터와 간단한 버전의 디폴트/오버라이드 패턴 구현</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    bar <span class=\"token operator\">=</span> <span class=\"token string\">'no'</span><span class=\"token punctuation\">,</span>\n    baz <span class=\"token operator\">=</span> <span class=\"token string\">'works!'</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>bar<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>baz<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    bar<span class=\"token operator\">:</span> <span class=\"token string\">'yay'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs 'yay, works!'</span></code></pre></div>\n<p>ES5 버전에서는 <code class=\"language-text\">Object.assign()</code>을 대체할 약간의 폴리필이 필요하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> assign <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span>assign<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> defaults2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    bar<span class=\"token operator\">:</span> <span class=\"token string\">'no'</span><span class=\"token punctuation\">,</span>\n    baz<span class=\"token operator\">:</span> <span class=\"token string\">'works!'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo2</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> settings <span class=\"token operator\">=</span> <span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> defaults2<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n    bar <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">,</span>\n    baz <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">.</span>baz<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>bar <span class=\"token operator\">+</span> <span class=\"token string\">', '</span> <span class=\"token operator\">+</span>baz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">foo2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    bar<span class=\"token operator\">:</span> <span class=\"token string\">'yay'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs 'yay, works!'</span></code></pre></div>","fields":{"slug":"/2015-06-23-동적인 자바스크립트 앱을 위한 ES6 사용법/"},"excerpt":"동적인 자바스크립트 앱을 위한 ES6 사용법 How to Use ES6 for Isomorphic JavaScript Apps 원문\nhttp://medium.com/javascript-scene/how-to-use-es6-for-isomorphic-javascript-apps-2a9c3abe5ea2  이제 먼지는 좀 가라앉았고, 나는 결국 프로덕션 앱에 ES6를 사용하기 시작했다.\n그리고 isomorphic Javascript를 작업하기 때문에 Node.js와 Browser 둘 다 작동 해야한다. 이글은 ES6의 기능이나 동적인 …","frontmatter":{"title":"동적인 자바스크립트 앱을 위한 ES6 사용법","date":"23 June, 2015","categories":"javascript, translation"}},"recomendPost":{"nodes":[{"fields":{"slug":"/2020-03-12-은닉을 향한 자바스크립트의 여정/"},"frontmatter":{"title":"은닉을 향한 자바스크립트의 여정","categories":"javascript","date":"12 March, 2020"},"excerpt":"ECMAScript 클래스 필드(class field) 명세중에  즉  (이하 Private 속성) 가 있다. 클래스 필드 스펙은 Stage 3(Candidate)까지 올랐으니 아마 곧 Stage 4(Finished)를 거쳐 표준 스펙이 될 것이다. 사실 초기에 명세 문서를 봤을 때는 \"드디어 private이 생기는건가?\"하는 기대감과 \"문법이 좀 별론데\"라는 실망감이 있었을 뿐 뭔가 현실감은 없었다. 그렇게 시간이 흘러 기억 속에서 잊힌 채로 지내다가 얼마전에 타입스크립트 3.8에서 정식으로 지원한다는 소식을 들었고 이를 계기로…"},{"fields":{"slug":"/2018-07-10-요즘 잘나가는 프론트엔드 개발환경 만들기(2018) ES6/"},"frontmatter":{"title":"요즘 잘나가는 프론트엔드 개발환경 만들기(2018): ES6","categories":"frontend, javascript","date":"10 July, 2018"},"excerpt":"요즘 잘나가는 프론트엔드 개발환경 만들기(2018): ES6 본 시리즈의  이전 아티클에서는 웹팩4에 대해 다루면서 바로 쓸 수 있는 환경을 만들어봤다. 이번편에는 그 환경 그대로 이용해 ES6 개발 환경을 추가한다. ES6는 이제 충분히 써도 될만한 시기라고 생각한다. \"나는 프런트 개발자가 아니기도 하고 브라우저가 모두 지원하지도 않기에 ES6는 아직 못쓴다\" 라고 생각하고 있다면 이 글을 통해 생각을 바꿀 수 있길 바란다. 어차피 쓰는 거 ES6뿐 아니라 ES8까지 사용하는 것을 권장한다. IE11 이하 버전들은 ES6나 이…"},{"fields":{"slug":"/2018-04-16-요즘 잘나가는 프론트엔드 개발 환경 만들기(2018) Webpack 4/"},"frontmatter":{"title":"요즘 잘나가는 프론트엔드 개발 환경 만들기(2018): Webpack 4","categories":"frontend, javascript","date":"16 April, 2018"},"excerpt":"요즘 잘나가는 프론트엔드 개발 환경 만들기(2018): Webpack 4 최근에 새로운 프로젝트를 진행하게 되면서 기존에 간만 살짝 보고 있던 뷰(Vue, 이하 뷰)를 본격적으로 도입하게 되었다. 사실 팀에서는 리액트를 선호하고 있었으나 회사 내부에서 뷰의 사용이 빠른 속도로 증가하고 있었고 그에 따라 팀내에서도 뷰에 대한 전문성이 필요하게 되었다. 뷰와 리액트는 서로 영향을 주고받고 발전해나가는 도구들이라 비슷한 부분이 많아 큰 어려움 없이 적응할 수 있었다. 새로운 프로젝트에서는 뷰를 사용하는것 뿐 아니라 다른 개발 환경도 요…"},{"fields":{"slug":"/2018-02-23-ECMAScript 스펙 톺아보기: Primitive/"},"frontmatter":{"title":"ECMAScript 스펙 톺아보기: Primitive","categories":"javascript","date":"23 February, 2018"},"excerpt":"ECMAScript 스펙 톺아보기: Primitive 프리미티브에 대한 의문 현재 팀 내부에서는 시니어들이 팀 인력 채용 프로세스를 개선하고 있다. 프로세스 중에서도 현재는 필기시험 문제를 재출제하는 중인데 이게 생각보다 쉽지 않아 매일 매일 서로 의견이 분분하다. 그러던 어느 날 프리미티브에 대한 의견을 나누던 중 자바스크립트의 프리미티브를 객체 같이 사용된다고 설명해도 되느냐 안되느냐의 문제를 놓고 토론을 하게 되었는데 내 의견은 표면적으로 객체처럼 사용할 수 있기에 객체 같이 취급된다고 표현해도 된다는 의견이었고 다른 한 멤…"}]},"recentPost":{"nodes":[{"fields":{"slug":"/2020-09-07/"},"frontmatter":{"title":"하루 25분 실행하기: 하루를 대하는 14년차 개발자의 자세","categories":"productivity, motivation, life","date":"07 September, 2020"},"excerpt":"하루 24시간은 모두에게 공평하지만 그 24시간을 모두가 공평하게 사용하진 않는다. 하루의 여가시간을 어떻게 하면 더 효율적으로 사용할 수 있을까는 나의 오랜 고민거리였다. 단기 목표도 세워보고 장기 목표도 세워보고 포모도로, GTD도 도입하고 간츠도 사용해보고 하루 표준 계획표도 짜보고 일주일 보고서도 만들어봤다. 하루를 온전히 “노력”하기 위한 ”노력”을 많이 했다. 시도했던 것 대부분은 조금씩 달랐지만 주로 나에게 맞는 일상 패턴을 찾는 과정이었다. 개발자로서 회사 업무시간이나 여가 시간, 하루 대부분의 시간을 개발과 관련된…"},{"fields":{"slug":"/2020-07-27-1/"},"frontmatter":{"title":"이벤트 핸들러를 대하는 개발자의 자세","categories":"frontend, refactoring","date":"27 July, 2020"},"excerpt":"이벤트 핸들러는 UI를 개발할 때면 항상 사용된다. 웹뿐만 아니라 네이티브 어플리케이션에서도 약간의 차이가 있을뿐 거의 동일한 추상이 사용된다. 자주 사용되는 만큼 중요하지만 사실 너무 자주 사용되다 보니 가볍게 생각하며 습관적으로 고민 없이 좋지 않은 코드를 만들곤 한다. 자주 사용된다는 건 코드의 양적인 비중도 크다는 것이고 그만큼 조금만 더 신경 쓴다면 큰 효과를 볼 수도 있다. 이런 이벤트 핸들러를 어떻게 다루면 좋은지에 대해 간략하게 정리해봤다. 이벤트 핸들러라고 해서 꼭 DOM 이벤트에만 해당하는 것은 아니며 모듈 간의…"},{"fields":{"slug":"/2020-06-15-유용한테스트케이스를위한개발자의자세/"},"frontmatter":{"title":"유용한 테스트 케이스를 위한 개발자의 자세","categories":"test, tdd","date":"15 June, 2020"},"excerpt":"각종 커뮤니티에 주기적으로 등장하는 \"private 메서드를 테스트하려면 어떻게 하나요?\" 혹은 \"private 메서드를 테스트해야 하나요?\" 와 같은 질문을 보면서 언젠가는 관련해서 정리해봐야겠다고 생각했었는데 꽤 시간이 흘러 이 내용으로 글을 써본다. 주제 자체는 간단한 편이지만 사람마다 생각이 다른 것 같다. 특히 해외 개발자들의 의견이 분분한 것 같다. 사실 이 문제는 효과적인 테스트 케이스(이하 TC)란 무엇인가란 질문과 비슷하다. private 메서드는 객체지향적인 관점에서 생각한 것이고 노출된 함수 내부에서 접근하는,…"},{"fields":{"slug":"/2020-03-24-개발자와명상/"},"frontmatter":{"title":"개발자와 명상","categories":"productivity, meditation, life","date":"24 March, 2020"},"excerpt":"언젠가부터 여러 가지 걱정들로 머릿속이 복잡해지고 있었다. 이런 상황에서는 운동과 독서가 해결책이 될 수 있는데 운동은 평소 꾸준히 하는 편이었고 독서량을 많이 늘려봤다. 기술 서적이 아닌 내 삶에 필요하다고 생각하는 주제의 책들을 읽었다. 하지만 뭔가 부족했다. “생각을 정리할 시간이 필요하다.”라고 생각했지만, 막상 생각을 정리할 시간을 내기 힘들었다. 지금 생각해보면 그게 힘들었던 건지 생각을 직접적으로 대면하기 두려웠었는지 모르겠다.  몸뚱아리는 현재에 있었지만, 정신과 생각은 미래와 과거를 수없이 오갔다.  마음이 평화롭…"}]}},"pageContext":{"slug":"/2015-06-23-동적인 자바스크립트 앱을 위한 ES6 사용법/","categoriesRegex":"/javascript|translation/g"}},"staticQueryHashes":["1529427419","1755485493","2738229898","993531770"]}