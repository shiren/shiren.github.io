{"componentChunkName":"component---src-templates-post-tsx","path":"/2015-06-23-동적인-자바스크립트-앱을-위한-ES6-사용법/","result":{"data":{"markdownRemark":{"html":"<h3>동적인 자바스크립트 앱을 위한 ES6 사용법</h3>\n<p>How to Use ES6 for Isomorphic JavaScript Apps</p>\n<blockquote>\n<p>원문<br>\n<a href=\"http://medium.com/javascript-scene/how-to-use-es6-for-isomorphic-javascript-apps-2a9c3abe5ea2\">http://medium.com/javascript-scene/how-to-use-es6-for-isomorphic-javascript-apps-2a9c3abe5ea2</a></p>\n</blockquote>\n<p><br><br></p>\n<p>이제 먼지는 좀 가라앉았고, 나는 결국 프로덕션 앱에 ES6를 사용하기 시작했다.\n그리고 <a href=\"https://github.com/ericelliott/isomorphic-express-boilerplate\">isomorphic Javascript</a>를 작업하기 때문에 Node.js와 Browser 둘 다 작동 해야한다.</p>\n<p>이글은 ES6의 기능이나 동적인 자바스크립트에 대한 깊은 튜토리얼은 아닐것이다. 기본적인 내용으로 Babel 환경에서 개발하고 실행할 수 있게\n하는데에 촛점을 두고있다.</p>\n<h3>Use Babel</h3>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/fit/c/800/800/1*58R0tzuzVXd_7k89Igm9jA.png\" alt=\"Babel\"></p>\n<p>Babel.js(이후 바벨)는 ES6 코드를 ES5 형태로 transpile해서 Node.js와 브라우저에서 지금 바로 사용할 수 있게 하는 좋은 툴이다.\n그러나 셋팅하는 방법이 쉽진 않다.</p>\n<h4>Install Babel</h4>\n<p>바벨에 관한 튜토리얼들은 바벨을 글로벌에 설치하라고 말하는데 이는 당신의 코드가 다른 사람들과 공유되지 않을 때에만 적합하다. 만약 팀 프로젝트이거나 오픈소스 라이브러리를 개발한다면 프로젝트 패키지당 하나씩 로컬로 설치하는게 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install -g babel\n$ npm install --save-dev babel</code></pre></div>\n<p>설치가 완료되면 <code class=\"language-text\">babel-node</code>를 실행해 REPL을 볼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ babel-node\n&gt; Object.assign({}, {msg: &#39;wow!&#39;}); // =&gt; { msg: &#39;wow!&#39; }</code></pre></div>\n<p>브라우저 환경을 위해서는 아래와 같은 것들이 필요하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install --save-dev babelify browserify</code></pre></div>\n<p>이로써 당신은 arrow function과 같은 ES6의 새롭고 좋은 기능들을 사용할 수 있게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>하지만 새로운 built-in method인 <code class=\"language-text\">Object.assign()</code>이나 <code class=\"language-text\">Object.is()</code> 같은 메소드를 사용할 수는 없다.\n이게 조금 애매한데 왜냐하면 <code class=\"language-text\">babel-node</code>의 REPL에서는 제대로 동작하기 때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => true</span></code></pre></div>\n<p>다행히 폴리필을 이용하면 쉽게 해결된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install --save core-js</code></pre></div>\n<p>그리고 엔트리 파일 상단에 아래의 내용을 추가하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'core-js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>Linting</h4>\n<p>혹시 코드 린트를 포기하게 될까봐 적정한다면 걱정할 것 없다. ESLint를 이용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install --save-dev eslint</code></pre></div>\n<blockquote>\n<p><a href=\"https://github.com/ericelliott/prod-module-boilerplate/blob/master/.eslintrc\">내가 사용하고있는 .eslintrc 파일을 보려면 클릭</a></p>\n</blockquote>\n<p><code class=\"language-text\">env</code>와 <code class=\"language-text\">ecmaFeatures</code> 키에 해당되는 내용을 살펴보면 ESLint가 ES6 코드를 만났을때 에러가 발생하는 것을 방지할 수 있다.</p>\n<p>리액트 코드에서 자주쓰이는 ES7의 오브젝트 rest나 spread 프로퍼티를 사용하고자 한다면 <code class=\"language-text\">babel-eslint</code>가 필요할 것이다.</p>\n<h4>Compiling</h4>\n<p>바벨 문서에는 컴파일링이 쉬운것 처럼 말한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ babel script.js --out-file script-compiled.js</code></pre></div>\n<p>보기엔 쉬워보인다. 하지만 이렇게 하는 것은 내부에서 아무런 모듈을 임포트하지 않았을 때에나 정상적으로 동작한다.\n보통은 내부에 디펜던시 관계가 있는 모든 코드 베이스 전체를 컴파일하길 원할 것이다.(한 개의 파일이 아니고)\n이럴 때는 <code class=\"language-text\">-d</code> 옵션을 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ babel -d build-dir source-dir</code></pre></div>\n<p>첫번째 디렉토리가 아웃풋 디렉토리이다.</p>\n<p>그리고 <code class=\"language-text\">node-inspector</code>가 정상적으로 작동하려면 소스 맵이 필요한데 <code class=\"language-text\">-s</code>옵션으로 소스 맵을 만들게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ babel -d build-dir source-dir -s</code></pre></div>\n<p>이렇게 하면 필요한 모든 파일들이 컴파일이 되고 소스 맵파일을 만들어 디버거에서 라이브 코드가 실제로 어떤 원본 소스에 해당하는지 정확하게 찾을 수 있게된다.\n다시 말하면 디버거에서 바벨이 생성한 컴파일된 자바스크립트코드가 아니라 컴파일되기 전애 직접 작성한 원본 코드로 디버깅을 할 수 있다.(역: *_*)</p>\n<p>브라우저를 위한 컴파일에는 Babelify라는 Browserify 트랜스폼이 필요하다. 아래와 같이 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ browserify script.js -t babelify --outfile bundle.js</code></pre></div>\n<h4>기존 모듈의 사용</h4>\n<p>위에 언급된 툴을 이용하면 ES6이나 Node-style의 모듈을 ES6 문법을 이용해 사용할 수 있다.\n(역: NodeJS의 CommonJS방식과 ES6에서 제공하는 Import방식의 모듈을 특별한 작업 없이 바로 사용할 수 있다는 이야기)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import &#39;core-js&#39;; // Node module\nimport harness from &#39;./harness&#39;; // ES6 module</code></pre></div>\n<p>그래서 npm 생태계에서 지원 하는 엄청난 양의 표준 모듈을 특별한 작업 없이 ES6 코드 베이스로 바로 사용할 수 있게된다.\n하지만 많은 사람들이 아직 ES5를 사용하고 있으니 npm에 모듈을 퍼블리시 할 때는 컴파일된 버전을 퍼블리시하는 것을 추천한다.</p>\n<p>공개용 라이브러리를 개발할 때 나는 소스들을 <code class=\"language-text\">source</code> 디렉토리에서 넣어두고 컴파일된 ES5코드들은 <code class=\"language-text\">dist</code>나 <code class=\"language-text\">lib</code>에 둔다.\n<code class=\"language-text\">package.json</code>의 <code class=\"language-text\">main</code>키 값을 컴파일된 ES5 버전의 코드로 두는 것은 좋은 아이디어일 것이다.</p>\n<h4>자동화</h4>\n<p>나는 아래의 커맨드를 npm 스크립트에 등록하고 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint source\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"clean\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rm -rf build/* &amp;&amp; mkdir build/public &amp;&amp; mkdir build/server &amp;&amp; mkdir build/client\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"build-server\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"babel -d build/server source/server -s\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"build-client\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"browserify source/client/index.js -t babelify --outfile build/client/bundle.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run clean &amp;&amp; npm run build-server &amp;&amp; npm build-client\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>React</h4>\n<p>리액트에서도 잘 동작한다. Babel하고 ESLint가 JSX를 지원하기 때문이다.</p>\n<h4>Party Time</h4>\n<p>축하한다! 당신은 동적인 자바스크립트 앱을 위해 ES6를 사용할 준비가 되었다.\n혹시라도 궁금해 할까봐 내가 자주 사용하는 ES6의 유용한것들의 키워드를 나열해본다.</p>\n<ul>\n<li>Compact object literals</li>\n<li>Destructuring</li>\n<li>Arrow functions (한 줄 람다에 최고)</li>\n<li>Default params</li>\n<li>Rest params</li>\n<li>Generators</li>\n</ul>\n<p>당신은 새로운 Defaults/overrides 패턴을 바로 익혀두기 바란다.</p>\n<h4>ES6 Defaults / Overrides Pattern</h4>\n<p>디폴트 파라메터와 간단한 버전의 디폴트/오버라이드 패턴 구현</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    bar <span class=\"token operator\">=</span> <span class=\"token string\">'no'</span><span class=\"token punctuation\">,</span>\n    baz <span class=\"token operator\">=</span> <span class=\"token string\">'works!'</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>bar<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>baz<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    bar<span class=\"token operator\">:</span> <span class=\"token string\">'yay'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs 'yay, works!'</span></code></pre></div>\n<p>ES5 버전에서는 <code class=\"language-text\">Object.assign()</code>을 대체할 약간의 폴리필이 필요하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> assign <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span>assign<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> defaults2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    bar<span class=\"token operator\">:</span> <span class=\"token string\">'no'</span><span class=\"token punctuation\">,</span>\n    baz<span class=\"token operator\">:</span> <span class=\"token string\">'works!'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo2</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> settings <span class=\"token operator\">=</span> <span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> defaults2<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n    bar <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">,</span>\n    baz <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">.</span>baz<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>bar <span class=\"token operator\">+</span> <span class=\"token string\">', '</span> <span class=\"token operator\">+</span>baz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">foo2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    bar<span class=\"token operator\">:</span> <span class=\"token string\">'yay'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs 'yay, works!'</span></code></pre></div>","fields":{"slug":"/2015-06-23-동적인 자바스크립트 앱을 위한 ES6 사용법/"},"excerpt":"동적인 자바스크립트 앱을 위한 ES6 사용법 How to Use ES6 for Isomorphic JavaScript Apps 원문\nhttp://medium.com/javascript-scene/how-to-use-es6-for-isomorphic-javascript-apps-2a9c3abe5ea2  이제 먼지는 좀 가라앉았고, 나는 결국 프로덕션 앱에 ES6를 사용하기 시작했다.\n그리고 isomorphic Javascript를 작업하기 때문에 Node.js와 Browser 둘 다 작동 해야한다. 이글은 ES6의 기능이나 동적인 …","frontmatter":{"title":"동적인 자바스크립트 앱을 위한 ES6 사용법","date":"23 June, 2015","categories":"javascript, translation"}},"recomendPost":{"nodes":[{"fields":{"slug":"/2020-03-12-은닉을 향한 자바스크립트의 여정/"},"frontmatter":{"title":"은닉을 향한 자바스크립트의 여정","categories":"javascript","date":"12 March, 2020"},"excerpt":"ECMAScript 클래스 필드(class field) 명세중에  즉  (이하 Private 속성) 가 있다. 클래스 필드 스펙은 Stage 3(Candidate)까지 올랐으니 아마 곧 Stage 4(Finished)를 거쳐 표준 스펙이 될 것이다. 사실 초기에 명세 문서를 봤을 때는 \"드디어 private이 생기는건가?\"하는 기대감과 \"문법이 좀 별론데\"라는 실망감이 있었을 뿐 뭔가 현실감은 없었다. 그렇게 시간이 흘러 기억 속에서 잊힌 채로 지내다가 얼마전에 타입스크립트 3.8에서 정식으로 지원한다는 소식을 들었고 이를 계기로…"},{"fields":{"slug":"/2018-10-24-reduce()를 이용해 순차적으로 프로미스를 해결하는 방법/"},"frontmatter":{"title":"reduce() 를 이용해 순차적으로 프라미스를 해결하는 방법","categories":"javascript, translation","date":"24 October, 2018"},"excerpt":"원글: Why Using reduce() to Sequentially Resolve Promises Works https://css-tricks.com/why-using-reduce-to-sequentially-resolve-promises-works/ reduce() 를 이용해 순차적으로 프라미스를 해결하는 방법  객체를 사용하지 않고 비동기 자바스크립트 코드를 작성하는 것은 눈을 감고 케이크를 굽는 것 만큼 어렵다. 물론 할 수 있지만 복잡해질 것이고 결국 화딱지가 나서 못 해먹을 것이다. 꼭 필요하다고 말할 순 없지만 일단 …"},{"fields":{"slug":"/2018-08-14-Vue.js에서의 다이나믹 컴포넌트 템플릿/"},"frontmatter":{"title":"Vue.js에서의 다이나믹 컴포넌트 템플릿","categories":"framework, translation","date":"14 August, 2018"},"excerpt":"원글: https://medium.com/scrumpy/dynamic-component-templates-with-vue-js-d9236ab183bb Vue.js에서의 다이나믹 컴포넌트 템플릿 컴포넌트들이 항상 같은 구조로 되어 있진 않다. 그리고 때론 관리해야할 상태들이 많을때도 있다. 이런 문제는 비동기적인 방법으로 해결할 수도 있다. 유즈 케이스 스크럼피는 알림, 댓글, 첨부 파일 등에서 컴포넌트 템플릿을 사용한다. 우선 댓글 부분을 살펴보면서 정확히 어떤 것을 말하는지 알아보자. 최근의 댓글은 더 이상 단순한 텍스트 필드가…"},{"fields":{"slug":"/2018-07-10-요즘 잘나가는 프론트엔드 개발환경 만들기(2018) ES6/"},"frontmatter":{"title":"요즘 잘나가는 프론트엔드 개발환경 만들기(2018): ES6","categories":"frontend, javascript","date":"10 July, 2018"},"excerpt":"요즘 잘나가는 프론트엔드 개발환경 만들기(2018): ES6 본 시리즈의  이전 아티클에서는 웹팩4에 대해 다루면서 바로 쓸 수 있는 환경을 만들어봤다. 이번편에는 그 환경 그대로 이용해 ES6 개발 환경을 추가한다. ES6는 이제 충분히 써도 될만한 시기라고 생각한다. \"나는 프런트 개발자가 아니기도 하고 브라우저가 모두 지원하지도 않기에 ES6는 아직 못쓴다\" 라고 생각하고 있다면 이 글을 통해 생각을 바꿀 수 있길 바란다. 어차피 쓰는 거 ES6뿐 아니라 ES8까지 사용하는 것을 권장한다. IE11 이하 버전들은 ES6나 이…"}]},"recentPost":{"nodes":[{"fields":{"slug":"/2020-12-01/"},"frontmatter":{"title":"browserslist 쾌속 가이드","categories":"frontend, nodejs","date":"01 December, 2020"},"excerpt":"언젠가부터 브라우저스리스트(browserslist)라는 것이 자주 눈에 띄더니 지금은 FE 개발 환경에서 뺄 수 없는 도구가 되었어요. 아마도 바벨(Babel)이라는 FE 계의 걸출한 스타 프로젝트에서 도입했기 때문일 거라고 생각합니다. 바벨을 사용하는 프로젝트들이 많다 보니 간접적으로 혹은 직접적으로 브라우저스리스트까지 사용하게 되는 것이죠. 사실 좋아요 좋은 도구라고 생각합니다. 아마 브라우저 환경을 정의하는 표준처럼 당분간 사용될 것 같아요. 보통 공식 사이트에서 자세히 알 수 있는 내용들들은 글을 따로 안 쓰려고 하는 편인…"},{"fields":{"slug":"/2020-11-23/"},"frontmatter":{"title":"누구나 원하는 개발자되기","categories":"recruit","date":"23 November, 2020"},"excerpt":"5~6년 차 즈음부터 개발자 채용에 조금씩 관여하기 시작했고 현 회사에서는 면접관으로 활동한지 5년이 넘은 것 같다. 면접은 1차 면접에 해당하는 기술 면접이었고 팀의 채용 프로세스를 개선하거나 사전과제, 라이브 코딩 문제 출제에 주도적으로 참여했다. 그간 다양한 개발자들을 만났고 운 좋게도 좋은 개발자들을 많이 채용할 수 있었다. 채용 과정에서 좋은 개발자도 만났지만 그렇지 못했던 개발자도 많았고, 아쉬웠던 개발자도 있었다. 아쉬웠던 개발자들은 노력을 하고 있지만 “어느 정도”로 “어떤 방향”으로 해야 하는지 모르는 경우였고 채…"},{"fields":{"slug":"/2020-10-05/"},"frontmatter":{"title":"독서 습관을 만드는 구체적인 방법","categories":"motivation, life","date":"05 October, 2020"},"excerpt":"독서를 습관으로 만들기 위해 그간 많은 노력을 했었다. 습관적으로 SNS를 열면서 “이럴 시간에 책을 읽었으면…” 하고 자주 생각했지만 SNS 아이콘을 터치하는 유혹을 뿌리치기 힘들었다. 여러 가지 시도를 했고  “하루 25분 실행하기: 하루를 대하는 14년차 개발자의 자세” 에서 밝혔다시피 아직 다독가에 비하면 보잘것없지만 그래도 나름 습관 만들기에는 성공한 것 같다. 독서 습관을 만들면서 알게 된 몇가지 좋은 팁을 공유한다. 읽기 속도 측정하기 독서 습관을 만들 때 제일 중요한 것은 책 읽는 속도를 파악하는 것이라고 생각한다.…"},{"fields":{"slug":"/2020-09-07/"},"frontmatter":{"title":"하루 25분 실행하기: 하루를 대하는 14년차 개발자의 자세","categories":"productivity, motivation, life","date":"07 September, 2020"},"excerpt":"하루 24시간은 모두에게 공평하지만 그 24시간을 모두가 공평하게 사용하진 않는다. 하루의 여가시간을 어떻게 하면 더 효율적으로 사용할 수 있을까는 나의 오랜 고민거리였다. 단기 목표도 세워보고 장기 목표도 세워보고 포모도로, GTD도 도입하고 간츠도 사용해보고 하루 표준 계획표도 짜보고 일주일 보고서도 만들어봤다. 하루를 온전히 “노력”하기 위한 ”노력”을 많이 했다. 시도했던 것 대부분은 조금씩 달랐지만 주로 나에게 맞는 일상 패턴을 찾는 과정이었다. 개발자로서 회사 업무시간이나 여가 시간, 하루 대부분의 시간을 개발과 관련된…"}]}},"pageContext":{"slug":"/2015-06-23-동적인 자바스크립트 앱을 위한 ES6 사용법/","categoriesRegex":"/javascript|translation/g"}},"staticQueryHashes":["1529427419","1755485493","2738229898","993531770"]}